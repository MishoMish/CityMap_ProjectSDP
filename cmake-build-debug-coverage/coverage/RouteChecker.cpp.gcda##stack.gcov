        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/stack
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/TaskFunctions/RouteChecker.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/TaskFunctions/RouteChecker.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_STACK
        -:   11:#define _LIBCPP_STACK
        -:   12:
        -:   13:/*
        -:   14:    stack synopsis
        -:   15:
        -:   16:namespace std
        -:   17:{
        -:   18:
        -:   19:template <class T, class Container = deque<T>>
        -:   20:class stack
        -:   21:{
        -:   22:public:
        -:   23:    typedef Container                                container_type;
        -:   24:    typedef typename container_type::value_type      value_type;
        -:   25:    typedef typename container_type::reference       reference;
        -:   26:    typedef typename container_type::const_reference const_reference;
        -:   27:    typedef typename container_type::size_type       size_type;
        -:   28:
        -:   29:protected:
        -:   30:    container_type c;
        -:   31:
        -:   32:public:
        -:   33:    stack() = default;
        -:   34:    ~stack() = default;
        -:   35:
        -:   36:    stack(const stack& q) = default;
        -:   37:    stack(stack&& q) = default;
        -:   38:
        -:   39:    stack& operator=(const stack& q) = default;
        -:   40:    stack& operator=(stack&& q) = default;
        -:   41:
        -:   42:    explicit stack(const container_type& c);
        -:   43:    explicit stack(container_type&& c);
        -:   44:    template <class InputIterator> stack(InputIterator first, InputIterator last); // since C++23
        -:   45:    template <class Alloc> explicit stack(const Alloc& a);
        -:   46:    template <class Alloc> stack(const container_type& c, const Alloc& a);
        -:   47:    template <class Alloc> stack(container_type&& c, const Alloc& a);
        -:   48:    template <class Alloc> stack(const stack& c, const Alloc& a);
        -:   49:    template <class Alloc> stack(stack&& c, const Alloc& a);
        -:   50:    template<class InputIterator, class Alloc>
        -:   51:    stack(InputIterator first, InputIterator last, const Alloc&); // since C++23
        -:   52:
        -:   53:    bool empty() const;
        -:   54:    size_type size() const;
        -:   55:    reference top();
        -:   56:    const_reference top() const;
        -:   57:
        -:   58:    void push(const value_type& x);
        -:   59:    void push(value_type&& x);
        -:   60:    template <class... Args> reference emplace(Args&&... args); // reference in C++17
        -:   61:    void pop();
        -:   62:
        -:   63:    void swap(stack& c) noexcept(is_nothrow_swappable_v<Container>)
        -:   64:};
        -:   65:
        -:   66:template<class Container>
        -:   67:  stack(Container) -> stack<typename Container::value_type, Container>;  // C++17
        -:   68:
        -:   69:template<class InputIterator>
        -:   70:  stack(InputIterator, InputIterator) -> stack<iter-value-type<InputIterator>>; // since C++23
        -:   71:
        -:   72:template<class Container, class Allocator>
        -:   73:  stack(Container, Allocator) -> stack<typename Container::value_type, Container>; // C++17
        -:   74:
        -:   75:template<class InputIterator, class Allocator>
        -:   76:  stack(InputIterator, InputIterator, Allocator)
        -:   77:    -> stack<iter-value-type<InputIterator>,
        -:   78:             deque<iter-value-type<InputIterator>, Allocator>>; // since C++23
        -:   79:
        -:   80:template <class T, class Container>
        -:   81:  bool operator==(const stack<T, Container>& x, const stack<T, Container>& y);
        -:   82:template <class T, class Container>
        -:   83:  bool operator< (const stack<T, Container>& x, const stack<T, Container>& y);
        -:   84:template <class T, class Container>
        -:   85:  bool operator!=(const stack<T, Container>& x, const stack<T, Container>& y);
        -:   86:template <class T, class Container>
        -:   87:  bool operator> (const stack<T, Container>& x, const stack<T, Container>& y);
        -:   88:template <class T, class Container>
        -:   89:  bool operator>=(const stack<T, Container>& x, const stack<T, Container>& y);
        -:   90:template <class T, class Container>
        -:   91:  bool operator<=(const stack<T, Container>& x, const stack<T, Container>& y);
        -:   92:
        -:   93:template <class T, class Container>
        -:   94:  void swap(stack<T, Container>& x, stack<T, Container>& y)
        -:   95:  noexcept(noexcept(x.swap(y)));
        -:   96:
        -:   97:}  // std
        -:   98:
        -:   99:*/
        -:  100:
        -:  101:#include <__assert> // all public C++ headers provide the assertion handler
        -:  102:#include <__config>
        -:  103:#include <__iterator/iterator_traits.h>
        -:  104:#include <__memory/uses_allocator.h>
        -:  105:#include <__utility/forward.h>
        -:  106:#include <deque>
        -:  107:#include <type_traits>
        -:  108:#include <version>
        -:  109:
        -:  110:#ifndef _LIBCPP_REMOVE_TRANSITIVE_INCLUDES
        -:  111:#  include <functional>
        -:  112:#endif
        -:  113:
        -:  114:// standard-mandated includes
        -:  115:#include <compare>
        -:  116:#include <initializer_list>
        -:  117:
        -:  118:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  119:#  pragma GCC system_header
        -:  120:#endif
        -:  121:
        -:  122:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  123:
        -:  124:template <class _Tp, class _Container = deque<_Tp> > class _LIBCPP_TEMPLATE_VIS stack;
        -:  125:
        -:  126:template <class _Tp, class _Container>
        -:  127:_LIBCPP_INLINE_VISIBILITY
        -:  128:bool
        -:  129:operator==(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y);
        -:  130:
        -:  131:template <class _Tp, class _Container>
        -:  132:_LIBCPP_INLINE_VISIBILITY
        -:  133:bool
        -:  134:operator< (const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y);
        -:  135:
        -:  136:template <class _Tp, class _Container /*= deque<_Tp>*/>
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEED1Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEED2Ev called 4 returned 100% blocks executed 100%
        -:  137:class _LIBCPP_TEMPLATE_VIS stack
        -:  138:{
        -:  139:public:
        -:  140:    typedef _Container                               container_type;
        -:  141:    typedef typename container_type::value_type      value_type;
        -:  142:    typedef typename container_type::reference       reference;
        -:  143:    typedef typename container_type::const_reference const_reference;
        -:  144:    typedef typename container_type::size_type       size_type;
        -:  145:    static_assert((is_same<_Tp, value_type>::value), "" );
        -:  146:
        -:  147:protected:
        -:  148:    container_type c;
        -:  149:
        -:  150:public:
        -:  151:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEEC1B6v15006Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEEC2B6v15006Ev called 4 returned 100% blocks executed 100%
        8:  152:    stack()
        -:  153:        _NOEXCEPT_(is_nothrow_default_constructible<container_type>::value)
        8:  154:        : c() {}
        4:  154-block  0
        4:  154-block  1
        -:  155:
        -:  156:    _LIBCPP_INLINE_VISIBILITY
        -:  157:    stack(const stack& __q) : c(__q.c) {}
        -:  158:
        -:  159:    _LIBCPP_INLINE_VISIBILITY
        -:  160:    stack& operator=(const stack& __q) {c = __q.c; return *this;}
        -:  161:
        -:  162:
        -:  163:#ifndef _LIBCPP_CXX03_LANG
        -:  164:    _LIBCPP_INLINE_VISIBILITY
        -:  165:    stack(stack&& __q)
        -:  166:        _NOEXCEPT_(is_nothrow_move_constructible<container_type>::value)
        -:  167:        : c(_VSTD::move(__q.c)) {}
        -:  168:
        -:  169:    _LIBCPP_INLINE_VISIBILITY
        -:  170:    stack& operator=(stack&& __q)
        -:  171:        _NOEXCEPT_(is_nothrow_move_assignable<container_type>::value)
        -:  172:        {c = _VSTD::move(__q.c); return *this;}
        -:  173:
        -:  174:    _LIBCPP_INLINE_VISIBILITY
        -:  175:    explicit stack(container_type&& __c) : c(_VSTD::move(__c)) {}
        -:  176:#endif // _LIBCPP_CXX03_LANG
        -:  177:
        -:  178:    _LIBCPP_INLINE_VISIBILITY
        -:  179:    explicit stack(const container_type& __c) : c(__c) {}
        -:  180:
        -:  181:    template <class _Alloc>
        -:  182:        _LIBCPP_INLINE_VISIBILITY
        -:  183:        explicit stack(const _Alloc& __a,
        -:  184:                       __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
        -:  185:            : c(__a) {}
        -:  186:    template <class _Alloc>
        -:  187:        _LIBCPP_INLINE_VISIBILITY
        -:  188:        stack(const container_type& __c, const _Alloc& __a,
        -:  189:              __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
        -:  190:            : c(__c, __a) {}
        -:  191:    template <class _Alloc>
        -:  192:        _LIBCPP_INLINE_VISIBILITY
        -:  193:        stack(const stack& __s, const _Alloc& __a,
        -:  194:              __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
        -:  195:            : c(__s.c, __a) {}
        -:  196:#ifndef _LIBCPP_CXX03_LANG
        -:  197:    template <class _Alloc>
        -:  198:        _LIBCPP_INLINE_VISIBILITY
        -:  199:        stack(container_type&& __c, const _Alloc& __a,
        -:  200:              __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
        -:  201:            : c(_VSTD::move(__c), __a) {}
        -:  202:    template <class _Alloc>
        -:  203:        _LIBCPP_INLINE_VISIBILITY
        -:  204:        stack(stack&& __s, const _Alloc& __a,
        -:  205:              __enable_if_t<uses_allocator<container_type, _Alloc>::value>* = 0)
        -:  206:            : c(_VSTD::move(__s.c), __a) {}
        -:  207:#endif // _LIBCPP_CXX03_LANG
        -:  208:
        -:  209:#if _LIBCPP_STD_VER > 20
        -:  210:    template <class _InputIterator,
        -:  211:              class = __enable_if_t<__is_cpp17_input_iterator<_InputIterator>::value>>
        -:  212:    _LIBCPP_HIDE_FROM_ABI
        -:  213:    stack(_InputIterator __first, _InputIterator __last) : c(__first, __last) {}
        -:  214:
        -:  215:    template <class _InputIterator,
        -:  216:              class _Alloc,
        -:  217:              class = __enable_if_t<__is_cpp17_input_iterator<_InputIterator>::value>,
        -:  218:              class = __enable_if_t<uses_allocator<container_type, _Alloc>::value>>
        -:  219:    _LIBCPP_HIDE_FROM_ABI
        -:  220:    stack(_InputIterator __first, _InputIterator __last, const _Alloc& __alloc) : c(__first, __last, __alloc) {}
        -:  221:#endif
        -:  222:
        -:  223:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEE5emptyB6v15006Ev called 18 returned 100% blocks executed 100%
       18:  224:    bool empty()     const      {return c.empty();}
       18:  224-block  0
        -:  225:    _LIBCPP_INLINE_VISIBILITY
        -:  226:    size_type size() const      {return c.size();}
        -:  227:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEE3topB6v15006Ev called 14 returned 100% blocks executed 100%
       14:  228:    reference top()             {return c.back();}
       14:  228-block  0
        -:  229:    _LIBCPP_INLINE_VISIBILITY
        -:  230:    const_reference top() const {return c.back();}
        -:  231:
        -:  232:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEE4pushB6v15006ERKS2_ called 14 returned 100% blocks executed 100%
       14:  233:    void push(const value_type& __v) {c.push_back(__v);}
       14:  233-block  0
        -:  234:#ifndef _LIBCPP_CXX03_LANG
        -:  235:    _LIBCPP_INLINE_VISIBILITY
        -:  236:    void push(value_type&& __v) {c.push_back(_VSTD::move(__v));}
        -:  237:
        -:  238:    template <class... _Args>
        -:  239:        _LIBCPP_INLINE_VISIBILITY
        -:  240:#if _LIBCPP_STD_VER > 14
        -:  241:        decltype(auto) emplace(_Args&&... __args)
        -:  242:        { return c.emplace_back(_VSTD::forward<_Args>(__args)...);}
        -:  243:#else
        -:  244:        void      emplace(_Args&&... __args)
        -:  245:        {        c.emplace_back(_VSTD::forward<_Args>(__args)...);}
        -:  246:#endif
        -:  247:#endif // _LIBCPP_CXX03_LANG
        -:  248:
        -:  249:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__15stackIP5GraphNS_5dequeIS2_NS_9allocatorIS2_EEEEE3popB6v15006Ev called 14 returned 100% blocks executed 100%
       14:  250:    void pop() {c.pop_back();}
       14:  250-block  0
        -:  251:
        -:  252:    _LIBCPP_INLINE_VISIBILITY
        -:  253:    void swap(stack& __s)
        -:  254:        _NOEXCEPT_(__is_nothrow_swappable<container_type>::value)
        -:  255:    {
        -:  256:        using _VSTD::swap;
        -:  257:        swap(c, __s.c);
        -:  258:    }
        -:  259:
        -:  260:    template <class T1, class _C1>
        -:  261:    friend
        -:  262:    bool
        -:  263:    operator==(const stack<T1, _C1>& __x, const stack<T1, _C1>& __y);
        -:  264:
        -:  265:    template <class T1, class _C1>
        -:  266:    friend
        -:  267:    bool
        -:  268:    operator< (const stack<T1, _C1>& __x, const stack<T1, _C1>& __y);
        -:  269:};
        -:  270:
        -:  271:#if _LIBCPP_STD_VER > 14
        -:  272:template<class _Container,
        -:  273:         class = enable_if_t<!__is_allocator<_Container>::value>
        -:  274:>
        -:  275:stack(_Container)
        -:  276:    -> stack<typename _Container::value_type, _Container>;
        -:  277:
        -:  278:template<class _Container,
        -:  279:         class _Alloc,
        -:  280:         class = enable_if_t<!__is_allocator<_Container>::value>,
        -:  281:         class = enable_if_t<uses_allocator<_Container, _Alloc>::value>
        -:  282:         >
        -:  283:stack(_Container, _Alloc)
        -:  284:    -> stack<typename _Container::value_type, _Container>;
        -:  285:#endif
        -:  286:
        -:  287:#if _LIBCPP_STD_VER > 20
        -:  288:template<class _InputIterator,
        -:  289:         class = __enable_if_t<__is_cpp17_input_iterator<_InputIterator>::value>>
        -:  290:stack(_InputIterator, _InputIterator)
        -:  291:    -> stack<__iter_value_type<_InputIterator>>;
        -:  292:
        -:  293:template<class _InputIterator,
        -:  294:         class _Alloc,
        -:  295:         class = __enable_if_t<__is_cpp17_input_iterator<_InputIterator>::value>,
        -:  296:         class = __enable_if_t<__is_allocator<_Alloc>::value>>
        -:  297:stack(_InputIterator, _InputIterator, _Alloc)
        -:  298:    -> stack<__iter_value_type<_InputIterator>, deque<__iter_value_type<_InputIterator>, _Alloc>>;
        -:  299:#endif
        -:  300:
        -:  301:template <class _Tp, class _Container>
        -:  302:inline _LIBCPP_INLINE_VISIBILITY
        -:  303:bool
        -:  304:operator==(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)
        -:  305:{
        -:  306:    return __x.c == __y.c;
        -:  307:}
        -:  308:
        -:  309:template <class _Tp, class _Container>
        -:  310:inline _LIBCPP_INLINE_VISIBILITY
        -:  311:bool
        -:  312:operator< (const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)
        -:  313:{
        -:  314:    return __x.c < __y.c;
        -:  315:}
        -:  316:
        -:  317:template <class _Tp, class _Container>
        -:  318:inline _LIBCPP_INLINE_VISIBILITY
        -:  319:bool
        -:  320:operator!=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)
        -:  321:{
        -:  322:    return !(__x == __y);
        -:  323:}
        -:  324:
        -:  325:template <class _Tp, class _Container>
        -:  326:inline _LIBCPP_INLINE_VISIBILITY
        -:  327:bool
        -:  328:operator> (const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)
        -:  329:{
        -:  330:    return __y < __x;
        -:  331:}
        -:  332:
        -:  333:template <class _Tp, class _Container>
        -:  334:inline _LIBCPP_INLINE_VISIBILITY
        -:  335:bool
        -:  336:operator>=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)
        -:  337:{
        -:  338:    return !(__x < __y);
        -:  339:}
        -:  340:
        -:  341:template <class _Tp, class _Container>
        -:  342:inline _LIBCPP_INLINE_VISIBILITY
        -:  343:bool
        -:  344:operator<=(const stack<_Tp, _Container>& __x, const stack<_Tp, _Container>& __y)
        -:  345:{
        -:  346:    return !(__y < __x);
        -:  347:}
        -:  348:
        -:  349:template <class _Tp, class _Container>
        -:  350:inline _LIBCPP_INLINE_VISIBILITY
        -:  351:__enable_if_t<__is_swappable<_Container>::value, void>
        -:  352:swap(stack<_Tp, _Container>& __x, stack<_Tp, _Container>& __y)
        -:  353:    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
        -:  354:{
        -:  355:    __x.swap(__y);
        -:  356:}
        -:  357:
        -:  358:template <class _Tp, class _Container, class _Alloc>
        -:  359:struct _LIBCPP_TEMPLATE_VIS uses_allocator<stack<_Tp, _Container>, _Alloc>
        -:  360:    : public uses_allocator<_Container, _Alloc>
        -:  361:{
        -:  362:};
        -:  363:
        -:  364:_LIBCPP_END_NAMESPACE_STD
        -:  365:
        -:  366:#endif // _LIBCPP_STACK
