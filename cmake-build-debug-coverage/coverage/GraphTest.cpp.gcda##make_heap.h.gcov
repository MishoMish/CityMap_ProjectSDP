        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__algorithm/make_heap.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphTest.dir/UnitTesting/GraphTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphTest.dir/UnitTesting/GraphTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___ALGORITHM_MAKE_HEAP_H
        -:   10:#define _LIBCPP___ALGORITHM_MAKE_HEAP_H
        -:   11:
        -:   12:#include <__algorithm/comp.h>
        -:   13:#include <__algorithm/comp_ref_type.h>
        -:   14:#include <__algorithm/iterator_operations.h>
        -:   15:#include <__algorithm/sift_down.h>
        -:   16:#include <__config>
        -:   17:#include <__iterator/iterator_traits.h>
        -:   18:#include <__utility/move.h>
        -:   19:
        -:   20:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   21:#  pragma GCC system_header
        -:   22:#endif
        -:   23:
        -:   24:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   25:
        -:   26:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
        -:   27:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11
function _ZNSt3__111__make_heapB6v15006INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEvT1_SB_OT0_ called 0 returned 0% blocks executed 0%
    #####:   28:void __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp) {
        -:   29:  using _CompRef = typename __comp_ref_type<_Compare>::type;
    #####:   30:  _CompRef __comp_ref = __comp;
        -:   31:
        -:   32:  using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
    #####:   33:  difference_type __n = __last - __first;
    #####:   34:  if (__n > 1) {
    $$$$$:   34-block  0
branch  0 never executed
branch  1 never executed
        -:   35:    // start from the first parent, there is no need to consider children
    #####:   36:    for (difference_type __start = (__n - 2) / 2; __start >= 0; --__start) {
    $$$$$:   36-block  0
    $$$$$:   36-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   36-block  2
    #####:   37:        std::__sift_down<_AlgPolicy>(__first, __comp_ref, __n, __first + __start);
    #####:   38:    }
    $$$$$:   38-block  0
    #####:   39:  }
    $$$$$:   39-block  0
    #####:   40:}
    $$$$$:   40-block  0
        -:   41:
        -:   42:template <class _RandomAccessIterator, class _Compare>
        -:   43:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:   44:void make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
        -:   45:  std::__make_heap<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
        -:   46:}
        -:   47:
        -:   48:template <class _RandomAccessIterator>
        -:   49:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:   50:void make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) {
        -:   51:  std::make_heap(std::move(__first), std::move(__last),
        -:   52:      __less<typename iterator_traits<_RandomAccessIterator>::value_type>());
        -:   53:}
        -:   54:
        -:   55:_LIBCPP_END_NAMESPACE_STD
        -:   56:
        -:   57:#endif // _LIBCPP___ALGORITHM_MAKE_HEAP_H
