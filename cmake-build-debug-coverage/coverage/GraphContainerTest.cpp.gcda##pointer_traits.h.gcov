        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__memory/pointer_traits.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphContainerTest.dir/UnitTesting/GraphContainerTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphContainerTest.dir/UnitTesting/GraphContainerTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_POINTER_TRAITS_H
        -:   11:#define _LIBCPP___MEMORY_POINTER_TRAITS_H
        -:   12:
        -:   13:#include <__config>
        -:   14:#include <__memory/addressof.h>
        -:   15:#include <cstddef>
        -:   16:#include <type_traits>
        -:   17:
        -:   18:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   19:#  pragma GCC system_header
        -:   20:#endif
        -:   21:
        -:   22:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   23:
        -:   24:template <class _Tp, class = void>
        -:   25:struct __has_element_type : false_type {};
        -:   26:
        -:   27:template <class _Tp>
        -:   28:struct __has_element_type<_Tp,
        -:   29:              typename __void_t<typename _Tp::element_type>::type> : true_type {};
        -:   30:
        -:   31:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:   32:struct __pointer_traits_element_type;
        -:   33:
        -:   34:template <class _Ptr>
        -:   35:struct __pointer_traits_element_type<_Ptr, true>
        -:   36:{
        -:   37:    typedef _LIBCPP_NODEBUG typename _Ptr::element_type type;
        -:   38:};
        -:   39:
        -:   40:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:   41:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:   42:{
        -:   43:    typedef _LIBCPP_NODEBUG typename _Sp<_Tp, _Args...>::element_type type;
        -:   44:};
        -:   45:
        -:   46:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:   47:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:   48:{
        -:   49:    typedef _LIBCPP_NODEBUG _Tp type;
        -:   50:};
        -:   51:
        -:   52:template <class _Tp, class = void>
        -:   53:struct __has_difference_type : false_type {};
        -:   54:
        -:   55:template <class _Tp>
        -:   56:struct __has_difference_type<_Tp,
        -:   57:            typename __void_t<typename _Tp::difference_type>::type> : true_type {};
        -:   58:
        -:   59:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:   60:struct __pointer_traits_difference_type
        -:   61:{
        -:   62:    typedef _LIBCPP_NODEBUG ptrdiff_t type;
        -:   63:};
        -:   64:
        -:   65:template <class _Ptr>
        -:   66:struct __pointer_traits_difference_type<_Ptr, true>
        -:   67:{
        -:   68:    typedef _LIBCPP_NODEBUG typename _Ptr::difference_type type;
        -:   69:};
        -:   70:
        -:   71:template <class _Tp, class _Up>
        -:   72:struct __has_rebind
        -:   73:{
        -:   74:private:
        -:   75:    template <class _Xp> static false_type __test(...);
        -:   76:    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -:   77:    template <class _Xp> static true_type __test(typename _Xp::template rebind<_Up>* = 0);
        -:   78:    _LIBCPP_SUPPRESS_DEPRECATED_POP
        -:   79:public:
        -:   80:    static const bool value = decltype(__test<_Tp>(0))::value;
        -:   81:};
        -:   82:
        -:   83:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:   84:struct __pointer_traits_rebind
        -:   85:{
        -:   86:#ifndef _LIBCPP_CXX03_LANG
        -:   87:    typedef _LIBCPP_NODEBUG typename _Tp::template rebind<_Up> type;
        -:   88:#else
        -:   89:    typedef _LIBCPP_NODEBUG typename _Tp::template rebind<_Up>::other type;
        -:   90:#endif
        -:   91:};
        -:   92:
        -:   93:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:   94:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:   95:{
        -:   96:#ifndef _LIBCPP_CXX03_LANG
        -:   97:    typedef _LIBCPP_NODEBUG typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:   98:#else
        -:   99:    typedef _LIBCPP_NODEBUG typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  100:#endif
        -:  101:};
        -:  102:
        -:  103:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  104:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  105:{
        -:  106:    typedef _Sp<_Up, _Args...> type;
        -:  107:};
        -:  108:
        -:  109:template <class _Ptr>
        -:  110:struct _LIBCPP_TEMPLATE_VIS pointer_traits
        -:  111:{
        -:  112:    typedef _Ptr                                                     pointer;
        -:  113:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  114:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  115:
        -:  116:#ifndef _LIBCPP_CXX03_LANG
        -:  117:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  118:#else
        -:  119:    template <class _Up> struct rebind
        -:  120:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  121:#endif // _LIBCPP_CXX03_LANG
        -:  122:
        -:  123:private:
        -:  124:    struct __nat {};
        -:  125:public:
        -:  126:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  127:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  128:                                           __nat, element_type>::type& __r)
        -:  129:        {return pointer::pointer_to(__r);}
        -:  130:};
        -:  131:
        -:  132:template <class _Tp>
        -:  133:struct _LIBCPP_TEMPLATE_VIS pointer_traits<_Tp*>
        -:  134:{
        -:  135:    typedef _Tp*      pointer;
        -:  136:    typedef _Tp       element_type;
        -:  137:    typedef ptrdiff_t difference_type;
        -:  138:
        -:  139:#ifndef _LIBCPP_CXX03_LANG
        -:  140:    template <class _Up> using rebind = _Up*;
        -:  141:#else
        -:  142:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  143:#endif
        -:  144:
        -:  145:private:
        -:  146:    struct __nat {};
        -:  147:public:
        -:  148:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__114pointer_traitsIPcE10pointer_toB6v15006ERc called 6 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPKcE10pointer_toB6v15006ERS1_ called 119 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPNS_16__hash_node_baseIPNS_11__hash_nodeIyPvEEEEE10pointer_toB6v15006ERS6_ called 32 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEEE10pointer_toB6v15006ERS6_ called 23 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPKNS_4pairIKP5GraphdEEE10pointer_toB6v15006ERS6_ called 4 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPKNS_17__hash_value_typeIP5GraphdEEE10pointer_toB6v15006ERS5_ called 4 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_17__hash_value_typeIP5GraphdEEPvEEEEE10pointer_toB6v15006ERSA_ called 14 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP5GraphEEPvEEEEE10pointer_toB6v15006ERSG_ called 72 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPNS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEE10pointer_toB6v15006ERSD_ called 3 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPKNS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEE10pointer_toB6v15006ERSE_ called 0 returned 0% blocks executed 0%
      277:  149:    static pointer pointer_to(typename conditional<is_void<element_type>::value,
        -:  150:                                      __nat, element_type>::type& __r) _NOEXCEPT
      277:  151:        {return _VSTD::addressof(__r);}
        6:  151-block  0
      119:  151-block  1
       32:  151-block  2
       23:  151-block  3
        4:  151-block  4
        4:  151-block  5
       14:  151-block  6
       72:  151-block  7
        3:  151-block  8
    $$$$$:  151-block  9
        -:  152:};
        -:  153:
        -:  154:template <class _From, class _To>
        -:  155:struct __rebind_pointer {
        -:  156:#ifndef _LIBCPP_CXX03_LANG
        -:  157:    typedef typename pointer_traits<_From>::template rebind<_To>        type;
        -:  158:#else
        -:  159:    typedef typename pointer_traits<_From>::template rebind<_To>::other type;
        -:  160:#endif
        -:  161:};
        -:  162:
        -:  163:// to_address
        -:  164:
        -:  165:template <class _Pointer, class = void>
        -:  166:struct __to_address_helper;
        -:  167:
        -:  168:template <class _Tp>
        -:  169:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__112__to_addressB6v15006INS_4fposI11__mbstate_tEEEEPT_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006IN7doctest16SubcaseSignatureEEEPT_S4_ called 206 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IPKN7doctest6detail20IExceptionTranslatorEEEPT_S7_ called 4 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IPN7doctest13IContextScopeEEEPT_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006IN7doctest6StringEEEPT_S4_ called 82 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IKcEEPT_S3_ called 121 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006INS_6vectorIN7doctest6StringENS_9allocatorIS3_EEEEEEPT_S8_ called 26 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IPN7doctest9IReporterEEEPT_S5_ called 22 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IPKN7doctest6detail8TestCaseEEEPT_S7_ called 20 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IPKN7doctest12TestCaseDataEEEPT_S6_ called 4 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IcEEPT_S2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_S8_ called 54 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006IN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEEPT_S7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006IN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEEPT_S7_ called 0 returned 0% blocks executed 0%
      539:  170:_Tp* __to_address(_Tp* __p) _NOEXCEPT {
        -:  171:    static_assert(!is_function<_Tp>::value, "_Tp is a function type");
      539:  172:    return __p;
    $$$$$:  172-block  0
      206:  172-block  1
        4:  172-block  2
    $$$$$:  172-block  3
       82:  172-block  4
      121:  172-block  5
       26:  172-block  6
       22:  172-block  7
       20:  172-block  8
        4:  172-block  9
    $$$$$:  172-block 10
       54:  172-block 11
    $$$$$:  172-block 12
    $$$$$:  172-block 13
        -:  173:}
        -:  174:
        -:  175:template <class _Pointer, class = void>
        -:  176:struct _HasToAddress : false_type {};
        -:  177:
        -:  178:template <class _Pointer>
        -:  179:struct _HasToAddress<_Pointer,
        -:  180:    decltype((void)pointer_traits<_Pointer>::to_address(declval<const _Pointer&>()))
        -:  181:> : true_type {};
        -:  182:
        -:  183:template <class _Pointer, class = void>
        -:  184:struct _HasArrow : false_type {};
        -:  185:
        -:  186:template <class _Pointer>
        -:  187:struct _HasArrow<_Pointer,
        -:  188:    decltype((void)declval<const _Pointer&>().operator->())
        -:  189:> : true_type {};
        -:  190:
        -:  191:template <class _Pointer>
        -:  192:struct _IsFancyPointer {
        -:  193:  static const bool value = _HasArrow<_Pointer>::value || _HasToAddress<_Pointer>::value;
        -:  194:};
        -:  195:
        -:  196:// enable_if is needed here to avoid instantiating checks for fancy pointers on raw pointers
        -:  197:template <class _Pointer, class = __enable_if_t<
        -:  198:    _And<is_class<_Pointer>, _IsFancyPointer<_Pointer> >::value
        -:  199:> >
        -:  200:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  201:typename decay<decltype(__to_address_helper<_Pointer>::__call(declval<const _Pointer&>()))>::type
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorIPN7doctest16SubcaseSignatureEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKS7_EEEEE4typeES9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorINS1_IPN7doctest16SubcaseSignatureEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKS8_EEEEE4typeESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_11__wrap_iterIPN7doctest16SubcaseSignatureEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKS7_EEEEE4typeES9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorIPN7doctest6StringEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKS7_EEEEE4typeES9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorINS1_IPN7doctest6StringEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKS8_EEEEE4typeESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_11__wrap_iterIPPKN7doctest6detail8TestCaseEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSA_EEEEE4typeESC_ called 2 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSB_EEEEE4typeESD_ called 3 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorINS1_IPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSC_EEEEE4typeESE_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorIPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSA_EEEEE4typeESC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorINS1_IPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSB_EEEEE4typeESD_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorIPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSA_EEEEE4typeESC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB6v15006INS_16reverse_iteratorINS1_IPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callcl7declvalIRKSB_EEEEE4typeESD_ called 0 returned 0% blocks executed 0%
        5:  202:__to_address(const _Pointer& __p) _NOEXCEPT {
        5:  203:    return __to_address_helper<_Pointer>::__call(__p);
    $$$$$:  203-block  0
    $$$$$:  203-block  1
    $$$$$:  203-block  2
    $$$$$:  203-block  3
    $$$$$:  203-block  4
        2:  203-block  5
        3:  203-block  6
    $$$$$:  203-block  7
    $$$$$:  203-block  8
    $$$$$:  203-block  9
    $$$$$:  203-block 10
    $$$$$:  203-block 11
        -:  204:}
        -:  205:
        -:  206:template <class _Pointer, class>
        -:  207:struct __to_address_helper {
        -:  208:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  209:    static decltype(_VSTD::__to_address(declval<const _Pointer&>().operator->()))
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7doctest16SubcaseSignatureEEEvE6__callB6v15006ERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7doctest16SubcaseSignatureEEEEEvE6__callB6v15006ERKS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7doctest6StringEEEvE6__callB6v15006ERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7doctest6StringEEEEEvE6__callB6v15006ERKS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvE6__callB6v15006ERKS9_ called 3 returned 100% blocks executed 66%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEvE6__callB6v15006ERKSA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEEvE6__callB6v15006ERKS8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEEEEvE6__callB6v15006ERKS9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEEvE6__callB6v15006ERKS8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEEEEvE6__callB6v15006ERKS9_ called 0 returned 0% blocks executed 0%
        3:  210:    __call(const _Pointer& __p) _NOEXCEPT {
        3:  211:        return _VSTD::__to_address(__p.operator->());
    $$$$$:  211-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  211-block  1
    $$$$$:  211-block  2
    $$$$$:  211-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:  211-block  4
    $$$$$:  211-block  5
    $$$$$:  211-block  6
branch  4 never executed
branch  5 never executed
    $$$$$:  211-block  7
    $$$$$:  211-block  8
    $$$$$:  211-block  9
branch  6 never executed
branch  7 never executed
    $$$$$:  211-block 10
    $$$$$:  211-block 11
        3:  211-block 12
branch  8 taken 3
branch  9 taken 0
        3:  211-block 13
    $$$$$:  211-block 14
    $$$$$:  211-block 15
branch 10 never executed
branch 11 never executed
    $$$$$:  211-block 16
    $$$$$:  211-block 17
    $$$$$:  211-block 18
branch 12 never executed
branch 13 never executed
    $$$$$:  211-block 19
    $$$$$:  211-block 20
    $$$$$:  211-block 21
branch 14 never executed
branch 15 never executed
    $$$$$:  211-block 22
    $$$$$:  211-block 23
    $$$$$:  211-block 24
branch 16 never executed
branch 17 never executed
    $$$$$:  211-block 25
    $$$$$:  211-block 26
    $$$$$:  211-block 27
branch 18 never executed
branch 19 never executed
    $$$$$:  211-block 28
    $$$$$:  211-block 29
        -:  212:    }
        -:  213:};
        -:  214:
        -:  215:template <class _Pointer>
        -:  216:struct __to_address_helper<_Pointer, decltype((void)pointer_traits<_Pointer>::to_address(declval<const _Pointer&>()))> {
        -:  217:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  218:    static decltype(pointer_traits<_Pointer>::to_address(declval<const _Pointer&>()))
function _ZNSt3__119__to_address_helperINS_11__wrap_iterIPN7doctest16SubcaseSignatureEEEvE6__callB6v15006ERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_11__wrap_iterIPPKN7doctest6detail8TestCaseEEEvE6__callB6v15006ERKS8_ called 2 returned 100% blocks executed 100%
        2:  219:    __call(const _Pointer& __p) _NOEXCEPT {
        2:  220:        return pointer_traits<_Pointer>::to_address(__p);
    $$$$$:  220-block  0
        2:  220-block  1
        -:  221:    }
        -:  222:};
        -:  223:
        -:  224:#if _LIBCPP_STD_VER > 17
        -:  225:template <class _Tp>
        -:  226:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -:  227:auto to_address(_Tp *__p) noexcept {
        -:  228:    return _VSTD::__to_address(__p);
        -:  229:}
        -:  230:
        -:  231:template <class _Pointer>
        -:  232:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -:  233:auto to_address(const _Pointer& __p) noexcept -> decltype(std::__to_address(__p)) {
        -:  234:    return _VSTD::__to_address(__p);
        -:  235:}
        -:  236:#endif
        -:  237:
        -:  238:_LIBCPP_END_NAMESPACE_STD
        -:  239:
        -:  240:#endif // _LIBCPP___MEMORY_POINTER_TRAITS_H
