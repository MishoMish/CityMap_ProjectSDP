        -:    0:Source:/Users/mihaildobroslavski/CLionProjects/CityMapProject/UnitTesting/TerminalProgramTest.cpp
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/TerminalProgramTest.dir/UnitTesting/TerminalProgramTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/TerminalProgramTest.dir/UnitTesting/TerminalProgramTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Mihail Dobroslavski on 30.12.23.
        -:    3://
        -:    4:
        -:    5:#define DOCTEST_CONFIG_IMPLEMENT
        -:    6:
        -:    7:#include "doctest.h"
        -:    8:#include "../Interfaces/TerminalProgram.h"
        -:    9:#include "../Structure/GraphContainer.h"
        -:   10:#include "../Structure/Graph.h"
        -:   11:
function _ZL20DOCTEST_ANON_FUNC_14v called 5 returned 100% blocks executed 50%
        6:   12:TEST_CASE("TerminalProgram Test") {
        1:   12-block  0
branch  0 taken 1
branch  1 taken 0
        1:   12-block  1
branch  2 taken 1
branch  3 taken 0
        1:   12-block  2
branch  4 taken 1
branch  5 taken 0
        1:   12-block  3
    $$$$$:   12-block  4
    $$$$$:   12-block  5
    $$$$$:   12-block  6
    $$$$$:   12-block  7
        5:   13:    auto *container = new GraphContainer();
        5:   14:    container->addGraph("CityA");
        5:   14-block  0
branch  0 taken 5
branch  1 taken 0
    $$$$$:   14-block  1
    $$$$$:   14-block  2
        5:   15:    Graph *cityA = container->getGraph("CityA");
        5:   15-block  0
branch  0 taken 5
branch  1 taken 0
    $$$$$:   15-block  1
        -:   16:
        5:   17:    container->addGraph("CityB");
        5:   17-block  0
branch  0 taken 5
branch  1 taken 0
    $$$$$:   17-block  1
        5:   18:    Graph *cityB = container->getGraph("CityB");
        5:   18-block  0
branch  0 taken 5
branch  1 taken 0
    $$$$$:   18-block  1
        -:   19:
        5:   20:    Graph *start = cityA;
        -:   21:
        5:   22:    TerminalProgram terminalProgram = TerminalProgram(container, start);
        -:   23:
        6:   24:    SUBCASE("Constructor Test") {
        5:   24-block  0
branch  0 taken 5
branch  1 taken 0
        5:   24-block  1
branch  2 taken 5
branch  3 taken 0
        5:   24-block  2
branch  4 taken 4
branch  5 taken 1
    $$$$$:   24-block  3
    $$$$$:   24-block  4
        1:   25:        REQUIRE(terminalProgram.getMap() == container);
        1:   25-block  0
        1:   25-block  1
branch  0 taken 1
branch  1 taken 0
        1:   25-block  2
branch  2 taken 1
branch  3 taken 0
        1:   25-block  3
branch  4 taken 1
branch  5 taken 0
        1:   25-block  4
branch  6 taken 1
branch  7 taken 0
        1:   25-block  5
branch  8 taken 1
branch  9 taken 0
        1:   25-block  6
branch 10 taken 1
branch 11 taken 0
        1:   25-block  7
    $$$$$:   25-block  8
    $$$$$:   25-block  9
    $$$$$:   25-block 10
    $$$$$:   25-block 11
branch 12 never executed
branch 13 never executed
    $$$$$:   25-block 12
branch 14 never executed
branch 15 never executed
    $$$$$:   25-block 13
        1:   25-block 14
branch 16 taken 1
branch 17 taken 0
        1:   25-block 15
branch 18 taken 0
branch 19 taken 1
    $$$$$:   25-block 16
branch 20 never executed
branch 21 never executed
    $$$$$:   25-block 17
    $$$$$:   25-block 18
branch 22 never executed
branch 23 never executed
    $$$$$:   25-block 19
        1:   25-block 20
branch 24 taken 1
branch 25 taken 0
        1:   25-block 21
        1:   25-block 22
    $$$$$:   25-block 23
    $$$$$:   25-block 24
        1:   26:        REQUIRE(terminalProgram.getCurrent() == start);
        1:   26-block  0
        1:   26-block  1
branch  0 taken 1
branch  1 taken 0
        1:   26-block  2
branch  2 taken 1
branch  3 taken 0
        1:   26-block  3
branch  4 taken 1
branch  5 taken 0
        1:   26-block  4
branch  6 taken 1
branch  7 taken 0
        1:   26-block  5
branch  8 taken 1
branch  9 taken 0
        1:   26-block  6
branch 10 taken 1
branch 11 taken 0
        1:   26-block  7
    $$$$$:   26-block  8
    $$$$$:   26-block  9
    $$$$$:   26-block 10
branch 12 never executed
branch 13 never executed
    $$$$$:   26-block 11
branch 14 never executed
branch 15 never executed
    $$$$$:   26-block 12
        1:   26-block 13
branch 16 taken 1
branch 17 taken 0
        1:   26-block 14
branch 18 taken 0
branch 19 taken 1
    $$$$$:   26-block 15
branch 20 never executed
branch 21 never executed
    $$$$$:   26-block 16
    $$$$$:   26-block 17
branch 22 never executed
branch 23 never executed
    $$$$$:   26-block 18
        1:   26-block 19
branch 24 taken 1
branch 25 taken 0
        1:   26-block 20
        1:   26-block 21
    $$$$$:   26-block 22
        1:   27:        REQUIRE(terminalProgram.getClosedJunctions().empty());
        1:   27-block  0
        1:   27-block  1
branch  0 taken 1
branch  1 taken 0
        1:   27-block  2
branch  2 taken 1
branch  3 taken 0
        1:   27-block  3
branch  4 taken 1
branch  5 taken 0
        1:   27-block  4
branch  6 taken 1
branch  7 taken 0
        1:   27-block  5
branch  8 taken 1
branch  9 taken 0
        1:   27-block  6
branch 10 taken 1
branch 11 taken 0
        1:   27-block  7
    $$$$$:   27-block  8
    $$$$$:   27-block  9
    $$$$$:   27-block 10
    $$$$$:   27-block 11
branch 12 never executed
branch 13 never executed
    $$$$$:   27-block 12
branch 14 never executed
branch 15 never executed
    $$$$$:   27-block 13
        1:   27-block 14
branch 16 taken 1
branch 17 taken 0
        1:   27-block 15
branch 18 taken 0
branch 19 taken 1
    $$$$$:   27-block 16
branch 20 never executed
branch 21 never executed
    $$$$$:   27-block 17
    $$$$$:   27-block 18
branch 22 never executed
branch 23 never executed
    $$$$$:   27-block 19
        1:   27-block 20
branch 24 taken 1
branch 25 taken 0
        1:   27-block 21
        1:   27-block 22
    $$$$$:   27-block 23
        1:   28:    }
        1:   28-block  0
        -:   29:
        6:   30:    SUBCASE("Location Test") {
        5:   30-block  0
branch  0 taken 5
branch  1 taken 0
        5:   30-block  1
branch  2 taken 5
branch  3 taken 0
        5:   30-block  2
branch  4 taken 4
branch  5 taken 1
    $$$$$:   30-block  3
    $$$$$:   30-block  4
        1:   31:        std::stringstream buffer;
        1:   31-block  0
branch  0 taken 1
branch  1 taken 0
        1:   32:        std::streambuf *oldCout = std::cout.rdbuf(buffer.rdbuf());
        1:   32-block  0
branch  0 taken 1
branch  1 taken 0
        1:   33:        terminalProgram.handleLocationCommand();
        1:   33-block  0
branch  0 taken 1
branch  1 taken 0
        1:   34:        std::cout.rdbuf(oldCout);
        1:   34-block  0
branch  0 taken 1
branch  1 taken 0
        1:   35:        REQUIRE(buffer.str() == "Current location: CityA\n");
        1:   35-block  0
        1:   35-block  1
branch  0 taken 1
branch  1 taken 0
        1:   35-block  2
branch  2 taken 1
branch  3 taken 0
        1:   35-block  3
branch  4 taken 1
branch  5 taken 0
        1:   35-block  4
branch  6 taken 1
branch  7 taken 0
        1:   35-block  5
branch  8 taken 1
branch  9 taken 0
        1:   35-block  6
branch 10 taken 1
branch 11 taken 0
        1:   35-block  7
    $$$$$:   35-block  8
    $$$$$:   35-block  9
    $$$$$:   35-block 10
    $$$$$:   35-block 11
    $$$$$:   35-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:   35-block 13
branch 14 never executed
branch 15 never executed
    $$$$$:   35-block 14
        1:   35-block 15
branch 16 taken 1
branch 17 taken 0
        1:   35-block 16
branch 18 taken 0
branch 19 taken 1
    $$$$$:   35-block 17
branch 20 never executed
branch 21 never executed
    $$$$$:   35-block 18
    $$$$$:   35-block 19
branch 22 never executed
branch 23 never executed
    $$$$$:   35-block 20
        1:   35-block 21
branch 24 taken 1
branch 25 taken 0
        1:   35-block 22
        1:   35-block 23
    $$$$$:   35-block 24
        1:   36:    }
        1:   36-block  0
    $$$$$:   36-block  1
        -:   37:
        -:   38:    // Add more SUBCASEs for other test scenarios
        -:   39:
        6:   40:    SUBCASE("Close Test") {
        5:   40-block  0
branch  0 taken 5
branch  1 taken 0
        5:   40-block  1
branch  2 taken 5
branch  3 taken 0
        5:   40-block  2
branch  4 taken 4
branch  5 taken 1
    $$$$$:   40-block  3
    $$$$$:   40-block  4
        -:   41:
        1:   42:        std::stringstream outputBuffer;
        1:   42-block  0
branch  0 taken 1
branch  1 taken 0
        1:   43:        std::streambuf *oldCoutBuffer = std::cout.rdbuf(outputBuffer.rdbuf());
        1:   43-block  0
branch  0 taken 1
branch  1 taken 0
        -:   44:
        -:   45:        // Close CityB
        1:   46:        std::stringstream input("CityB");
        1:   46-block  0
branch  0 taken 1
branch  1 taken 0
        1:   46-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   46-block  2
        1:   47:        terminalProgram.handleCloseCommand(input);
        1:   47-block  0
branch  0 taken 1
branch  1 taken 0
        -:   48:
        -:   49:        // Reset cout to the original buffer
        1:   50:        std::cout.rdbuf(oldCoutBuffer);
        1:   50-block  0
branch  0 taken 1
branch  1 taken 0
        -:   51:
        -:   52:        // Verify the output
        1:   53:        std::string expectedOutput = "Closed location: CityB\n";
        1:   53-block  0
branch  0 taken 1
branch  1 taken 0
        1:   54:        REQUIRE(outputBuffer.str() == expectedOutput);
        1:   54-block  0
        1:   54-block  1
branch  0 taken 1
branch  1 taken 0
        1:   54-block  2
branch  2 taken 1
branch  3 taken 0
        1:   54-block  3
branch  4 taken 1
branch  5 taken 0
        1:   54-block  4
branch  6 taken 1
branch  7 taken 0
        1:   54-block  5
branch  8 taken 1
branch  9 taken 0
        1:   54-block  6
branch 10 taken 1
branch 11 taken 0
        1:   54-block  7
    $$$$$:   54-block  8
    $$$$$:   54-block  9
    $$$$$:   54-block 10
    $$$$$:   54-block 11
    $$$$$:   54-block 12
    $$$$$:   54-block 13
branch 12 never executed
branch 13 never executed
    $$$$$:   54-block 14
branch 14 never executed
branch 15 never executed
    $$$$$:   54-block 15
        1:   54-block 16
branch 16 taken 1
branch 17 taken 0
        1:   54-block 17
branch 18 taken 0
branch 19 taken 1
    $$$$$:   54-block 18
branch 20 never executed
branch 21 never executed
    $$$$$:   54-block 19
    $$$$$:   54-block 20
branch 22 never executed
branch 23 never executed
    $$$$$:   54-block 21
        1:   54-block 22
branch 24 taken 1
branch 25 taken 0
        1:   54-block 23
        1:   54-block 24
    $$$$$:   54-block 25
        1:   55:        REQUIRE(terminalProgram.getClosedJunctions().count(container->getGraph("CityB")) == 1);
        1:   55-block  0
        1:   55-block  1
branch  0 taken 1
branch  1 taken 0
        1:   55-block  2
branch  2 taken 1
branch  3 taken 0
        1:   55-block  3
branch  4 taken 1
branch  5 taken 0
        1:   55-block  4
branch  6 taken 1
branch  7 taken 0
        1:   55-block  5
branch  8 taken 1
branch  9 taken 0
        1:   55-block  6
branch 10 taken 1
branch 11 taken 0
        1:   55-block  7
branch 12 taken 1
branch 13 taken 0
        1:   55-block  8
branch 14 taken 1
branch 15 taken 0
        1:   55-block  9
branch 16 taken 1
branch 17 taken 0
        1:   55-block 10
    $$$$$:   55-block 11
    $$$$$:   55-block 12
    $$$$$:   55-block 13
    $$$$$:   55-block 14
    $$$$$:   55-block 15
branch 18 never executed
branch 19 never executed
    $$$$$:   55-block 16
branch 20 never executed
branch 21 never executed
    $$$$$:   55-block 17
        1:   55-block 18
branch 22 taken 1
branch 23 taken 0
        1:   55-block 19
branch 24 taken 0
branch 25 taken 1
    $$$$$:   55-block 20
branch 26 never executed
branch 27 never executed
    $$$$$:   55-block 21
    $$$$$:   55-block 22
branch 28 never executed
branch 29 never executed
    $$$$$:   55-block 23
        1:   55-block 24
branch 30 taken 1
branch 31 taken 0
        1:   55-block 25
        1:   55-block 26
    $$$$$:   55-block 27
        1:   56:    }
        1:   56-block  0
    $$$$$:   56-block  1
    $$$$$:   56-block  2
    $$$$$:   56-block  3
        -:   57:
        6:   58:    SUBCASE("Open Test") {
        5:   58-block  0
branch  0 taken 5
branch  1 taken 0
        5:   58-block  1
branch  2 taken 5
branch  3 taken 0
        5:   58-block  2
branch  4 taken 4
branch  5 taken 1
    $$$$$:   58-block  3
    $$$$$:   58-block  4
        -:   59:
        -:   60:        // Redirect cout to capture the output
        1:   61:        std::stringstream outputBuffer;
        1:   61-block  0
branch  0 taken 1
branch  1 taken 0
        1:   62:        std::streambuf *oldCoutBuffer = std::cout.rdbuf(outputBuffer.rdbuf());
        1:   62-block  0
branch  0 taken 1
branch  1 taken 0
        -:   63:
        -:   64:        // Close CityB first
        1:   65:        terminalProgram.getClosedJunctions().insert(container->getGraph("CityB"));
        1:   65-block  0
branch  0 taken 1
branch  1 taken 0
        1:   65-block  1
branch  2 taken 1
branch  3 taken 0
        1:   65-block  2
branch  4 taken 1
branch  5 taken 0
        1:   65-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$:   65-block  4
    $$$$$:   65-block  5
        -:   66:
        -:   67:        // Open CityB
        1:   68:        std::stringstream input("CityB");
        1:   68-block  0
branch  0 taken 1
branch  1 taken 0
        1:   68-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   68-block  2
        1:   69:        terminalProgram.handleOpenCommand(input);
        1:   69-block  0
branch  0 taken 1
branch  1 taken 0
        -:   70:
        -:   71:        // Reset cout to the original buffer
        1:   72:        std::cout.rdbuf(oldCoutBuffer);
        1:   72-block  0
branch  0 taken 1
branch  1 taken 0
        -:   73:
        -:   74:        // Verify the output
        1:   75:        std::string expectedOutput = "Opened location: CityB\n";
        1:   75-block  0
branch  0 taken 1
branch  1 taken 0
        1:   76:        REQUIRE(outputBuffer.str() == expectedOutput);
        1:   76-block  0
        1:   76-block  1
branch  0 taken 1
branch  1 taken 0
        1:   76-block  2
branch  2 taken 1
branch  3 taken 0
        1:   76-block  3
branch  4 taken 1
branch  5 taken 0
        1:   76-block  4
branch  6 taken 1
branch  7 taken 0
        1:   76-block  5
branch  8 taken 1
branch  9 taken 0
        1:   76-block  6
branch 10 taken 1
branch 11 taken 0
        1:   76-block  7
    $$$$$:   76-block  8
    $$$$$:   76-block  9
    $$$$$:   76-block 10
    $$$$$:   76-block 11
    $$$$$:   76-block 12
    $$$$$:   76-block 13
branch 12 never executed
branch 13 never executed
    $$$$$:   76-block 14
branch 14 never executed
branch 15 never executed
    $$$$$:   76-block 15
        1:   76-block 16
branch 16 taken 1
branch 17 taken 0
        1:   76-block 17
branch 18 taken 0
branch 19 taken 1
    $$$$$:   76-block 18
branch 20 never executed
branch 21 never executed
    $$$$$:   76-block 19
    $$$$$:   76-block 20
branch 22 never executed
branch 23 never executed
    $$$$$:   76-block 21
        1:   76-block 22
branch 24 taken 1
branch 25 taken 0
        1:   76-block 23
        1:   76-block 24
    $$$$$:   76-block 25
        1:   77:        REQUIRE(terminalProgram.getClosedJunctions().count(container->getGraph("CityB")) == 0);
        1:   77-block  0
        1:   77-block  1
branch  0 taken 1
branch  1 taken 0
        1:   77-block  2
branch  2 taken 1
branch  3 taken 0
        1:   77-block  3
branch  4 taken 1
branch  5 taken 0
        1:   77-block  4
branch  6 taken 1
branch  7 taken 0
        1:   77-block  5
branch  8 taken 1
branch  9 taken 0
        1:   77-block  6
branch 10 taken 1
branch 11 taken 0
        1:   77-block  7
branch 12 taken 1
branch 13 taken 0
        1:   77-block  8
branch 14 taken 1
branch 15 taken 0
        1:   77-block  9
branch 16 taken 0
branch 17 taken 1
        1:   77-block 10
    $$$$$:   77-block 11
    $$$$$:   77-block 12
    $$$$$:   77-block 13
    $$$$$:   77-block 14
    $$$$$:   77-block 15
branch 18 never executed
branch 19 never executed
    $$$$$:   77-block 16
branch 20 never executed
branch 21 never executed
    $$$$$:   77-block 17
        1:   77-block 18
branch 22 taken 1
branch 23 taken 0
        1:   77-block 19
branch 24 taken 0
branch 25 taken 1
    $$$$$:   77-block 20
branch 26 never executed
branch 27 never executed
    $$$$$:   77-block 21
    $$$$$:   77-block 22
branch 28 never executed
branch 29 never executed
    $$$$$:   77-block 23
        1:   77-block 24
branch 30 taken 1
branch 31 taken 0
        1:   77-block 25
        1:   77-block 26
    $$$$$:   77-block 27
        1:   78:    }
        1:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
    $$$$$:   78-block  3
        -:   79:
        6:   80:    SUBCASE("Closed (getClosed) Test") {
        5:   80-block  0
branch  0 taken 5
branch  1 taken 0
        5:   80-block  1
branch  2 taken 5
branch  3 taken 0
        5:   80-block  2
branch  4 taken 4
branch  5 taken 1
    $$$$$:   80-block  3
    $$$$$:   80-block  4
        1:   81:        container->addGraph("CityC");
        1:   81-block  0
branch  0 taken 1
branch  1 taken 0
        1:   81-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   81-block  2
        1:   82:        Graph *cityC = container->getGraph("CityC");
        1:   82-block  0
branch  0 taken 1
branch  1 taken 0
        1:   82-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   82-block  2
        -:   83:
        1:   84:        std::stringstream input("CityB CityC");
        1:   84-block  0
branch  0 taken 1
branch  1 taken 0
        1:   84-block  1
branch  2 taken 1
branch  3 taken 0
    $$$$$:   84-block  2
        1:   85:        terminalProgram.handleCloseCommand(input);
        1:   85-block  0
branch  0 taken 1
branch  1 taken 0
        1:   86:        terminalProgram.handleCloseCommand(input);
        1:   86-block  0
branch  0 taken 1
branch  1 taken 0
        -:   87:
        1:   88:        std::stringstream outputBuffer;
        1:   88-block  0
branch  0 taken 1
branch  1 taken 0
        1:   89:        std::streambuf *oldCoutBuffer = std::cout.rdbuf(outputBuffer.rdbuf());
        1:   89-block  0
branch  0 taken 1
branch  1 taken 0
        -:   90:
        1:   91:        terminalProgram.handleClosedCommand();
        1:   91-block  0
branch  0 taken 1
branch  1 taken 0
        -:   92:
        1:   93:        std::cout.rdbuf(oldCoutBuffer);
        1:   93-block  0
branch  0 taken 1
branch  1 taken 0
        -:   94:
        1:   95:        std::string expectedOutput1 = "Closed locations: CityB CityC \n";
        1:   95-block  0
branch  0 taken 1
branch  1 taken 0
        1:   96:        std::string expectedOutput2 = "Closed locations: CityC CityB \n";
        1:   96-block  0
branch  0 taken 1
branch  1 taken 0
        -:   97:
        1:   98:        REQUIRE((outputBuffer.str() == expectedOutput1 || outputBuffer.str() == expectedOutput2));
        1:   98-block  0
        1:   98-block  1
branch  0 taken 1
branch  1 taken 0
        1:   98-block  2
branch  2 taken 1
branch  3 taken 0
        1:   98-block  3
branch  4 taken 1
branch  5 taken 0
        1:   98-block  4
branch  6 taken 0
branch  7 taken 1
        1:   98-block  5
branch  8 taken 1
branch  9 taken 0
        1:   98-block  6
        1:   98-block  7
branch 10 taken 1
branch 11 taken 0
        1:   98-block  8
branch 12 taken 1
branch 13 taken 0
        1:   98-block  9
branch 14 taken 1
branch 15 taken 0
        1:   98-block 10
branch 16 taken 0
branch 17 taken 1
        1:   98-block 11
        1:   98-block 12
    $$$$$:   98-block 13
    $$$$$:   98-block 14
    $$$$$:   98-block 15
    $$$$$:   98-block 16
branch 18 never executed
branch 19 never executed
    $$$$$:   98-block 17
    $$$$$:   98-block 18
    $$$$$:   98-block 19
    $$$$$:   98-block 20
branch 20 never executed
branch 21 never executed
    $$$$$:   98-block 21
branch 22 never executed
branch 23 never executed
    $$$$$:   98-block 22
        1:   98-block 23
branch 24 taken 1
branch 25 taken 0
        1:   98-block 24
branch 26 taken 0
branch 27 taken 1
    $$$$$:   98-block 25
branch 28 never executed
branch 29 never executed
    $$$$$:   98-block 26
    $$$$$:   98-block 27
branch 30 never executed
branch 31 never executed
    $$$$$:   98-block 28
        1:   98-block 29
branch 32 taken 1
branch 33 taken 0
        1:   98-block 30
        1:   98-block 31
    $$$$$:   98-block 32
        1:   99:    }
        1:   99-block  0
    $$$$$:   99-block  1
    $$$$$:   99-block  2
    $$$$$:   99-block  3
    $$$$$:   99-block  4
        5:  100:}
    $$$$$:  100-block  0
    $$$$$:  100-block  1
    $$$$$:  100-block  2
    $$$$$:  100-block  3
    $$$$$:  100-block  4
    $$$$$:  100-block  5
    $$$$$:  100-block  6
    $$$$$:  100-block  7
    $$$$$:  100-block  8
    $$$$$:  100-block  9
    $$$$$:  100-block 10
    $$$$$:  100-block 11
    $$$$$:  100-block 12
    $$$$$:  100-block 13
    $$$$$:  100-block 14
    $$$$$:  100-block 15
    $$$$$:  100-block 16
    $$$$$:  100-block 17
    $$$$$:  100-block 18
    $$$$$:  100-block 19
    $$$$$:  100-block 20
    $$$$$:  100-block 21
    $$$$$:  100-block 22
    $$$$$:  100-block 23
    $$$$$:  100-block 24
    $$$$$:  100-block 25
    $$$$$:  100-block 26
    $$$$$:  100-block 27
    $$$$$:  100-block 28
    $$$$$:  100-block 29
    $$$$$:  100-block 30
    $$$$$:  100-block 31
    $$$$$:  100-block 32
    $$$$$:  100-block 33
    $$$$$:  100-block 34
    $$$$$:  100-block 35
    $$$$$:  100-block 36
    $$$$$:  100-block 37
    $$$$$:  100-block 38
    $$$$$:  100-block 39
    $$$$$:  100-block 40
    $$$$$:  100-block 41
    $$$$$:  100-block 42
    $$$$$:  100-block 43
    $$$$$:  100-block 44
        5:  100-block 45
    $$$$$:  100-block 46
        -:  101:
        -:  102:
function main called 1 returned 100% blocks executed 50%
        1:  103:int main(int argc, char *argv[]) {
        1:  104:    doctest::Context context(argc, argv);
        1:  105:    return context.run();
        1:  105-block  0
branch  0 taken 1
branch  1 taken 0
        1:  106:}
        1:  106-block  0
    $$$$$:  106-block  1
    $$$$$:  106-block  2
