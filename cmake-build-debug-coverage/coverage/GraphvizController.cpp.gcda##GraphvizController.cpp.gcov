        -:    0:Source:/Users/mihaildobroslavski/CLionProjects/CityMapProject/Interfaces/GraphvizController.cpp
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/Interfaces/GraphvizController.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/Interfaces/GraphvizController.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Mihail Dobroslavski on 27.12.23.
        -:    3://
        -:    4:
        -:    5:#include "GraphvizController.h"
        -:    6:
function _ZN18GraphvizController15generateDotFileEP14GraphContainerP5GraphNSt3__113unordered_setIS3_NS4_4hashIS3_EENS4_8equal_toIS3_EENS4_9allocatorIS3_EEEE called 1 returned 100% blocks executed 88%
        1:    7:void GraphvizController::generateDotFile(GraphContainer *graphContainer, Graph *current,
        -:    8:                                         std::unordered_set<Graph *> closed) {
        1:    9:    std::ofstream dotFile("graph.dot");
        1:   10:    if (!dotFile.is_open()) {
        1:   10-block  0
branch  0 taken 1
branch  1 taken 0
        1:   10-block  1
branch  2 taken 0
branch  3 taken 1
    #####:   11:        std::cerr << "Error opening DOT file for writing." << std::endl;
    $$$$$:   11-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   11-block  1
branch  2 never executed
branch  3 never executed
    #####:   12:        return;
    $$$$$:   12-block  0
        -:   13:    }
        -:   14:
        1:   15:    dotFile << "digraph G {\n";
        1:   15-block  0
branch  0 taken 1
branch  1 taken 0
        1:   16:    dotFile << "  graph [rankdir=LR];\n";
        1:   16-block  0
branch  0 taken 1
branch  1 taken 0
        1:   17:    dotFile << "  node [shape=\"box\", color = \"black\", style=\"filled\"];\n";
        1:   17-block  0
branch  0 taken 1
branch  1 taken 0
        5:   18:    for (const auto &graphPair: graphContainer->getGraphs()) {
        1:   18-block  0
branch  0 taken 1
branch  1 taken 0
        1:   18-block  1
        5:   18-block  2
branch  2 taken 5
branch  3 taken 0
        5:   18-block  3
branch  4 taken 4
branch  5 taken 1
        4:   18-block  4
branch  6 taken 4
branch  7 taken 0
        4:   18-block  5
        4:   18-block  6
branch  8 taken 4
branch  9 taken 0
        4:   18-block  7
        4:   19:        Graph *graph = graphPair.second;
        4:   20:        bool graphtIsClosed = (closed.find(graph) != closed.end());
        4:   20-block  0
branch  0 taken 4
branch  1 taken 0
        4:   20-block  1
branch  2 taken 4
branch  3 taken 0
        -:   21:
        4:   22:        dotFile << "  \"" << graph << "\" [label=\"" << graph->getName() << "\", fillcolor=\""
        4:   22-block  0
branch  0 taken 4
branch  1 taken 0
        4:   22-block  1
branch  2 taken 4
branch  3 taken 0
        4:   22-block  2
branch  4 taken 4
branch  5 taken 0
        4:   22-block  3
branch  6 taken 4
branch  7 taken 0
        4:   22-block  4
branch  8 taken 4
branch  9 taken 0
        4:   22-block  5
branch 10 taken 4
branch 11 taken 0
        4:   23:                << (current == graph ? "orange" : (graphtIsClosed ? "red" : "green")) << "\"];\n";
        4:   23-block  0
branch  0 taken 3
branch  1 taken 1
        1:   23-block  1
        3:   23-block  2
        4:   23-block  3
branch  2 taken 4
branch  3 taken 0
        4:   23-block  4
branch  4 taken 4
branch  5 taken 0
        -:   24:
        8:   25:        for (const auto &neighborPair: graph->getAdjacencyList()) {
        4:   25-block  0
branch  0 taken 4
branch  1 taken 0
        4:   25-block  1
        8:   25-block  2
branch  2 taken 8
branch  3 taken 0
        8:   25-block  3
branch  4 taken 4
branch  5 taken 4
        4:   25-block  4
branch  6 taken 4
branch  7 taken 0
        4:   25-block  5
        4:   25-block  6
branch  8 taken 4
branch  9 taken 0
        4:   25-block  7
        4:   26:            Graph *neighbor = neighborPair.first;
        4:   27:            double weight = neighborPair.second;
        4:   28:            bool neighbourIsClosed = (closed.find(neighbor) != closed.end());
        4:   28-block  0
branch  0 taken 4
branch  1 taken 0
        4:   28-block  1
branch  2 taken 4
branch  3 taken 0
        -:   29:
        4:   30:            dotFile << "  \"" << graph << "\" -> \"" << neighbor << "\" [label=\"" << weight << "\", color=\""
        4:   30-block  0
branch  0 taken 4
branch  1 taken 0
        4:   30-block  1
branch  2 taken 4
branch  3 taken 0
        4:   30-block  2
branch  4 taken 4
branch  5 taken 0
        4:   30-block  3
branch  6 taken 4
branch  7 taken 0
        4:   30-block  4
branch  8 taken 4
branch  9 taken 0
        4:   30-block  5
branch 10 taken 4
branch 11 taken 0
        4:   30-block  6
branch 12 taken 4
branch 13 taken 0
        4:   31:                    << (graphtIsClosed || neighbourIsClosed ? "red" : "green") << "\"];\n";
        4:   31-block  0
branch  0 taken 0
branch  1 taken 4
        4:   31-block  1
        4:   31-block  2
branch  2 taken 4
branch  3 taken 0
        4:   31-block  3
branch  4 taken 4
branch  5 taken 0
        -:   32:        }
        -:   33:    }
        1:   34:    dotFile << "  rankdir=LR\n"
        1:   34-block  0
branch  0 taken 1
branch  1 taken 0
        -:   35:               "  node [shape=plaintext]\n"
        -:   36:               "  subgraph cluster_01 { \n"
        -:   37:               "    label = \"Legend\";\n"
        -:   38:               "    key [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\">\n"
        -:   39:               "      <tr><td align=\"right\" port=\"i1\">Closed</td></tr>\n"
        -:   40:               "      <tr><td align=\"right\" port=\"i2\">Opened</td></tr>\n"
        -:   41:               "      <tr><td align=\"right\" port=\"i3\">Current</td></tr>\n"
        -:   42:               "      </table>>, color=white]\n"
        -:   43:               "    key2 [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\">\n"
        -:   44:               "      <tr><td port=\"i1\">&nbsp;</td></tr>\n"
        -:   45:               "      <tr><td port=\"i2\">&nbsp;</td></tr>\n"
        -:   46:               "      <tr><td port=\"i3\">&nbsp;</td></tr>\n"
        -:   47:               "      </table>>, color=white]\n"
        -:   48:               "    key:i1:e -> key2:i1:w [color=red]\n"
        -:   49:               "    key:i2:e -> key2:i2:w [color=green]\n"
        -:   50:               "    key:i3:e -> key2:i3:w [color=orange]\n"
        -:   51:               "  }\n";
        1:   52:    dotFile << "}\n";
        1:   52-block  0
branch  0 taken 1
branch  1 taken 0
        -:   53:
        1:   54:    dotFile.close();
        1:   54-block  0
branch  0 taken 1
branch  1 taken 0
        1:   55:}
    $$$$$:   55-block  0
        1:   55-block  1
        1:   55-block  2
branch  0 taken 0
branch  1 taken 1
        1:   55-block  3
    $$$$$:   55-block  4
        -:   56:
function _ZN18GraphvizController23runGraphvizAndOpenImageEv called 1 returned 100% blocks executed 27%
        1:   57:void GraphvizController::runGraphvizAndOpenImage() {
        -:   58:    try {
        1:   59:        std::string graphvizCommand = "dot -Tpng -o graph.png graph.dot";
        1:   59-block  0
branch  0 taken 1
branch  1 taken 0
        1:   60:        int commandResult = std::system(graphvizCommand.c_str());
        1:   60-block  0
branch  0 taken 1
branch  1 taken 0
        -:   61:
        1:   62:        if (commandResult == 0) {
        1:   62-block  0
branch  0 taken 1
branch  1 taken 0
        1:   63:            std::string openCommand = "open graph.png 2>/dev/null";
        1:   63-block  0
branch  0 taken 1
branch  1 taken 0
        -:   64:            // >/dev/null because it produces a XPC eror that is not important when opening the image (it works... just produces an error)
        1:   65:            int openResult = std::system(openCommand.c_str());
        1:   65-block  0
branch  0 taken 1
branch  1 taken 0
        -:   66:
        1:   67:            if (openResult != 0) {
        1:   67-block  0
branch  0 taken 0
branch  1 taken 1
    #####:   68:                std::cerr << "Error opening the generated image." << std::endl;
    $$$$$:   68-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   68-block  1
branch  2 never executed
branch  3 never executed
    #####:   69:            }
    $$$$$:   69-block  0
        1:   70:        } else {
    $$$$$:   70-block  0
        1:   70-block  1
    #####:   71:            std::cerr << "Error running Graphviz command." << std::endl;
    $$$$$:   71-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   71-block  1
branch  2 never executed
branch  3 never executed
        -:   72:        }
        1:   73:    } catch (const std::exception &e) {
        1:   73-block  0
    $$$$$:   73-block  1
    $$$$$:   73-block  2
branch  0 never executed
branch  1 never executed
    #####:   74:        std::cerr << "Exception occurred: " << e.what() << std::endl;
    $$$$$:   74-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   74-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   74-block  2
branch  4 never executed
branch  5 never executed
    #####:   75:    } catch (...) {
    $$$$$:   75-block  0
    $$$$$:   75-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   75-block  2
    #####:   76:        std::cerr << "An unexpected error occurred." << std::endl;
    $$$$$:   76-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   76-block  1
branch  2 never executed
branch  3 never executed
    #####:   77:    }
    $$$$$:   77-block  0
    $$$$$:   77-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   77-block  2
    $$$$$:   77-block  3
    $$$$$:   77-block  4
        -:   78:
        1:   79:}
    $$$$$:   79-block  0
    $$$$$:   79-block  1
        1:   79-block  2
