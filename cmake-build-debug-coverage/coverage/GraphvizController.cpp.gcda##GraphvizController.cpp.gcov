        -:    0:Source:/Users/mihaildobroslavski/CLionProjects/CityMapProject/Interfaces/GraphvizController.cpp
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/Interfaces/GraphvizController.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/Interfaces/GraphvizController.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Mihail Dobroslavski on 27.12.23.
        -:    3://
        -:    4:
        -:    5:#include "GraphvizController.h"
        -:    6:
        -:    7:// Function to generate a DOT file for Graphviz visualization
function _ZN18GraphvizController15generateDotFileEP14GraphContainerP5GraphNSt3__113unordered_setIS3_NS4_4hashIS3_EENS4_8equal_toIS3_EENS4_9allocatorIS3_EEEE called 1 returned 100% blocks executed 88%
        1:    8:void GraphvizController::generateDotFile(GraphContainer *graphContainer, Graph *current,
        -:    9:                                         std::unordered_set<Graph *> closed) {
        -:   10:    // Open the DOT file for writing
        1:   11:    std::ofstream dotFile("graph.dot");
        1:   12:    if (!dotFile.is_open()) {
        1:   12-block  0
branch  0 taken 1
branch  1 taken 0
        1:   12-block  1
branch  2 taken 0
branch  3 taken 1
    #####:   13:        std::cerr << "Error opening DOT file for writing." << std::endl;
    $$$$$:   13-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   13-block  1
branch  2 never executed
branch  3 never executed
    #####:   14:        return;
    $$$$$:   14-block  0
        -:   15:    }
        -:   16:
        -:   17:    // Write DOT file header
        1:   18:    dotFile << "digraph G {\n";
        1:   18-block  0
branch  0 taken 1
branch  1 taken 0
        1:   19:    dotFile << "  graph [rankdir=LR];\n";
        1:   19-block  0
branch  0 taken 1
branch  1 taken 0
        1:   20:    dotFile << "  node [shape=\"box\", color = \"black\", style=\"filled\"];\n";
        1:   20-block  0
branch  0 taken 1
branch  1 taken 0
        -:   21:
        -:   22:    // Iterate through each graph in the container
        5:   23:    for (const auto &graphPair: graphContainer->getGraphs()) {
        1:   23-block  0
branch  0 taken 1
branch  1 taken 0
        1:   23-block  1
        5:   23-block  2
branch  2 taken 5
branch  3 taken 0
        5:   23-block  3
branch  4 taken 4
branch  5 taken 1
        4:   23-block  4
branch  6 taken 4
branch  7 taken 0
        4:   23-block  5
        4:   23-block  6
branch  8 taken 4
branch  9 taken 0
        4:   23-block  7
        4:   24:        Graph *graph = graphPair.second;
        4:   25:        bool graphtIsClosed = (closed.find(graph) != closed.end());
        4:   25-block  0
branch  0 taken 4
branch  1 taken 0
        4:   25-block  1
branch  2 taken 4
branch  3 taken 0
        -:   26:
        -:   27:        // Write DOT node for each graph
        4:   28:        dotFile << "  \"" << graph << "\" [label=\"" << graph->getName() << "\", fillcolor=\""
        4:   28-block  0
branch  0 taken 4
branch  1 taken 0
        4:   28-block  1
branch  2 taken 4
branch  3 taken 0
        4:   28-block  2
branch  4 taken 4
branch  5 taken 0
        4:   28-block  3
branch  6 taken 4
branch  7 taken 0
        4:   28-block  4
branch  8 taken 4
branch  9 taken 0
        4:   28-block  5
branch 10 taken 4
branch 11 taken 0
        4:   29:                << (current == graph ? "orange" : (graphtIsClosed ? "red" : "green")) << "\"];\n";
        4:   29-block  0
branch  0 taken 3
branch  1 taken 1
        1:   29-block  1
        3:   29-block  2
        4:   29-block  3
branch  2 taken 4
branch  3 taken 0
        4:   29-block  4
branch  4 taken 4
branch  5 taken 0
        -:   30:
        -:   31:        // Write DOT edges for each neighbor of the current graph
        8:   32:        for (const auto &neighborPair: graph->getAdjacencyList()) {
        4:   32-block  0
branch  0 taken 4
branch  1 taken 0
        4:   32-block  1
        8:   32-block  2
branch  2 taken 8
branch  3 taken 0
        8:   32-block  3
branch  4 taken 4
branch  5 taken 4
        4:   32-block  4
branch  6 taken 4
branch  7 taken 0
        4:   32-block  5
        4:   32-block  6
branch  8 taken 4
branch  9 taken 0
        4:   32-block  7
        4:   33:            Graph *neighbor = neighborPair.first;
        4:   34:            double weight = neighborPair.second;
        4:   35:            bool neighbourIsClosed = (closed.find(neighbor) != closed.end());
        4:   35-block  0
branch  0 taken 4
branch  1 taken 0
        4:   35-block  1
branch  2 taken 4
branch  3 taken 0
        -:   36:
        4:   37:            dotFile << "  \"" << graph << "\" -> \"" << neighbor << "\" [label=\"" << weight << "\", color=\""
        4:   37-block  0
branch  0 taken 4
branch  1 taken 0
        4:   37-block  1
branch  2 taken 4
branch  3 taken 0
        4:   37-block  2
branch  4 taken 4
branch  5 taken 0
        4:   37-block  3
branch  6 taken 4
branch  7 taken 0
        4:   37-block  4
branch  8 taken 4
branch  9 taken 0
        4:   37-block  5
branch 10 taken 4
branch 11 taken 0
        4:   37-block  6
branch 12 taken 4
branch 13 taken 0
        4:   38:                    << (graphtIsClosed || neighbourIsClosed ? "red" : "green") << "\"];\n";
        4:   38-block  0
branch  0 taken 0
branch  1 taken 4
        4:   38-block  1
        4:   38-block  2
branch  2 taken 4
branch  3 taken 0
        4:   38-block  3
branch  4 taken 4
branch  5 taken 0
        -:   39:        }
        -:   40:    }
        -:   41:
        -:   42:    // Write DOT legend for graph visualization
        1:   43:    dotFile << "  rankdir=LR\n"
        1:   43-block  0
branch  0 taken 1
branch  1 taken 0
        -:   44:               "  node [shape=plaintext]\n"
        -:   45:               "  subgraph cluster_01 { \n"
        -:   46:               "    label = \"Legend\";\n"
        -:   47:               "    key [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\">\n"
        -:   48:               "      <tr><td align=\"right\" port=\"i1\">Closed</td></tr>\n"
        -:   49:               "      <tr><td align=\"right\" port=\"i2\">Opened</td></tr>\n"
        -:   50:               "      <tr><td align=\"right\" port=\"i3\">Current</td></tr>\n"
        -:   51:               "      </table>>, color=white]\n"
        -:   52:               "    key2 [label=<<table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" cellborder=\"0\">\n"
        -:   53:               "      <tr><td port=\"i1\">&nbsp;</td></tr>\n"
        -:   54:               "      <tr><td port=\"i2\">&nbsp;</td></tr>\n"
        -:   55:               "      <tr><td port=\"i3\">&nbsp;</td></tr>\n"
        -:   56:               "      </table>>, color=white]\n"
        -:   57:               "    key:i1:e -> key2:i1:w [color=red]\n"
        -:   58:               "    key:i2:e -> key2:i2:w [color=green]\n"
        -:   59:               "    key:i3:e -> key2:i3:w [color=orange]\n"
        -:   60:               "  }\n";
        1:   61:    dotFile << "}\n";
        1:   61-block  0
branch  0 taken 1
branch  1 taken 0
        -:   62:
        -:   63:    // Close the DOT file
        1:   64:    dotFile.close();
        1:   64-block  0
branch  0 taken 1
branch  1 taken 0
        1:   65:}
    $$$$$:   65-block  0
        1:   65-block  1
        1:   65-block  2
branch  0 taken 0
branch  1 taken 1
        1:   65-block  3
    $$$$$:   65-block  4
        -:   66:
        -:   67:// Function to run Graphviz and open the generated image
function _ZN18GraphvizController23runGraphvizAndOpenImageEv called 1 returned 100% blocks executed 27%
        1:   68:void GraphvizController::runGraphvizAndOpenImage() {
        -:   69:    try {
        -:   70:        // Define Graphviz command to generate PNG image from DOT file
        1:   71:        std::string graphvizCommand = "dot -Tpng -o graph.png graph.dot";
        1:   71-block  0
branch  0 taken 1
branch  1 taken 0
        -:   72:        // Execute Graphviz command
        1:   73:        int commandResult = std::system(graphvizCommand.c_str());
        1:   73-block  0
branch  0 taken 1
branch  1 taken 0
        -:   74:
        -:   75:        // Check if Graphviz command was successful
        1:   76:        if (commandResult == 0) {
        1:   76-block  0
branch  0 taken 1
branch  1 taken 0
        -:   77:            // Define command to open the generated image
        1:   78:            std::string openCommand = "open graph.png 2>/dev/null";
        1:   78-block  0
branch  0 taken 1
branch  1 taken 0
        -:   79:            // >/dev/null to suppress XPC error (not critical when opening the image)
        1:   80:            int openResult = std::system(openCommand.c_str());
        1:   80-block  0
branch  0 taken 1
branch  1 taken 0
        -:   81:
        -:   82:            // Check if image opening command was successful
        1:   83:            if (openResult != 0) {
        1:   83-block  0
branch  0 taken 0
branch  1 taken 1
    #####:   84:                std::cerr << "Error opening the generated image." << std::endl;
    $$$$$:   84-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   84-block  1
branch  2 never executed
branch  3 never executed
    #####:   85:            }
    $$$$$:   85-block  0
        1:   86:        } else {
    $$$$$:   86-block  0
        1:   86-block  1
    #####:   87:            std::cerr << "Error running Graphviz command." << std::endl;
    $$$$$:   87-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   87-block  1
branch  2 never executed
branch  3 never executed
        -:   88:        }
        1:   89:    } catch (const std::exception &e) {
        1:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
branch  0 never executed
branch  1 never executed
    #####:   90:        std::cerr << "Exception occurred: " << e.what() << std::endl;
    $$$$$:   90-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   90-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:   90-block  2
branch  4 never executed
branch  5 never executed
    #####:   91:    } catch (...) {
    $$$$$:   91-block  0
    $$$$$:   91-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   91-block  2
    #####:   92:        std::cerr << "An unexpected error occurred." << std::endl;
    $$$$$:   92-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   92-block  1
branch  2 never executed
branch  3 never executed
    #####:   93:    }
    $$$$$:   93-block  0
    $$$$$:   93-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   93-block  2
    $$$$$:   93-block  3
    $$$$$:   93-block  4
        1:   94:}
    $$$$$:   94-block  0
    $$$$$:   94-block  1
        1:   94-block  2
