        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__algorithm/sift_down.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphTest.dir/UnitTesting/GraphTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphTest.dir/UnitTesting/GraphTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___ALGORITHM_SIFT_DOWN_H
        -:   10:#define _LIBCPP___ALGORITHM_SIFT_DOWN_H
        -:   11:
        -:   12:#include <__algorithm/iterator_operations.h>
        -:   13:#include <__assert>
        -:   14:#include <__config>
        -:   15:#include <__iterator/iterator_traits.h>
        -:   16:#include <__utility/move.h>
        -:   17:
        -:   18:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   19:#  pragma GCC system_header
        -:   20:#endif
        -:   21:
        -:   22:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   23:
        -:   24:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
        -:   25:_LIBCPP_CONSTEXPR_AFTER_CXX11 void
function _ZNSt3__111__sift_downINS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEvT1_OT0_NS_15iterator_traitsISB_E15difference_typeESB_ called 0 returned 0% blocks executed 0%
    #####:   26:__sift_down(_RandomAccessIterator __first, _Compare&& __comp,
        -:   27:            typename iterator_traits<_RandomAccessIterator>::difference_type __len,
        -:   28:            _RandomAccessIterator __start)
        -:   29:{
        -:   30:    using _Ops = _IterOps<_AlgPolicy>;
        -:   31:
        -:   32:    typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
        -:   33:    typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
        -:   34:    // left-child of __start is at 2 * __start + 1
        -:   35:    // right-child of __start is at 2 * __start + 2
    #####:   36:    difference_type __child = __start - __first;
        -:   37:
    #####:   38:    if (__len < 2 || (__len - 2) / 2 < __child)
    $$$$$:   38-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   38-block  1
branch  2 never executed
branch  3 never executed
    #####:   39:        return;
    $$$$$:   39-block  0
        -:   40:
    #####:   41:    __child = 2 * __child + 1;
    #####:   42:    _RandomAccessIterator __child_i = __first + __child;
        -:   43:
    #####:   44:    if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {
    $$$$$:   44-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   44-block  1
branch  2 never executed
branch  3 never executed
        -:   45:        // right-child exists and is greater than left-child
    #####:   46:        ++__child_i;
    #####:   47:        ++__child;
    #####:   48:    }
    $$$$$:   48-block  0
        -:   49:
        -:   50:    // check if we are in heap-order
    #####:   51:    if (__comp(*__child_i, *__start))
    $$$$$:   51-block  0
branch  0 never executed
branch  1 never executed
        -:   52:        // we are, __start is larger than its largest child
    #####:   53:        return;
    $$$$$:   53-block  0
        -:   54:
    #####:   55:    value_type __top(_Ops::__iter_move(__start));
    #####:   56:    do
    $$$$$:   56-block  0
        -:   57:    {
        -:   58:        // we are not in heap-order, swap the parent with its largest child
    #####:   59:        *__start = _Ops::__iter_move(__child_i);
    #####:   60:        __start = __child_i;
        -:   61:
    #####:   62:        if ((__len - 2) / 2 < __child)
    $$$$$:   62-block  0
branch  0 never executed
branch  1 never executed
    #####:   63:            break;
    $$$$$:   63-block  0
        -:   64:
        -:   65:        // recompute the child based off of the updated parent
    #####:   66:        __child = 2 * __child + 1;
    #####:   67:        __child_i = __first + __child;
        -:   68:
    #####:   69:        if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {
    $$$$$:   69-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   69-block  1
branch  2 never executed
branch  3 never executed
        -:   70:            // right-child exists and is greater than left-child
    #####:   71:            ++__child_i;
    #####:   72:            ++__child;
    #####:   73:        }
    $$$$$:   73-block  0
        -:   74:
        -:   75:        // check if we are in heap-order
    #####:   76:    } while (!__comp(*__child_i, __top));
    $$$$$:   76-block  0
    $$$$$:   76-block  1
branch  0 never executed
branch  1 never executed
    #####:   77:    *__start = _VSTD::move(__top);
    #####:   78:}
    $$$$$:   78-block  0
    $$$$$:   78-block  1
        -:   79:
        -:   80:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
        -:   81:_LIBCPP_CONSTEXPR_AFTER_CXX11 _RandomAccessIterator
function _ZNSt3__117__floyd_sift_downINS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EET1_SB_OT0_NS_15iterator_traitsISB_E15difference_typeE called 0 returned 0% blocks executed 0%
    #####:   82:__floyd_sift_down(_RandomAccessIterator __first, _Compare&& __comp,
        -:   83:                  typename iterator_traits<_RandomAccessIterator>::difference_type __len)
        -:   84:{
        -:   85:    using difference_type = typename iterator_traits<_RandomAccessIterator>::difference_type;
        -:   86:    _LIBCPP_ASSERT(__len >= 2, "shouldn't be called unless __len >= 2");
        -:   87:
    #####:   88:    _RandomAccessIterator __hole = __first;
    #####:   89:    _RandomAccessIterator __child_i = __first;
    #####:   90:    difference_type __child = 0;
        -:   91:
    #####:   92:    while (true) {
    $$$$$:   92-block  0
    $$$$$:   92-block  1
    #####:   93:        __child_i += difference_type(__child + 1);
    #####:   94:        __child = 2 * __child + 1;
        -:   95:
    #####:   96:        if ((__child + 1) < __len && __comp(*__child_i, *(__child_i + difference_type(1)))) {
    $$$$$:   96-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   96-block  1
branch  2 never executed
branch  3 never executed
        -:   97:            // right-child exists and is greater than left-child
    #####:   98:            ++__child_i;
    #####:   99:            ++__child;
    #####:  100:        }
    $$$$$:  100-block  0
        -:  101:
        -:  102:        // swap __hole with its largest child
    #####:  103:        *__hole = _IterOps<_AlgPolicy>::__iter_move(__child_i);
    #####:  104:        __hole = __child_i;
        -:  105:
        -:  106:        // if __hole is now a leaf, we're done
    #####:  107:        if (__child > (__len - 2) / 2)
    $$$$$:  107-block  0
branch  0 never executed
branch  1 never executed
    #####:  108:            return __hole;
    $$$$$:  108-block  0
        -:  109:    }
        -:  110:}
        -:  111:
        -:  112:_LIBCPP_END_NAMESPACE_STD
        -:  113:
        -:  114:#endif // _LIBCPP___ALGORITHM_SIFT_DOWN_H
