        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__algorithm/unwrap_iter.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/TaskFunctions/RouteChecker.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/CityMapLibrary.dir/TaskFunctions/RouteChecker.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___ALGORITHM_UNWRAP_ITER_H
        -:   10:#define _LIBCPP___ALGORITHM_UNWRAP_ITER_H
        -:   11:
        -:   12:#include <__config>
        -:   13:#include <__iterator/iterator_traits.h>
        -:   14:#include <__memory/pointer_traits.h>
        -:   15:#include <__utility/move.h>
        -:   16:#include <type_traits>
        -:   17:
        -:   18:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   19:#  pragma GCC system_header
        -:   20:#endif
        -:   21:
        -:   22:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   23:
        -:   24:// TODO: Change the name of __unwrap_iter_impl to something more appropriate
        -:   25:// The job of __unwrap_iter is to remove iterator wrappers (like reverse_iterator or __wrap_iter),
        -:   26:// to reduce the number of template instantiations and to enable pointer-based optimizations e.g. in std::copy.
        -:   27:// In debug mode, we don't do this.
        -:   28://
        -:   29:// Some algorithms (e.g. std::copy, but not std::sort) need to convert an
        -:   30:// "unwrapped" result back into the original iterator type. Doing that is the job of __rewrap_iter.
        -:   31:
        -:   32:// Default case - we can't unwrap anything
        -:   33:template <class _Iter, bool = __is_cpp17_contiguous_iterator<_Iter>::value>
        -:   34:struct __unwrap_iter_impl {
function _ZNSt3__118__unwrap_iter_implINS_16reverse_iteratorIPP5GraphEELb0EE8__rewrapB6v15006ES5_S5_ called 26 returned 100% blocks executed 100%
       26:   35:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter, _Iter __iter) { return __iter; }
       26:   35-block  0
function _ZNSt3__118__unwrap_iter_implINS_16reverse_iteratorIPP5GraphEELb0EE8__unwrapB6v15006ES5_ called 39 returned 100% blocks executed 100%
       39:   36:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __unwrap(_Iter __i) _NOEXCEPT { return __i; }
       39:   36-block  0
        -:   37:};
        -:   38:
        -:   39:#ifndef _LIBCPP_ENABLE_DEBUG_MODE
        -:   40:
        -:   41:// It's a contiguous iterator, so we can use a raw pointer instead
        -:   42:template <class _Iter>
        -:   43:struct __unwrap_iter_impl<_Iter, true> {
        -:   44:  using _ToAddressT = decltype(std::__to_address(std::declval<_Iter>()));
        -:   45:
function _ZNSt3__118__unwrap_iter_implIPKP5GraphLb1EE8__rewrapB6v15006ES4_S4_ called 2 returned 100% blocks executed 100%
function _ZNSt3__118__unwrap_iter_implIPP5GraphLb1EE8__rewrapB6v15006ES3_S3_ called 15 returned 100% blocks executed 100%
function _ZNSt3__118__unwrap_iter_implIPPP5GraphLb1EE8__rewrapB6v15006ES4_S4_ called 0 returned 0% blocks executed 0%
       17:   46:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Iter __rewrap(_Iter __orig_iter, _ToAddressT __unwrapped_iter) {
       17:   47:    return __orig_iter + (__unwrapped_iter - std::__to_address(__orig_iter));
        2:   47-block  0
       15:   47-block  1
    $$$$$:   47-block  2
        -:   48:  }
        -:   49:
function _ZNSt3__118__unwrap_iter_implIPKP5GraphLb1EE8__unwrapB6v15006ES4_ called 4 returned 100% blocks executed 100%
function _ZNSt3__118__unwrap_iter_implIPP5GraphLb1EE8__unwrapB6v15006ES3_ called 41 returned 100% blocks executed 100%
function _ZNSt3__118__unwrap_iter_implINS_11__wrap_iterIP4PathEELb1EE8__unwrapB6v15006ES4_ called 14 returned 100% blocks executed 100%
function _ZNSt3__118__unwrap_iter_implIPPP5GraphLb1EE8__unwrapB6v15006ES4_ called 0 returned 0% blocks executed 0%
       59:   50:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ToAddressT __unwrap(_Iter __i) _NOEXCEPT {
       59:   51:    return std::__to_address(__i);
        4:   51-block  0
       41:   51-block  1
       14:   51-block  2
    $$$$$:   51-block  3
        -:   52:  }
        -:   53:};
        -:   54:
        -:   55:#endif // !_LIBCPP_ENABLE_DEBUG_MODE
        -:   56:
        -:   57:template<class _Iter,
        -:   58:         class _Impl = __unwrap_iter_impl<_Iter>,
        -:   59:         __enable_if_t<is_copy_constructible<_Iter>::value, int> = 0>
        -:   60:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11
function _ZNSt3__113__unwrap_iterB6v15006IPP5GraphNS_18__unwrap_iter_implIS3_Lb1EEELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIT_EEEES7_ called 41 returned 100% blocks executed 100%
function _ZNSt3__113__unwrap_iterB6v15006IPKP5GraphNS_18__unwrap_iter_implIS4_Lb1EEELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIT_EEEES8_ called 4 returned 100% blocks executed 100%
function _ZNSt3__113__unwrap_iterB6v15006INS_11__wrap_iterIP4PathEENS_18__unwrap_iter_implIS4_Lb1EEELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIT_EEEES8_ called 14 returned 100% blocks executed 100%
function _ZNSt3__113__unwrap_iterB6v15006INS_16reverse_iteratorIPP5GraphEENS_18__unwrap_iter_implIS5_Lb0EEELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIT_EEEES9_ called 39 returned 100% blocks executed 100%
function _ZNSt3__113__unwrap_iterB6v15006IPPP5GraphNS_18__unwrap_iter_implIS4_Lb1EEELi0EEEDTclsrT0_8__unwrapclsr3stdE7declvalIT_EEEES8_ called 0 returned 0% blocks executed 0%
       98:   61:decltype(_Impl::__unwrap(std::declval<_Iter>())) __unwrap_iter(_Iter __i) _NOEXCEPT {
       98:   62:  return _Impl::__unwrap(__i);
       41:   62-block  0
        4:   62-block  1
       14:   62-block  2
       39:   62-block  3
    $$$$$:   62-block  4
        -:   63:}
        -:   64:
        -:   65:template <class _OrigIter, class _Iter, class _Impl = __unwrap_iter_impl<_OrigIter> >
function _ZNSt3__113__rewrap_iterB6v15006IPP5GraphS3_NS_18__unwrap_iter_implIS3_Lb1EEEEET_S6_T0_ called 15 returned 100% blocks executed 66%
function _ZNSt3__113__rewrap_iterB6v15006IPKP5GraphS4_NS_18__unwrap_iter_implIS4_Lb1EEEEET_S7_T0_ called 2 returned 100% blocks executed 66%
function _ZNSt3__113__rewrap_iterB6v15006INS_16reverse_iteratorIPP5GraphEES5_NS_18__unwrap_iter_implIS5_Lb0EEEEET_S8_T0_ called 26 returned 100% blocks executed 66%
function _ZNSt3__113__rewrap_iterB6v15006IPPP5GraphS4_NS_18__unwrap_iter_implIS4_Lb1EEEEET_S7_T0_ called 0 returned 0% blocks executed 0%
       43:   66:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig_iter, _Iter __iter) _NOEXCEPT {
       43:   67:  return _Impl::__rewrap(std::move(__orig_iter), std::move(__iter));
       15:   67-block  0
branch  0 taken 15
branch  1 taken 0
       15:   67-block  1
    $$$$$:   67-block  2
        2:   67-block  3
branch  2 taken 2
branch  3 taken 0
        2:   67-block  4
    $$$$$:   67-block  5
       26:   67-block  6
branch  4 taken 26
branch  5 taken 0
       26:   67-block  7
    $$$$$:   67-block  8
    $$$$$:   67-block  9
branch  6 never executed
branch  7 never executed
    $$$$$:   67-block 10
    $$$$$:   67-block 11
        -:   68:}
        -:   69:
        -:   70:_LIBCPP_END_NAMESPACE_STD
        -:   71:
        -:   72:#endif // _LIBCPP___ALGORITHM_UNWRAP_ITER_H
