        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__tree
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/TerminalProgramTest.dir/UnitTesting/TerminalProgramTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/TerminalProgramTest.dir/UnitTesting/TerminalProgramTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___TREE
        -:   11:#define _LIBCPP___TREE
        -:   12:
        -:   13:#include <__algorithm/min.h>
        -:   14:#include <__assert>
        -:   15:#include <__config>
        -:   16:#include <__debug>
        -:   17:#include <__iterator/distance.h>
        -:   18:#include <__iterator/iterator_traits.h>
        -:   19:#include <__iterator/next.h>
        -:   20:#include <__memory/swap_allocator.h>
        -:   21:#include <__utility/forward.h>
        -:   22:#include <__utility/swap.h>
        -:   23:#include <limits>
        -:   24:#include <memory>
        -:   25:#include <stdexcept>
        -:   26:
        -:   27:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   28:#  pragma GCC system_header
        -:   29:#endif
        -:   30:
        -:   31:_LIBCPP_PUSH_MACROS
        -:   32:#include <__undef_macros>
        -:   33:
        -:   34:
        -:   35:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   36:
        -:   37:template <class, class, class, class> class _LIBCPP_TEMPLATE_VIS map;
        -:   38:template <class, class, class, class> class _LIBCPP_TEMPLATE_VIS multimap;
        -:   39:template <class, class, class> class _LIBCPP_TEMPLATE_VIS set;
        -:   40:template <class, class, class> class _LIBCPP_TEMPLATE_VIS multiset;
        -:   41:
        -:   42:template <class _Tp, class _Compare, class _Allocator> class __tree;
        -:   43:template <class _Tp, class _NodePtr, class _DiffType>
        -:   44:    class _LIBCPP_TEMPLATE_VIS __tree_iterator;
        -:   45:template <class _Tp, class _ConstNodePtr, class _DiffType>
        -:   46:    class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;
        -:   47:
        -:   48:template <class _Pointer> class __tree_end_node;
        -:   49:template <class _VoidPtr> class __tree_node_base;
        -:   50:template <class _Tp, class _VoidPtr> class __tree_node;
        -:   51:
        -:   52:template <class _Key, class _Value>
        -:   53:struct __value_type;
        -:   54:
        -:   55:template <class _Allocator> class __map_node_destructor;
        -:   56:template <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_iterator;
        -:   57:template <class _TreeIterator> class _LIBCPP_TEMPLATE_VIS __map_const_iterator;
        -:   58:
        -:   59:/*
        -:   60:
        -:   61:_NodePtr algorithms
        -:   62:
        -:   63:The algorithms taking _NodePtr are red black tree algorithms.  Those
        -:   64:algorithms taking a parameter named __root should assume that __root
        -:   65:points to a proper red black tree (unless otherwise specified).
        -:   66:
        -:   67:Each algorithm herein assumes that __root->__parent_ points to a non-null
        -:   68:structure which has a member __left_ which points back to __root.  No other
        -:   69:member is read or written to at __root->__parent_.
        -:   70:
        -:   71:__root->__parent_ will be referred to below (in comments only) as end_node.
        -:   72:end_node->__left_ is an externably accessible lvalue for __root, and can be
        -:   73:changed by node insertion and removal (without explicit reference to end_node).
        -:   74:
        -:   75:All nodes (with the exception of end_node), even the node referred to as
        -:   76:__root, have a non-null __parent_ field.
        -:   77:
        -:   78:*/
        -:   79:
        -:   80:// Returns:  true if __x is a left child of its parent, else false
        -:   81:// Precondition:  __x != nullptr.
        -:   82:template <class _NodePtr>
        -:   83:inline _LIBCPP_INLINE_VISIBILITY
        -:   84:bool
function _ZNSt3__120__tree_is_left_childB6v15006IPNS_16__tree_node_baseIPvEEEEbT_ called 7 returned 100% blocks executed 100%
        7:   85:__tree_is_left_child(_NodePtr __x) _NOEXCEPT
        -:   86:{
        7:   87:    return __x == __x->__parent_->__left_;
        7:   87-block  0
        -:   88:}
        -:   89:
        -:   90:// Determines if the subtree rooted at __x is a proper red black subtree.  If
        -:   91://    __x is a proper subtree, returns the black height (null counts as 1).  If
        -:   92://    __x is an improper subtree, returns 0.
        -:   93:template <class _NodePtr>
        -:   94:unsigned
        -:   95:__tree_sub_invariant(_NodePtr __x)
        -:   96:{
        -:   97:    if (__x == nullptr)
        -:   98:        return 1;
        -:   99:    // parent consistency checked by caller
        -:  100:    // check __x->__left_ consistency
        -:  101:    if (__x->__left_ != nullptr && __x->__left_->__parent_ != __x)
        -:  102:        return 0;
        -:  103:    // check __x->__right_ consistency
        -:  104:    if (__x->__right_ != nullptr && __x->__right_->__parent_ != __x)
        -:  105:        return 0;
        -:  106:    // check __x->__left_ != __x->__right_ unless both are nullptr
        -:  107:    if (__x->__left_ == __x->__right_ && __x->__left_ != nullptr)
        -:  108:        return 0;
        -:  109:    // If this is red, neither child can be red
        -:  110:    if (!__x->__is_black_)
        -:  111:    {
        -:  112:        if (__x->__left_ && !__x->__left_->__is_black_)
        -:  113:            return 0;
        -:  114:        if (__x->__right_ && !__x->__right_->__is_black_)
        -:  115:            return 0;
        -:  116:    }
        -:  117:    unsigned __h = _VSTD::__tree_sub_invariant(__x->__left_);
        -:  118:    if (__h == 0)
        -:  119:        return 0;  // invalid left subtree
        -:  120:    if (__h != _VSTD::__tree_sub_invariant(__x->__right_))
        -:  121:        return 0;  // invalid or different height right subtree
        -:  122:    return __h + __x->__is_black_;  // return black height of this node
        -:  123:}
        -:  124:
        -:  125:// Determines if the red black tree rooted at __root is a proper red black tree.
        -:  126://    __root == nullptr is a proper tree.  Returns true is __root is a proper
        -:  127://    red black tree, else returns false.
        -:  128:template <class _NodePtr>
        -:  129:bool
        -:  130:__tree_invariant(_NodePtr __root)
        -:  131:{
        -:  132:    if (__root == nullptr)
        -:  133:        return true;
        -:  134:    // check __x->__parent_ consistency
        -:  135:    if (__root->__parent_ == nullptr)
        -:  136:        return false;
        -:  137:    if (!_VSTD::__tree_is_left_child(__root))
        -:  138:        return false;
        -:  139:    // root must be black
        -:  140:    if (!__root->__is_black_)
        -:  141:        return false;
        -:  142:    // do normal node checks
        -:  143:    return _VSTD::__tree_sub_invariant(__root) != 0;
        -:  144:}
        -:  145:
        -:  146:// Returns:  pointer to the left-most node under __x.
        -:  147:template <class _NodePtr>
        -:  148:inline _LIBCPP_INLINE_VISIBILITY
        -:  149:_NodePtr
function _ZNSt3__110__tree_minB6v15006IPNS_16__tree_node_baseIPvEEEET_S5_ called 1 returned 100% blocks executed 75%
        1:  150:__tree_min(_NodePtr __x) _NOEXCEPT
        -:  151:{
        -:  152:    _LIBCPP_ASSERT(__x != nullptr, "Root node shouldn't be null");
        1:  153:    while (__x->__left_ != nullptr)
        1:  153-block  0
        1:  153-block  1
branch  0 taken 0
branch  1 taken 1
    $$$$$:  153-block  2
    #####:  154:        __x = __x->__left_;
        1:  155:    return __x;
        1:  155-block  0
        -:  156:}
        -:  157:
        -:  158:// Returns:  pointer to the right-most node under __x.
        -:  159:template <class _NodePtr>
        -:  160:inline _LIBCPP_INLINE_VISIBILITY
        -:  161:_NodePtr
        -:  162:__tree_max(_NodePtr __x) _NOEXCEPT
        -:  163:{
        -:  164:    _LIBCPP_ASSERT(__x != nullptr, "Root node shouldn't be null");
        -:  165:    while (__x->__right_ != nullptr)
        -:  166:        __x = __x->__right_;
        -:  167:    return __x;
        -:  168:}
        -:  169:
        -:  170:// Returns:  pointer to the next in-order node after __x.
        -:  171:template <class _NodePtr>
        -:  172:_NodePtr
        -:  173:__tree_next(_NodePtr __x) _NOEXCEPT
        -:  174:{
        -:  175:    _LIBCPP_ASSERT(__x != nullptr, "node shouldn't be null");
        -:  176:    if (__x->__right_ != nullptr)
        -:  177:        return _VSTD::__tree_min(__x->__right_);
        -:  178:    while (!_VSTD::__tree_is_left_child(__x))
        -:  179:        __x = __x->__parent_unsafe();
        -:  180:    return __x->__parent_unsafe();
        -:  181:}
        -:  182:
        -:  183:template <class _EndNodePtr, class _NodePtr>
        -:  184:inline _LIBCPP_INLINE_VISIBILITY
        -:  185:_EndNodePtr
function _ZNSt3__116__tree_next_iterB6v15006IPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEES5_EET_T0_ called 4 returned 100% blocks executed 100%
        4:  186:__tree_next_iter(_NodePtr __x) _NOEXCEPT
        -:  187:{
        -:  188:    _LIBCPP_ASSERT(__x != nullptr, "node shouldn't be null");
        4:  189:    if (__x->__right_ != nullptr)
        4:  189-block  0
branch  0 taken 1
branch  1 taken 3
        1:  190:        return static_cast<_EndNodePtr>(_VSTD::__tree_min(__x->__right_));
        1:  190-block  0
        4:  191:    while (!_VSTD::__tree_is_left_child(__x))
        3:  191-block  0
        4:  191-block  1
branch  0 taken 1
branch  1 taken 3
        1:  191-block  2
        1:  192:        __x = __x->__parent_unsafe();
        3:  193:    return static_cast<_EndNodePtr>(__x->__parent_);
        3:  193-block  0
        4:  194:}
        4:  194-block  0
        -:  195:
        -:  196:// Returns:  pointer to the previous in-order node before __x.
        -:  197:// Note: __x may be the end node.
        -:  198:template <class _NodePtr, class _EndNodePtr>
        -:  199:inline _LIBCPP_INLINE_VISIBILITY
        -:  200:_NodePtr
        -:  201:__tree_prev_iter(_EndNodePtr __x) _NOEXCEPT
        -:  202:{
        -:  203:    _LIBCPP_ASSERT(__x != nullptr, "node shouldn't be null");
        -:  204:    if (__x->__left_ != nullptr)
        -:  205:        return _VSTD::__tree_max(__x->__left_);
        -:  206:    _NodePtr __xx = static_cast<_NodePtr>(__x);
        -:  207:    while (_VSTD::__tree_is_left_child(__xx))
        -:  208:        __xx = __xx->__parent_unsafe();
        -:  209:    return __xx->__parent_unsafe();
        -:  210:}
        -:  211:
        -:  212:// Returns:  pointer to a node which has no children
        -:  213:template <class _NodePtr>
        -:  214:_NodePtr
        -:  215:__tree_leaf(_NodePtr __x) _NOEXCEPT
        -:  216:{
        -:  217:    _LIBCPP_ASSERT(__x != nullptr, "node shouldn't be null");
        -:  218:    while (true)
        -:  219:    {
        -:  220:        if (__x->__left_ != nullptr)
        -:  221:        {
        -:  222:            __x = __x->__left_;
        -:  223:            continue;
        -:  224:        }
        -:  225:        if (__x->__right_ != nullptr)
        -:  226:        {
        -:  227:            __x = __x->__right_;
        -:  228:            continue;
        -:  229:        }
        -:  230:        break;
        -:  231:    }
        -:  232:    return __x;
        -:  233:}
        -:  234:
        -:  235:// Effects:  Makes __x->__right_ the subtree root with __x as its left child
        -:  236://           while preserving in-order order.
        -:  237:template <class _NodePtr>
        -:  238:void
function _ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_ called 0 returned 0% blocks executed 0%
    #####:  239:__tree_left_rotate(_NodePtr __x) _NOEXCEPT
        -:  240:{
        -:  241:    _LIBCPP_ASSERT(__x != nullptr, "node shouldn't be null");
        -:  242:    _LIBCPP_ASSERT(__x->__right_ != nullptr, "node should have a right child");
    #####:  243:    _NodePtr __y = __x->__right_;
    #####:  244:    __x->__right_ = __y->__left_;
    #####:  245:    if (__x->__right_ != nullptr)
    $$$$$:  245-block  0
branch  0 never executed
branch  1 never executed
    #####:  246:        __x->__right_->__set_parent(__x);
    $$$$$:  246-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  246-block  1
    $$$$$:  246-block  2
    #####:  247:    __y->__parent_ = __x->__parent_;
    #####:  248:    if (_VSTD::__tree_is_left_child(__x))
    $$$$$:  248-block  0
branch  0 never executed
branch  1 never executed
    #####:  249:        __x->__parent_->__left_ = __y;
    $$$$$:  249-block  0
        -:  250:    else
    #####:  251:        __x->__parent_unsafe()->__right_ = __y;
    $$$$$:  251-block  0
    #####:  252:    __y->__left_ = __x;
    #####:  253:    __x->__set_parent(__y);
    $$$$$:  253-block  0
branch  0 never executed
branch  1 never executed
    #####:  254:}
    $$$$$:  254-block  0
        -:  255:
        -:  256:// Effects:  Makes __x->__left_ the subtree root with __x as its right child
        -:  257://           while preserving in-order order.
        -:  258:template <class _NodePtr>
        -:  259:void
function _ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_ called 1 returned 100% blocks executed 66%
        1:  260:__tree_right_rotate(_NodePtr __x) _NOEXCEPT
        -:  261:{
        -:  262:    _LIBCPP_ASSERT(__x != nullptr, "node shouldn't be null");
        -:  263:    _LIBCPP_ASSERT(__x->__left_ != nullptr, "node should have a left child");
        1:  264:    _NodePtr __y = __x->__left_;
        1:  265:    __x->__left_ = __y->__right_;
        1:  266:    if (__x->__left_ != nullptr)
        1:  266-block  0
branch  0 taken 1
branch  1 taken 0
    #####:  267:        __x->__left_->__set_parent(__x);
    $$$$$:  267-block  0
        1:  268:    __y->__parent_ = __x->__parent_;
        1:  269:    if (_VSTD::__tree_is_left_child(__x))
        1:  269-block  0
branch  0 taken 1
branch  1 taken 0
        1:  270:        __x->__parent_->__left_ = __y;
        1:  270-block  0
        -:  271:    else
    #####:  272:        __x->__parent_unsafe()->__right_ = __y;
    $$$$$:  272-block  0
        1:  273:    __y->__right_ = __x;
        1:  274:    __x->__set_parent(__y);
        1:  275:}
        1:  275-block  0
        -:  276:
        -:  277:// Effects:  Rebalances __root after attaching __x to a leaf.
        -:  278:// Precondition:  __x has no children.
        -:  279://                __x == __root or == a direct or indirect child of __root.
        -:  280://                If __x were to be unlinked from __root (setting __root to
        -:  281://                  nullptr if __root == __x), __tree_invariant(__root) == true.
        -:  282:// Postcondition: __tree_invariant(end_node->__left_) == true.  end_node->__left_
        -:  283://                may be different than the value passed in as __root.
        -:  284:template <class _NodePtr>
        -:  285:void
function _ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ called 4 returned 100% blocks executed 40%
        4:  286:__tree_balance_after_insert(_NodePtr __root, _NodePtr __x) _NOEXCEPT
        -:  287:{
        -:  288:    _LIBCPP_ASSERT(__root != nullptr, "Root of the tree shouldn't be null");
        -:  289:    _LIBCPP_ASSERT(__x != nullptr, "Can't attach null node to a leaf");
        4:  290:    __x->__is_black_ = __x == __root;
        4:  291:    while (__x != __root && !__x->__parent_unsafe()->__is_black_)
        4:  291-block  0
        4:  291-block  1
branch  0 taken 2
branch  1 taken 2
        2:  291-block  2
branch  2 taken 2
branch  3 taken 0
        2:  291-block  3
        4:  291-block  4
branch  4 taken 3
branch  5 taken 1
    $$$$$:  291-block  5
    $$$$$:  291-block  6
        -:  292:    {
        -:  293:        // __x->__parent_ != __root because __x->__parent_->__is_black == false
        1:  294:        if (_VSTD::__tree_is_left_child(__x->__parent_unsafe()))
        1:  294-block  0
branch  0 taken 1
branch  1 taken 0
        1:  294-block  1
branch  2 taken 1
branch  3 taken 0
        -:  295:        {
        1:  296:            _NodePtr __y = __x->__parent_unsafe()->__parent_unsafe()->__right_;
        1:  296-block  0
branch  0 taken 1
branch  1 taken 0
        1:  296-block  1
branch  2 taken 1
branch  3 taken 0
        1:  297:            if (__y != nullptr && !__y->__is_black_)
        1:  297-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$:  297-block  1
branch  2 never executed
branch  3 never executed
        -:  298:            {
    #####:  299:                __x = __x->__parent_unsafe();
    $$$$$:  299-block  0
branch  0 never executed
branch  1 never executed
    #####:  300:                __x->__is_black_ = true;
    #####:  301:                __x = __x->__parent_unsafe();
    $$$$$:  301-block  0
branch  0 never executed
branch  1 never executed
    #####:  302:                __x->__is_black_ = __x == __root;
    #####:  303:                __y->__is_black_ = true;
    #####:  304:            }
    $$$$$:  304-block  0
        -:  305:            else
        -:  306:            {
        1:  307:                if (!_VSTD::__tree_is_left_child(__x))
        1:  307-block  0
branch  0 taken 0
branch  1 taken 1
        -:  308:                {
    #####:  309:                    __x = __x->__parent_unsafe();
    $$$$$:  309-block  0
branch  0 never executed
branch  1 never executed
    #####:  310:                    _VSTD::__tree_left_rotate(__x);
    #####:  311:                }
    $$$$$:  311-block  0
        1:  312:                __x = __x->__parent_unsafe();
        1:  312-block  0
branch  0 taken 1
branch  1 taken 0
        1:  313:                __x->__is_black_ = true;
        1:  314:                __x = __x->__parent_unsafe();
        1:  314-block  0
branch  0 taken 1
branch  1 taken 0
        1:  315:                __x->__is_black_ = false;
        1:  316:                _VSTD::__tree_right_rotate(__x);
        1:  317:                break;
        1:  317-block  0
        -:  318:            }
    #####:  319:        }
    $$$$$:  319-block  0
        -:  320:        else
        -:  321:        {
    #####:  322:            _NodePtr __y = __x->__parent_unsafe()->__parent_->__left_;
    $$$$$:  322-block  0
branch  0 never executed
branch  1 never executed
    #####:  323:            if (__y != nullptr && !__y->__is_black_)
    $$$$$:  323-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  323-block  1
branch  2 never executed
branch  3 never executed
        -:  324:            {
    #####:  325:                __x = __x->__parent_unsafe();
    $$$$$:  325-block  0
branch  0 never executed
branch  1 never executed
    #####:  326:                __x->__is_black_ = true;
    #####:  327:                __x = __x->__parent_unsafe();
    $$$$$:  327-block  0
branch  0 never executed
branch  1 never executed
    #####:  328:                __x->__is_black_ = __x == __root;
    #####:  329:                __y->__is_black_ = true;
    #####:  330:            }
    $$$$$:  330-block  0
        -:  331:            else
        -:  332:            {
    #####:  333:                if (_VSTD::__tree_is_left_child(__x))
    $$$$$:  333-block  0
branch  0 never executed
branch  1 never executed
        -:  334:                {
    #####:  335:                    __x = __x->__parent_unsafe();
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    #####:  336:                    _VSTD::__tree_right_rotate(__x);
    #####:  337:                }
    $$$$$:  337-block  0
    #####:  338:                __x = __x->__parent_unsafe();
    $$$$$:  338-block  0
branch  0 never executed
branch  1 never executed
    #####:  339:                __x->__is_black_ = true;
    #####:  340:                __x = __x->__parent_unsafe();
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    #####:  341:                __x->__is_black_ = false;
    #####:  342:                _VSTD::__tree_left_rotate(__x);
    #####:  343:                break;
    $$$$$:  343-block  0
        -:  344:            }
        -:  345:        }
        -:  346:    }
        4:  347:}
        4:  347-block  0
        -:  348:
        -:  349:// Precondition:  __z == __root or == a direct or indirect child of __root.
        -:  350:// Effects:  unlinks __z from the tree rooted at __root, rebalancing as needed.
        -:  351:// Postcondition: __tree_invariant(end_node->__left_) == true && end_node->__left_
        -:  352://                nor any of its children refer to __z.  end_node->__left_
        -:  353://                may be different than the value passed in as __root.
        -:  354:template <class _NodePtr>
        -:  355:void
        -:  356:__tree_remove(_NodePtr __root, _NodePtr __z) _NOEXCEPT
        -:  357:{
        -:  358:    _LIBCPP_ASSERT(__root != nullptr, "Root node should not be null");
        -:  359:    _LIBCPP_ASSERT(__z != nullptr, "The node to remove should not be null");
        -:  360:    _LIBCPP_DEBUG_ASSERT(__tree_invariant(__root), "The tree invariants should hold");
        -:  361:    // __z will be removed from the tree.  Client still needs to destruct/deallocate it
        -:  362:    // __y is either __z, or if __z has two children, __tree_next(__z).
        -:  363:    // __y will have at most one child.
        -:  364:    // __y will be the initial hole in the tree (make the hole at a leaf)
        -:  365:    _NodePtr __y = (__z->__left_ == nullptr || __z->__right_ == nullptr) ?
        -:  366:                    __z : _VSTD::__tree_next(__z);
        -:  367:    // __x is __y's possibly null single child
        -:  368:    _NodePtr __x = __y->__left_ != nullptr ? __y->__left_ : __y->__right_;
        -:  369:    // __w is __x's possibly null uncle (will become __x's sibling)
        -:  370:    _NodePtr __w = nullptr;
        -:  371:    // link __x to __y's parent, and find __w
        -:  372:    if (__x != nullptr)
        -:  373:        __x->__parent_ = __y->__parent_;
        -:  374:    if (_VSTD::__tree_is_left_child(__y))
        -:  375:    {
        -:  376:        __y->__parent_->__left_ = __x;
        -:  377:        if (__y != __root)
        -:  378:            __w = __y->__parent_unsafe()->__right_;
        -:  379:        else
        -:  380:            __root = __x;  // __w == nullptr
        -:  381:    }
        -:  382:    else
        -:  383:    {
        -:  384:        __y->__parent_unsafe()->__right_ = __x;
        -:  385:        // __y can't be root if it is a right child
        -:  386:        __w = __y->__parent_->__left_;
        -:  387:    }
        -:  388:    bool __removed_black = __y->__is_black_;
        -:  389:    // If we didn't remove __z, do so now by splicing in __y for __z,
        -:  390:    //    but copy __z's color.  This does not impact __x or __w.
        -:  391:    if (__y != __z)
        -:  392:    {
        -:  393:        // __z->__left_ != nulptr but __z->__right_ might == __x == nullptr
        -:  394:        __y->__parent_ = __z->__parent_;
        -:  395:        if (_VSTD::__tree_is_left_child(__z))
        -:  396:            __y->__parent_->__left_ = __y;
        -:  397:        else
        -:  398:            __y->__parent_unsafe()->__right_ = __y;
        -:  399:        __y->__left_ = __z->__left_;
        -:  400:        __y->__left_->__set_parent(__y);
        -:  401:        __y->__right_ = __z->__right_;
        -:  402:        if (__y->__right_ != nullptr)
        -:  403:            __y->__right_->__set_parent(__y);
        -:  404:        __y->__is_black_ = __z->__is_black_;
        -:  405:        if (__root == __z)
        -:  406:            __root = __y;
        -:  407:    }
        -:  408:    // There is no need to rebalance if we removed a red, or if we removed
        -:  409:    //     the last node.
        -:  410:    if (__removed_black && __root != nullptr)
        -:  411:    {
        -:  412:        // Rebalance:
        -:  413:        // __x has an implicit black color (transferred from the removed __y)
        -:  414:        //    associated with it, no matter what its color is.
        -:  415:        // If __x is __root (in which case it can't be null), it is supposed
        -:  416:        //    to be black anyway, and if it is doubly black, then the double
        -:  417:        //    can just be ignored.
        -:  418:        // If __x is red (in which case it can't be null), then it can absorb
        -:  419:        //    the implicit black just by setting its color to black.
        -:  420:        // Since __y was black and only had one child (which __x points to), __x
        -:  421:        //   is either red with no children, else null, otherwise __y would have
        -:  422:        //   different black heights under left and right pointers.
        -:  423:        // if (__x == __root || __x != nullptr && !__x->__is_black_)
        -:  424:        if (__x != nullptr)
        -:  425:            __x->__is_black_ = true;
        -:  426:        else
        -:  427:        {
        -:  428:            //  Else __x isn't root, and is "doubly black", even though it may
        -:  429:            //     be null.  __w can not be null here, else the parent would
        -:  430:            //     see a black height >= 2 on the __x side and a black height
        -:  431:            //     of 1 on the __w side (__w must be a non-null black or a red
        -:  432:            //     with a non-null black child).
        -:  433:            while (true)
        -:  434:            {
        -:  435:                if (!_VSTD::__tree_is_left_child(__w))  // if x is left child
        -:  436:                {
        -:  437:                    if (!__w->__is_black_)
        -:  438:                    {
        -:  439:                        __w->__is_black_ = true;
        -:  440:                        __w->__parent_unsafe()->__is_black_ = false;
        -:  441:                        _VSTD::__tree_left_rotate(__w->__parent_unsafe());
        -:  442:                        // __x is still valid
        -:  443:                        // reset __root only if necessary
        -:  444:                        if (__root == __w->__left_)
        -:  445:                            __root = __w;
        -:  446:                        // reset sibling, and it still can't be null
        -:  447:                        __w = __w->__left_->__right_;
        -:  448:                    }
        -:  449:                    // __w->__is_black_ is now true, __w may have null children
        -:  450:                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&
        -:  451:                        (__w->__right_ == nullptr || __w->__right_->__is_black_))
        -:  452:                    {
        -:  453:                        __w->__is_black_ = false;
        -:  454:                        __x = __w->__parent_unsafe();
        -:  455:                        // __x can no longer be null
        -:  456:                        if (__x == __root || !__x->__is_black_)
        -:  457:                        {
        -:  458:                            __x->__is_black_ = true;
        -:  459:                            break;
        -:  460:                        }
        -:  461:                        // reset sibling, and it still can't be null
        -:  462:                        __w = _VSTD::__tree_is_left_child(__x) ?
        -:  463:                                    __x->__parent_unsafe()->__right_ :
        -:  464:                                    __x->__parent_->__left_;
        -:  465:                        // continue;
        -:  466:                    }
        -:  467:                    else  // __w has a red child
        -:  468:                    {
        -:  469:                        if (__w->__right_ == nullptr || __w->__right_->__is_black_)
        -:  470:                        {
        -:  471:                            // __w left child is non-null and red
        -:  472:                            __w->__left_->__is_black_ = true;
        -:  473:                            __w->__is_black_ = false;
        -:  474:                            _VSTD::__tree_right_rotate(__w);
        -:  475:                            // __w is known not to be root, so root hasn't changed
        -:  476:                            // reset sibling, and it still can't be null
        -:  477:                            __w = __w->__parent_unsafe();
        -:  478:                        }
        -:  479:                        // __w has a right red child, left child may be null
        -:  480:                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;
        -:  481:                        __w->__parent_unsafe()->__is_black_ = true;
        -:  482:                        __w->__right_->__is_black_ = true;
        -:  483:                        _VSTD::__tree_left_rotate(__w->__parent_unsafe());
        -:  484:                        break;
        -:  485:                    }
        -:  486:                }
        -:  487:                else
        -:  488:                {
        -:  489:                    if (!__w->__is_black_)
        -:  490:                    {
        -:  491:                        __w->__is_black_ = true;
        -:  492:                        __w->__parent_unsafe()->__is_black_ = false;
        -:  493:                        _VSTD::__tree_right_rotate(__w->__parent_unsafe());
        -:  494:                        // __x is still valid
        -:  495:                        // reset __root only if necessary
        -:  496:                        if (__root == __w->__right_)
        -:  497:                            __root = __w;
        -:  498:                        // reset sibling, and it still can't be null
        -:  499:                        __w = __w->__right_->__left_;
        -:  500:                    }
        -:  501:                    // __w->__is_black_ is now true, __w may have null children
        -:  502:                    if ((__w->__left_  == nullptr || __w->__left_->__is_black_) &&
        -:  503:                        (__w->__right_ == nullptr || __w->__right_->__is_black_))
        -:  504:                    {
        -:  505:                        __w->__is_black_ = false;
        -:  506:                        __x = __w->__parent_unsafe();
        -:  507:                        // __x can no longer be null
        -:  508:                        if (!__x->__is_black_ || __x == __root)
        -:  509:                        {
        -:  510:                            __x->__is_black_ = true;
        -:  511:                            break;
        -:  512:                        }
        -:  513:                        // reset sibling, and it still can't be null
        -:  514:                        __w = _VSTD::__tree_is_left_child(__x) ?
        -:  515:                                    __x->__parent_unsafe()->__right_ :
        -:  516:                                    __x->__parent_->__left_;
        -:  517:                        // continue;
        -:  518:                    }
        -:  519:                    else  // __w has a red child
        -:  520:                    {
        -:  521:                        if (__w->__left_ == nullptr || __w->__left_->__is_black_)
        -:  522:                        {
        -:  523:                            // __w right child is non-null and red
        -:  524:                            __w->__right_->__is_black_ = true;
        -:  525:                            __w->__is_black_ = false;
        -:  526:                            _VSTD::__tree_left_rotate(__w);
        -:  527:                            // __w is known not to be root, so root hasn't changed
        -:  528:                            // reset sibling, and it still can't be null
        -:  529:                            __w = __w->__parent_unsafe();
        -:  530:                        }
        -:  531:                        // __w has a left red child, right child may be null
        -:  532:                        __w->__is_black_ = __w->__parent_unsafe()->__is_black_;
        -:  533:                        __w->__parent_unsafe()->__is_black_ = true;
        -:  534:                        __w->__left_->__is_black_ = true;
        -:  535:                        _VSTD::__tree_right_rotate(__w->__parent_unsafe());
        -:  536:                        break;
        -:  537:                    }
        -:  538:                }
        -:  539:            }
        -:  540:        }
        -:  541:    }
        -:  542:}
        -:  543:
        -:  544:// node traits
        -:  545:
        -:  546:
        -:  547:template <class _Tp>
        -:  548:struct __is_tree_value_type_imp : false_type {};
        -:  549:
        -:  550:template <class _Key, class _Value>
        -:  551:struct __is_tree_value_type_imp<__value_type<_Key, _Value> > : true_type {};
        -:  552:
        -:  553:template <class ..._Args>
        -:  554:struct __is_tree_value_type : false_type {};
        -:  555:
        -:  556:template <class _One>
        -:  557:struct __is_tree_value_type<_One> : __is_tree_value_type_imp<__uncvref_t<_One> > {};
        -:  558:
        -:  559:template <class _Tp>
        -:  560:struct __tree_key_value_types {
        -:  561:  typedef _Tp key_type;
        -:  562:  typedef _Tp __node_value_type;
        -:  563:  typedef _Tp __container_value_type;
        -:  564:  static const bool __is_map = false;
        -:  565:
        -:  566:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__122__tree_key_value_typesIN7doctest6detail8TestCaseEE9__get_keyB6v15006ERKS3_ called 1 returned 100% blocks executed 100%
function _ZNSt3__122__tree_key_value_typesIN7doctest6StringEE9__get_keyB6v15006ERKS2_ called 0 returned 0% blocks executed 0%
        1:  567:  static key_type const& __get_key(_Tp const& __v) {
        1:  568:    return __v;
        1:  568-block  0
    $$$$$:  568-block  1
        -:  569:  }
        -:  570:  _LIBCPP_INLINE_VISIBILITY
        -:  571:  static __container_value_type const& __get_value(__node_value_type const& __v) {
        -:  572:    return __v;
        -:  573:  }
        -:  574:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__122__tree_key_value_typesIN7doctest6detail8TestCaseEE9__get_ptrB6v15006ERS3_ called 1 returned 100% blocks executed 100%
function _ZNSt3__122__tree_key_value_typesIN7doctest6StringEE9__get_ptrB6v15006ERS2_ called 0 returned 0% blocks executed 0%
        1:  575:  static __container_value_type* __get_ptr(__node_value_type& __n) {
        1:  576:    return _VSTD::addressof(__n);
        1:  576-block  0
    $$$$$:  576-block  1
        -:  577:  }
        -:  578:  _LIBCPP_INLINE_VISIBILITY
        -:  579:  static __container_value_type&& __move(__node_value_type& __v) {
        -:  580:    return _VSTD::move(__v);
        -:  581:  }
        -:  582:};
        -:  583:
        -:  584:template <class _Key, class _Tp>
        -:  585:struct __tree_key_value_types<__value_type<_Key, _Tp> > {
        -:  586:  typedef _Key                                         key_type;
        -:  587:  typedef _Tp                                          mapped_type;
        -:  588:  typedef __value_type<_Key, _Tp>                      __node_value_type;
        -:  589:  typedef pair<const _Key, _Tp>                        __container_value_type;
        -:  590:  typedef __container_value_type                       __map_value_type;
        -:  591:  static const bool __is_map = true;
        -:  592:
        -:  593:  _LIBCPP_INLINE_VISIBILITY
        -:  594:  static key_type const&
        -:  595:  __get_key(__node_value_type const& __t) {
        -:  596:    return __t.__get_value().first;
        -:  597:  }
        -:  598:
        -:  599:  template <class _Up>
        -:  600:  _LIBCPP_INLINE_VISIBILITY
        -:  601:  static __enable_if_t<__is_same_uncvref<_Up, __container_value_type>::value, key_type const&>
function _ZNSt3__122__tree_key_value_typesINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEE9__get_keyB6v15006INS2_IKS5_SC_EEEENS_9enable_ifIXsr17__is_same_uncvrefIT_SH_EE5valueERSG_E4typeERSJ_ called 3 returned 100% blocks executed 100%
        3:  602:  __get_key(_Up& __t) {
        3:  603:    return __t.first;
        3:  603-block  0
        -:  604:  }
        -:  605:
        -:  606:  _LIBCPP_INLINE_VISIBILITY
        -:  607:  static __container_value_type const&
        -:  608:  __get_value(__node_value_type const& __t) {
        -:  609:    return __t.__get_value();
        -:  610:  }
        -:  611:
        -:  612:  template <class _Up>
        -:  613:  _LIBCPP_INLINE_VISIBILITY
        -:  614:  static __enable_if_t<__is_same_uncvref<_Up, __container_value_type>::value, __container_value_type const&>
        -:  615:  __get_value(_Up& __t) {
        -:  616:    return __t;
        -:  617:  }
        -:  618:
        -:  619:  _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__122__tree_key_value_typesINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEE9__get_ptrB6v15006ERSD_ called 3 returned 100% blocks executed 100%
        3:  620:  static __container_value_type* __get_ptr(__node_value_type& __n) {
        3:  621:    return _VSTD::addressof(__n.__get_value());
        3:  621-block  0
        -:  622:  }
        -:  623:
        -:  624:  _LIBCPP_INLINE_VISIBILITY
        -:  625:  static pair<key_type&&, mapped_type&&> __move(__node_value_type& __v) {
        -:  626:    return __v.__move();
        -:  627:  }
        -:  628:};
        -:  629:
        -:  630:template <class _VoidPtr>
        -:  631:struct __tree_node_base_types {
        -:  632:  typedef _VoidPtr                                               __void_pointer;
        -:  633:
        -:  634:  typedef __tree_node_base<__void_pointer>                      __node_base_type;
        -:  635:  typedef typename __rebind_pointer<_VoidPtr, __node_base_type>::type
        -:  636:                                                             __node_base_pointer;
        -:  637:
        -:  638:  typedef __tree_end_node<__node_base_pointer>                  __end_node_type;
        -:  639:  typedef typename __rebind_pointer<_VoidPtr, __end_node_type>::type
        -:  640:                                                             __end_node_pointer;
        -:  641:#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)
        -:  642:  typedef __end_node_pointer __parent_pointer;
        -:  643:#else
        -:  644:  typedef typename conditional<
        -:  645:      is_pointer<__end_node_pointer>::value,
        -:  646:        __end_node_pointer,
        -:  647:        __node_base_pointer>::type __parent_pointer;
        -:  648:#endif
        -:  649:
        -:  650:private:
        -:  651:  static_assert((is_same<typename pointer_traits<_VoidPtr>::element_type, void>::value),
        -:  652:                  "_VoidPtr does not point to unqualified void type");
        -:  653:};
        -:  654:
        -:  655:template <class _Tp, class _AllocPtr, class _KVTypes = __tree_key_value_types<_Tp>,
        -:  656:         bool = _KVTypes::__is_map>
        -:  657:struct __tree_map_pointer_types {};
        -:  658:
        -:  659:template <class _Tp, class _AllocPtr, class _KVTypes>
        -:  660:struct __tree_map_pointer_types<_Tp, _AllocPtr, _KVTypes, true> {
        -:  661:  typedef typename _KVTypes::__map_value_type   _Mv;
        -:  662:  typedef typename __rebind_pointer<_AllocPtr, _Mv>::type
        -:  663:                                                       __map_value_type_pointer;
        -:  664:  typedef typename __rebind_pointer<_AllocPtr, const _Mv>::type
        -:  665:                                                 __const_map_value_type_pointer;
        -:  666:};
        -:  667:
        -:  668:template <class _NodePtr, class _NodeT = typename pointer_traits<_NodePtr>::element_type>
        -:  669:struct __tree_node_types;
        -:  670:
        -:  671:template <class _NodePtr, class _Tp, class _VoidPtr>
        -:  672:struct __tree_node_types<_NodePtr, __tree_node<_Tp, _VoidPtr> >
        -:  673:    : public __tree_node_base_types<_VoidPtr>,
        -:  674:             __tree_key_value_types<_Tp>,
        -:  675:             __tree_map_pointer_types<_Tp, _VoidPtr>
        -:  676:{
        -:  677:  typedef __tree_node_base_types<_VoidPtr> __base;
        -:  678:  typedef __tree_key_value_types<_Tp>      __key_base;
        -:  679:  typedef __tree_map_pointer_types<_Tp, _VoidPtr> __map_pointer_base;
        -:  680:public:
        -:  681:
        -:  682:  typedef typename pointer_traits<_NodePtr>::element_type       __node_type;
        -:  683:  typedef _NodePtr                                              __node_pointer;
        -:  684:
        -:  685:  typedef _Tp                                                 __node_value_type;
        -:  686:  typedef typename __rebind_pointer<_VoidPtr, __node_value_type>::type
        -:  687:                                                      __node_value_type_pointer;
        -:  688:  typedef typename __rebind_pointer<_VoidPtr, const __node_value_type>::type
        -:  689:                                                __const_node_value_type_pointer;
        -:  690:#if defined(_LIBCPP_ABI_TREE_REMOVE_NODE_POINTER_UB)
        -:  691:  typedef typename __base::__end_node_pointer __iter_pointer;
        -:  692:#else
        -:  693:  typedef typename conditional<
        -:  694:      is_pointer<__node_pointer>::value,
        -:  695:        typename __base::__end_node_pointer,
        -:  696:        __node_pointer>::type __iter_pointer;
        -:  697:#endif
        -:  698:private:
        -:  699:    static_assert(!is_const<__node_type>::value,
        -:  700:                "_NodePtr should never be a pointer to const");
        -:  701:    static_assert((is_same<typename __rebind_pointer<_VoidPtr, __node_type>::type,
        -:  702:                          _NodePtr>::value), "_VoidPtr does not rebind to _NodePtr.");
        -:  703:};
        -:  704:
        -:  705:template <class _ValueTp, class _VoidPtr>
        -:  706:struct __make_tree_node_types {
        -:  707:  typedef typename __rebind_pointer<_VoidPtr, __tree_node<_ValueTp, _VoidPtr> >::type
        -:  708:                                                                        _NodePtr;
        -:  709:  typedef __tree_node_types<_NodePtr> type;
        -:  710:};
        -:  711:
        -:  712:// node
        -:  713:
        -:  714:template <class _Pointer>
        -:  715:class __tree_end_node
        -:  716:{
        -:  717:public:
        -:  718:    typedef _Pointer pointer;
        -:  719:    pointer __left_;
        -:  720:
        -:  721:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__115__tree_end_nodeIPNS_16__tree_node_baseIPvEEEC1B6v15006Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__115__tree_end_nodeIPNS_16__tree_node_baseIPvEEEC2B6v15006Ev called 4 returned 100% blocks executed 100%
        8:  722:    __tree_end_node() _NOEXCEPT : __left_() {}
        4:  722-block  0
        4:  722-block  1
        -:  723:};
        -:  724:
        -:  725:template <class _VoidPtr>
        -:  726:class _LIBCPP_STANDALONE_DEBUG __tree_node_base
        -:  727:    : public __tree_node_base_types<_VoidPtr>::__end_node_type
        -:  728:{
        -:  729:    typedef __tree_node_base_types<_VoidPtr> _NodeBaseTypes;
        -:  730:
        -:  731:public:
        -:  732:    typedef typename _NodeBaseTypes::__node_base_pointer pointer;
        -:  733:    typedef typename _NodeBaseTypes::__parent_pointer __parent_pointer;
        -:  734:
        -:  735:    pointer          __right_;
        -:  736:    __parent_pointer __parent_;
        -:  737:    bool __is_black_;
        -:  738:
        -:  739:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__116__tree_node_baseIPvE15__parent_unsafeB6v15006Ev called 8 returned 100% blocks executed 100%
        8:  740:    pointer __parent_unsafe() const { return static_cast<pointer>(__parent_);}
        8:  740-block  0
        -:  741:
        -:  742:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116__tree_node_baseIPvE12__set_parentB6v15006EPS2_ called 1 returned 100% blocks executed 100%
        1:  743:    void __set_parent(pointer __p) {
        1:  744:        __parent_ = static_cast<__parent_pointer>(__p);
        1:  745:    }
        1:  745-block  0
        -:  746:
        -:  747:private:
        -:  748:  ~__tree_node_base() = delete;
        -:  749:  __tree_node_base(__tree_node_base const&) = delete;
        -:  750:  __tree_node_base& operator=(__tree_node_base const&) = delete;
        -:  751:};
        -:  752:
        -:  753:template <class _Tp, class _VoidPtr>
        -:  754:class _LIBCPP_STANDALONE_DEBUG __tree_node
        -:  755:    : public __tree_node_base<_VoidPtr>
        -:  756:{
        -:  757:public:
        -:  758:    typedef _Tp __node_value_type;
        -:  759:
        -:  760:    __node_value_type __value_;
        -:  761:
        -:  762:private:
        -:  763:  ~__tree_node() = delete;
        -:  764:  __tree_node(__tree_node const&) = delete;
        -:  765:  __tree_node& operator=(__tree_node const&) = delete;
        -:  766:};
        -:  767:
        -:  768:
        -:  769:template <class _Allocator>
        -:  770:class __tree_node_destructor
        -:  771:{
        -:  772:    typedef _Allocator                                      allocator_type;
        -:  773:    typedef allocator_traits<allocator_type>                __alloc_traits;
        -:  774:
        -:  775:public:
        -:  776:    typedef typename __alloc_traits::pointer                pointer;
        -:  777:private:
        -:  778:    typedef __tree_node_types<pointer> _NodeTypes;
        -:  779:    allocator_type& __na_;
        -:  780:
        -:  781:
        -:  782:public:
        -:  783:    bool __value_constructed;
        -:  784:
        -:  785:
        -:  786:    __tree_node_destructor(const __tree_node_destructor &) = default;
        -:  787:    __tree_node_destructor& operator=(const __tree_node_destructor&) = delete;
        -:  788:
        -:  789:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEEEEC1B6v15006ERS8_b called 1 returned 100% blocks executed 100%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEEEEC2B6v15006ERS8_b called 1 returned 100% blocks executed 100%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeIN7doctest6StringEPvEEEEEC1B6v15006ERS7_b called 0 returned 0% blocks executed 0%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeIN7doctest6StringEPvEEEEEC2B6v15006ERS7_b called 0 returned 0% blocks executed 0%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS5_9IReporterERKNS5_14ContextOptionsEEEEPvEEEEEC1B6v15006ERSI_b called 3 returned 100% blocks executed 100%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS5_9IReporterERKNS5_14ContextOptionsEEEEPvEEEEEC2B6v15006ERSI_b called 3 returned 100% blocks executed 100%
        8:  790:    explicit __tree_node_destructor(allocator_type& __na, bool __val = false) _NOEXCEPT
        4:  791:        : __na_(__na),
        4:  792:          __value_constructed(__val)
        8:  793:        {}
        1:  793-block  0
        1:  793-block  1
    $$$$$:  793-block  2
    $$$$$:  793-block  3
        3:  793-block  4
        3:  793-block  5
        -:  794:
        -:  795:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEEEEclB6v15006EPS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeIN7doctest6StringEPvEEEEEclB6v15006EPS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__122__tree_node_destructorINS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS5_9IReporterERKNS5_14ContextOptionsEEEEPvEEEEEclB6v15006EPSH_ called 0 returned 0% blocks executed 0%
    #####:  796:    void operator()(pointer __p) _NOEXCEPT
        -:  797:    {
    #####:  798:        if (__value_constructed)
    $$$$$:  798-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  798-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  798-block  2
branch  4 never executed
branch  5 never executed
    #####:  799:            __alloc_traits::destroy(__na_, _NodeTypes::__get_ptr(__p->__value_));
    $$$$$:  799-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  799-block  1
    $$$$$:  799-block  2
    $$$$$:  799-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:  799-block  4
    $$$$$:  799-block  5
    $$$$$:  799-block  6
branch  4 never executed
branch  5 never executed
    $$$$$:  799-block  7
branch  6 never executed
branch  7 never executed
    $$$$$:  799-block  8
    $$$$$:  799-block  9
    #####:  800:        if (__p)
    $$$$$:  800-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  800-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  800-block  2
branch  4 never executed
branch  5 never executed
    #####:  801:            __alloc_traits::deallocate(__na_, __p, 1);
    $$$$$:  801-block  0
    $$$$$:  801-block  1
    $$$$$:  801-block  2
    #####:  802:    }
    $$$$$:  802-block  0
    $$$$$:  802-block  1
    $$$$$:  802-block  2
        -:  803:
        -:  804:    template <class> friend class __map_node_destructor;
        -:  805:};
        -:  806:
        -:  807:#if _LIBCPP_STD_VER > 14
        -:  808:template <class _NodeType, class _Alloc>
        -:  809:struct __generic_container_node_destructor;
        -:  810:template <class _Tp, class _VoidPtr, class _Alloc>
        -:  811:struct __generic_container_node_destructor<__tree_node<_Tp, _VoidPtr>, _Alloc>
        -:  812:    : __tree_node_destructor<_Alloc>
        -:  813:{
        -:  814:    using __tree_node_destructor<_Alloc>::__tree_node_destructor;
        -:  815:};
        -:  816:#endif
        -:  817:
        -:  818:template <class _Tp, class _NodePtr, class _DiffType>
        -:  819:class _LIBCPP_TEMPLATE_VIS __tree_iterator
        -:  820:{
        -:  821:    typedef __tree_node_types<_NodePtr>                     _NodeTypes;
        -:  822:    typedef _NodePtr                                        __node_pointer;
        -:  823:    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;
        -:  824:    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;
        -:  825:    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;
        -:  826:    typedef pointer_traits<__node_pointer> __pointer_traits;
        -:  827:
        -:  828:    __iter_pointer __ptr_;
        -:  829:
        -:  830:public:
        -:  831:    typedef bidirectional_iterator_tag                     iterator_category;
        -:  832:    typedef _Tp                                            value_type;
        -:  833:    typedef _DiffType                                      difference_type;
        -:  834:    typedef value_type&                                    reference;
        -:  835:    typedef typename _NodeTypes::__node_value_type_pointer pointer;
        -:  836:
        -:  837:    _LIBCPP_INLINE_VISIBILITY __tree_iterator() _NOEXCEPT
        -:  838:#if _LIBCPP_STD_VER > 11
        -:  839:    : __ptr_(nullptr)
        -:  840:#endif
        -:  841:    {}
        -:  842:
        -:  843:    _LIBCPP_INLINE_VISIBILITY reference operator*() const
        -:  844:        {return __get_np()->__value_;}
function _ZNKSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEptB6v15006Ev called 3 returned 100% blocks executed 100%
        3:  845:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const
        3:  846:        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}
        3:  846-block  0
        -:  847:
        -:  848:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEppB6v15006Ev called 3 returned 100% blocks executed 100%
        3:  849:    __tree_iterator& operator++() {
        3:  850:      __ptr_ = static_cast<__iter_pointer>(
        3:  851:          _VSTD::__tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));
        3:  852:      return *this;
        3:  852-block  0
        -:  853:    }
        -:  854:    _LIBCPP_INLINE_VISIBILITY
        -:  855:    __tree_iterator operator++(int)
        -:  856:        {__tree_iterator __t(*this); ++(*this); return __t;}
        -:  857:
        -:  858:    _LIBCPP_INLINE_VISIBILITY
        -:  859:    __tree_iterator& operator--() {
        -:  860:      __ptr_ = static_cast<__iter_pointer>(_VSTD::__tree_prev_iter<__node_base_pointer>(
        -:  861:          static_cast<__end_node_pointer>(__ptr_)));
        -:  862:      return *this;
        -:  863:    }
        -:  864:    _LIBCPP_INLINE_VISIBILITY
        -:  865:    __tree_iterator operator--(int)
        -:  866:        {__tree_iterator __t(*this); --(*this); return __t;}
        -:  867:
        -:  868:    friend _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__1eqB6v15006ERKNS_15__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEESK_ called 5 returned 100% blocks executed 100%
        5:  869:        bool operator==(const __tree_iterator& __x, const __tree_iterator& __y)
        5:  870:        {return __x.__ptr_ == __y.__ptr_;}
        5:  870-block  0
        -:  871:    friend _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__1neB6v15006ERKNS_15__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEESK_ called 5 returned 100% blocks executed 100%
        5:  872:        bool operator!=(const __tree_iterator& __x, const __tree_iterator& __y)
        5:  873:        {return !(__x == __y);}
        5:  873-block  0
        -:  874:
        -:  875:private:
        -:  876:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__115__tree_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEC1B6v15006ES7_ called 1 returned 100% blocks executed 100%
function _ZNSt3__115__tree_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEC2B6v15006ES7_ called 1 returned 100% blocks executed 100%
function _ZNSt3__115__tree_iteratorIN7doctest6StringEPNS_11__tree_nodeIS2_PvEElEC1B6v15006ES6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__115__tree_iteratorIN7doctest6StringEPNS_11__tree_nodeIS2_PvEElEC2B6v15006ES6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEC1B6v15006ESH_ called 3 returned 100% blocks executed 100%
function _ZNSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEC2B6v15006ESH_ called 3 returned 100% blocks executed 100%
        8:  877:    explicit __tree_iterator(__node_pointer __p) _NOEXCEPT : __ptr_(__p) {}
        1:  877-block  0
        1:  877-block  1
    $$$$$:  877-block  2
    $$$$$:  877-block  3
        3:  877-block  4
        3:  877-block  5
        -:  878:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEC1B6v15006EPNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE called 4 returned 100% blocks executed 100%
function _ZNSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEC2B6v15006EPNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE called 4 returned 100% blocks executed 100%
function _ZNSt3__115__tree_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEC1B6v15006EPNS_15__tree_end_nodeIPNS_16__tree_node_baseIS5_EEEE called 2 returned 100% blocks executed 100%
function _ZNSt3__115__tree_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEC2B6v15006EPNS_15__tree_end_nodeIPNS_16__tree_node_baseIS5_EEEE called 2 returned 100% blocks executed 100%
       12:  879:    explicit __tree_iterator(__end_node_pointer __p) _NOEXCEPT : __ptr_(__p) {}
        4:  879-block  0
        4:  879-block  1
        2:  879-block  2
        2:  879-block  3
        -:  880:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__115__tree_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElE8__get_npB6v15006Ev called 3 returned 100% blocks executed 100%
        3:  881:    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }
        3:  881-block  0
        -:  882:    template <class, class, class> friend class __tree;
        -:  883:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS __tree_const_iterator;
        -:  884:    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_iterator;
        -:  885:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;
        -:  886:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;
        -:  887:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;
        -:  888:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;
        -:  889:};
        -:  890:
        -:  891:template <class _Tp, class _NodePtr, class _DiffType>
        -:  892:class _LIBCPP_TEMPLATE_VIS __tree_const_iterator
        -:  893:{
        -:  894:    typedef __tree_node_types<_NodePtr>                     _NodeTypes;
        -:  895:    typedef typename _NodeTypes::__node_pointer             __node_pointer;
        -:  896:    typedef typename _NodeTypes::__node_base_pointer        __node_base_pointer;
        -:  897:    typedef typename _NodeTypes::__end_node_pointer         __end_node_pointer;
        -:  898:    typedef typename _NodeTypes::__iter_pointer             __iter_pointer;
        -:  899:    typedef pointer_traits<__node_pointer> __pointer_traits;
        -:  900:
        -:  901:    __iter_pointer __ptr_;
        -:  902:
        -:  903:public:
        -:  904:    typedef bidirectional_iterator_tag                           iterator_category;
        -:  905:    typedef _Tp                                                  value_type;
        -:  906:    typedef _DiffType                                            difference_type;
        -:  907:    typedef const value_type&                                    reference;
        -:  908:    typedef typename _NodeTypes::__const_node_value_type_pointer pointer;
        -:  909:
        -:  910:    _LIBCPP_INLINE_VISIBILITY __tree_const_iterator() _NOEXCEPT
        -:  911:#if _LIBCPP_STD_VER > 11
        -:  912:    : __ptr_(nullptr)
        -:  913:#endif
        -:  914:    {}
        -:  915:
        -:  916:private:
        -:  917:    typedef __tree_iterator<value_type, __node_pointer, difference_type>
        -:  918:                                                           __non_const_iterator;
        -:  919:public:
        -:  920:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__121__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEC1B6v15006ENS_15__tree_iteratorIS3_S7_lEE called 3 returned 100% blocks executed 100%
function _ZNSt3__121__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEC2B6v15006ENS_15__tree_iteratorIS3_S7_lEE called 3 returned 100% blocks executed 100%
function _ZNSt3__121__tree_const_iteratorIN7doctest6StringEPNS_11__tree_nodeIS2_PvEElEC1B6v15006ENS_15__tree_iteratorIS2_S6_lEE called 0 returned 0% blocks executed 0%
function _ZNSt3__121__tree_const_iteratorIN7doctest6StringEPNS_11__tree_nodeIS2_PvEElEC2B6v15006ENS_15__tree_iteratorIS2_S6_lEE called 0 returned 0% blocks executed 0%
        6:  921:    __tree_const_iterator(__non_const_iterator __p) _NOEXCEPT
        6:  922:        : __ptr_(__p.__ptr_) {}
        3:  922-block  0
        3:  922-block  1
    $$$$$:  922-block  2
    $$$$$:  922-block  3
        -:  923:
function _ZNKSt3__121__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEdeB6v15006Ev called 1 returned 100% blocks executed 100%
        1:  924:    _LIBCPP_INLINE_VISIBILITY reference operator*() const
        1:  925:        {return __get_np()->__value_;}
        1:  925-block  0
function _ZNKSt3__121__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEptB6v15006Ev called 0 returned 0% blocks executed 0%
    #####:  926:    _LIBCPP_INLINE_VISIBILITY pointer operator->() const
    #####:  927:        {return pointer_traits<pointer>::pointer_to(__get_np()->__value_);}
    $$$$$:  927-block  0
        -:  928:
        -:  929:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__121__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEppB6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__121__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEppB6v15006Ev called 0 returned 0% blocks executed 0%
        1:  930:    __tree_const_iterator& operator++() {
        1:  931:      __ptr_ = static_cast<__iter_pointer>(
        1:  932:          _VSTD::__tree_next_iter<__end_node_pointer>(static_cast<__node_base_pointer>(__ptr_)));
        1:  933:      return *this;
        1:  933-block  0
    $$$$$:  933-block  1
        -:  934:    }
        -:  935:
        -:  936:    _LIBCPP_INLINE_VISIBILITY
        -:  937:    __tree_const_iterator operator++(int)
        -:  938:        {__tree_const_iterator __t(*this); ++(*this); return __t;}
        -:  939:
        -:  940:    _LIBCPP_INLINE_VISIBILITY
        -:  941:    __tree_const_iterator& operator--() {
        -:  942:      __ptr_ = static_cast<__iter_pointer>(_VSTD::__tree_prev_iter<__node_base_pointer>(
        -:  943:          static_cast<__end_node_pointer>(__ptr_)));
        -:  944:      return *this;
        -:  945:    }
        -:  946:
        -:  947:    _LIBCPP_INLINE_VISIBILITY
        -:  948:    __tree_const_iterator operator--(int)
        -:  949:        {__tree_const_iterator __t(*this); --(*this); return __t;}
        -:  950:
        -:  951:    friend _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__1eqB6v15006ERKNS_21__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEESK_ called 0 returned 0% blocks executed 0%
function _ZNSt3__1eqB6v15006ERKNS_21__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEESA_ called 2 returned 100% blocks executed 100%
        2:  952:        bool operator==(const __tree_const_iterator& __x, const __tree_const_iterator& __y)
        2:  953:        {return __x.__ptr_ == __y.__ptr_;}
    $$$$$:  953-block  0
        2:  953-block  1
        -:  954:    friend _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__1neB6v15006ERKNS_21__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElEESA_ called 2 returned 100% blocks executed 100%
function _ZNSt3__1neB6v15006ERKNS_21__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEESK_ called 0 returned 0% blocks executed 0%
        2:  955:        bool operator!=(const __tree_const_iterator& __x, const __tree_const_iterator& __y)
        2:  956:        {return !(__x == __y);}
        2:  956-block  0
    $$$$$:  956-block  1
        -:  957:
        -:  958:private:
        -:  959:    _LIBCPP_INLINE_VISIBILITY
        -:  960:    explicit __tree_const_iterator(__node_pointer __p) _NOEXCEPT
        -:  961:        : __ptr_(__p) {}
        -:  962:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__121__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEC1B6v15006EPNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE called 0 returned 0% blocks executed 0%
function _ZNSt3__121__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElEC2B6v15006EPNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE called 0 returned 0% blocks executed 0%
    #####:  963:    explicit __tree_const_iterator(__end_node_pointer __p) _NOEXCEPT
    #####:  964:        : __ptr_(__p) {}
    $$$$$:  964-block  0
    $$$$$:  964-block  1
        -:  965:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__121__tree_const_iteratorINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEEPNS_11__tree_nodeISD_PvEElE8__get_npB6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNKSt3__121__tree_const_iteratorIN7doctest6detail8TestCaseEPNS_11__tree_nodeIS3_PvEElE8__get_npB6v15006Ev called 1 returned 100% blocks executed 100%
        1:  966:    __node_pointer __get_np() const { return static_cast<__node_pointer>(__ptr_); }
    $$$$$:  966-block  0
        1:  966-block  1
        -:  967:
        -:  968:    template <class, class, class> friend class __tree;
        -:  969:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;
        -:  970:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;
        -:  971:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS set;
        -:  972:    template <class, class, class> friend class _LIBCPP_TEMPLATE_VIS multiset;
        -:  973:    template <class> friend class _LIBCPP_TEMPLATE_VIS __map_const_iterator;
        -:  974:
        -:  975:};
        -:  976:
        -:  977:template<class _Tp, class _Compare>
        -:  978:#ifndef _LIBCPP_CXX03_LANG
        -:  979:    _LIBCPP_DIAGNOSE_WARNING(!__invokable<_Compare const&, _Tp const&, _Tp const&>::value,
        -:  980:        "the specified comparator type does not provide a viable const call operator")
        -:  981:#endif
        -:  982:int __diagnose_non_const_comparator();
        -:  983:
        -:  984:template <class _Tp, class _Compare, class _Allocator>
        -:  985:class __tree
        -:  986:{
        -:  987:public:
        -:  988:    typedef _Tp                                      value_type;
        -:  989:    typedef _Compare                                 value_compare;
        -:  990:    typedef _Allocator                               allocator_type;
        -:  991:
        -:  992:private:
        -:  993:    typedef allocator_traits<allocator_type>         __alloc_traits;
        -:  994:    typedef typename __make_tree_node_types<value_type,
        -:  995:        typename __alloc_traits::void_pointer>::type
        -:  996:                                                    _NodeTypes;
        -:  997:    typedef typename _NodeTypes::key_type           key_type;
        -:  998:public:
        -:  999:    typedef typename _NodeTypes::__node_value_type      __node_value_type;
        -: 1000:    typedef typename _NodeTypes::__container_value_type __container_value_type;
        -: 1001:
        -: 1002:    typedef typename __alloc_traits::pointer         pointer;
        -: 1003:    typedef typename __alloc_traits::const_pointer   const_pointer;
        -: 1004:    typedef typename __alloc_traits::size_type       size_type;
        -: 1005:    typedef typename __alloc_traits::difference_type difference_type;
        -: 1006:
        -: 1007:public:
        -: 1008:    typedef typename _NodeTypes::__void_pointer        __void_pointer;
        -: 1009:
        -: 1010:    typedef typename _NodeTypes::__node_type           __node;
        -: 1011:    typedef typename _NodeTypes::__node_pointer        __node_pointer;
        -: 1012:
        -: 1013:    typedef typename _NodeTypes::__node_base_type      __node_base;
        -: 1014:    typedef typename _NodeTypes::__node_base_pointer   __node_base_pointer;
        -: 1015:
        -: 1016:    typedef typename _NodeTypes::__end_node_type       __end_node_t;
        -: 1017:    typedef typename _NodeTypes::__end_node_pointer    __end_node_ptr;
        -: 1018:
        -: 1019:    typedef typename _NodeTypes::__parent_pointer      __parent_pointer;
        -: 1020:    typedef typename _NodeTypes::__iter_pointer        __iter_pointer;
        -: 1021:
        -: 1022:    typedef typename __rebind_alloc_helper<__alloc_traits, __node>::type __node_allocator;
        -: 1023:    typedef allocator_traits<__node_allocator>         __node_traits;
        -: 1024:
        -: 1025:private:
        -: 1026:    // check for sane allocator pointer rebinding semantics. Rebinding the
        -: 1027:    // allocator for a new pointer type should be exactly the same as rebinding
        -: 1028:    // the pointer using 'pointer_traits'.
        -: 1029:    static_assert((is_same<__node_pointer, typename __node_traits::pointer>::value),
        -: 1030:                  "Allocator does not rebind pointers in a sane manner.");
        -: 1031:    typedef typename __rebind_alloc_helper<__node_traits, __node_base>::type
        -: 1032:        __node_base_allocator;
        -: 1033:    typedef allocator_traits<__node_base_allocator> __node_base_traits;
        -: 1034:    static_assert((is_same<__node_base_pointer, typename __node_base_traits::pointer>::value),
        -: 1035:                 "Allocator does not rebind pointers in a sane manner.");
        -: 1036:
        -: 1037:private:
        -: 1038:    __iter_pointer                                     __begin_node_;
        -: 1039:    __compressed_pair<__end_node_t, __node_allocator>  __pair1_;
        -: 1040:    __compressed_pair<size_type, value_compare>        __pair3_;
        -: 1041:
        -: 1042:public:
        -: 1043:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE10__end_nodeB6v15006Ev called 8 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE10__end_nodeB6v15006Ev called 4 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE10__end_nodeB6v15006Ev called 1 returned 100% blocks executed 100%
       13: 1044:    __iter_pointer __end_node() _NOEXCEPT
        -: 1045:    {
       13: 1046:        return static_cast<__iter_pointer>(
        8: 1046-block  0
        4: 1046-block  1
        1: 1046-block  2
       13: 1047:                pointer_traits<__end_node_ptr>::pointer_to(__pair1_.first())
        -: 1048:        );
        -: 1049:    }
        -: 1050:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE10__end_nodeB6v15006Ev called 7 returned 100% blocks executed 100%
function _ZNKSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE10__end_nodeB6v15006Ev called 2 returned 100% blocks executed 100%
function _ZNKSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE10__end_nodeB6v15006Ev called 1 returned 100% blocks executed 100%
       10: 1051:    __iter_pointer __end_node() const _NOEXCEPT
        -: 1052:    {
       10: 1053:        return static_cast<__iter_pointer>(
        7: 1053-block  0
        2: 1053-block  1
        1: 1053-block  2
       10: 1054:            pointer_traits<__end_node_ptr>::pointer_to(
       10: 1055:                const_cast<__end_node_t&>(__pair1_.first())
        -: 1056:            )
        -: 1057:        );
        -: 1058:    }
        -: 1059:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE12__node_allocB6v15006Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE12__node_allocB6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE12__node_allocB6v15006Ev called 0 returned 0% blocks executed 0%
        4: 1060:          __node_allocator& __node_alloc() _NOEXCEPT {return __pair1_.second();}
        3: 1060-block  0
        1: 1060-block  1
    $$$$$: 1060-block  2
        -: 1061:private:
        -: 1062:    _LIBCPP_INLINE_VISIBILITY
        -: 1063:    const __node_allocator& __node_alloc() const _NOEXCEPT
        -: 1064:        {return __pair1_.second();}
        -: 1065:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE12__begin_nodeB6v15006Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE12__begin_nodeB6v15006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE12__begin_nodeB6v15006Ev called 1 returned 100% blocks executed 100%
       19: 1066:          __iter_pointer& __begin_node() _NOEXCEPT {return __begin_node_;}
       13: 1066-block  0
        5: 1066-block  1
        1: 1066-block  2
        -: 1067:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE12__begin_nodeB6v15006Ev called 0 returned 0% blocks executed 0%
    #####: 1068:    const __iter_pointer& __begin_node() const _NOEXCEPT {return __begin_node_;}
    $$$$$: 1068-block  0
        -: 1069:public:
        -: 1070:    _LIBCPP_INLINE_VISIBILITY
        -: 1071:    allocator_type __alloc() const _NOEXCEPT
        -: 1072:        {return allocator_type(__node_alloc());}
        -: 1073:private:
        -: 1074:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE4sizeB6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE4sizeB6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE4sizeB6v15006Ev called 3 returned 100% blocks executed 100%
        4: 1075:          size_type& size() _NOEXCEPT {return __pair3_.first();}
        1: 1075-block  0
    $$$$$: 1075-block  1
        3: 1075-block  2
        -: 1076:public:
        -: 1077:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE4sizeB6v15006Ev called 0 returned 0% blocks executed 0%
    #####: 1078:    const size_type& size() const _NOEXCEPT {return __pair3_.first();}
    $$$$$: 1078-block  0
        -: 1079:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE10value_compB6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE10value_compB6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE10value_compB6v15006Ev called 3 returned 100% blocks executed 100%
        3: 1080:          value_compare& value_comp() _NOEXCEPT {return __pair3_.second();}
    $$$$$: 1080-block  0
    $$$$$: 1080-block  1
        3: 1080-block  2
        -: 1081:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE10value_compB6v15006Ev called 0 returned 0% blocks executed 0%
    #####: 1082:    const value_compare& value_comp() const _NOEXCEPT
    #####: 1083:        {return __pair3_.second();}
    $$$$$: 1083-block  0
        -: 1084:public:
        -: 1085:
        -: 1086:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE6__rootB6v15006Ev called 4 returned 100% blocks executed 100%
function _ZNKSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE6__rootB6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNKSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE6__rootB6v15006Ev called 1 returned 100% blocks executed 100%
        6: 1087:    __node_pointer __root() const _NOEXCEPT
        6: 1088:        {return static_cast<__node_pointer>(__end_node()->__left_);}
        4: 1088-block  0
        1: 1088-block  1
        1: 1088-block  2
        -: 1089:
function _ZNKSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE10__root_ptrEv called 1 returned 100% blocks executed 100%
function _ZNKSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE10__root_ptrEv called 0 returned 0% blocks executed 0%
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE10__root_ptrEv called 3 returned 100% blocks executed 100%
        4: 1090:    __node_base_pointer* __root_ptr() const _NOEXCEPT {
        4: 1091:        return _VSTD::addressof(__end_node()->__left_);
        1: 1091-block  0
    $$$$$: 1091-block  1
        3: 1091-block  2
        -: 1092:    }
        -: 1093:
        -: 1094:    typedef __tree_iterator<value_type, __node_pointer, difference_type>             iterator;
        -: 1095:    typedef __tree_const_iterator<value_type, __node_pointer, difference_type> const_iterator;
        -: 1096:
        4: 1097:    explicit __tree(const value_compare& __comp)
        2: 1097-block  0
branch  0 taken 2
branch  1 taken 0
    $$$$$: 1097-block  1
        1: 1097-block  2
branch  2 taken 1
branch  3 taken 0
    $$$$$: 1097-block  3
        1: 1097-block  4
branch  4 taken 1
branch  5 taken 0
    $$$$$: 1097-block  5
        -: 1098:        _NOEXCEPT_(
        -: 1099:            is_nothrow_default_constructible<__node_allocator>::value &&
        -: 1100:            is_nothrow_copy_constructible<value_compare>::value);
        -: 1101:    explicit __tree(const allocator_type& __a);
        -: 1102:    __tree(const value_compare& __comp, const allocator_type& __a);
        -: 1103:    __tree(const __tree& __t);
        -: 1104:    __tree& operator=(const __tree& __t);
        -: 1105:    template <class _ForwardIterator>
        -: 1106:        void __assign_unique(_ForwardIterator __first, _ForwardIterator __last);
        -: 1107:    template <class _InputIterator>
        -: 1108:        void __assign_multi(_InputIterator __first, _InputIterator __last);
        -: 1109:    __tree(__tree&& __t)
        -: 1110:        _NOEXCEPT_(
        -: 1111:            is_nothrow_move_constructible<__node_allocator>::value &&
        -: 1112:            is_nothrow_move_constructible<value_compare>::value);
        -: 1113:    __tree(__tree&& __t, const allocator_type& __a);
        -: 1114:    __tree& operator=(__tree&& __t)
        -: 1115:        _NOEXCEPT_(
        -: 1116:            __node_traits::propagate_on_container_move_assignment::value &&
        -: 1117:            is_nothrow_move_assignable<value_compare>::value &&
        -: 1118:            is_nothrow_move_assignable<__node_allocator>::value);
        -: 1119:    ~__tree();
        -: 1120:
        -: 1121:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE5beginB6v15006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE5beginB6v15006Ev called 1 returned 100% blocks executed 100%
        3: 1122:          iterator begin()  _NOEXCEPT {return       iterator(__begin_node());}
        2: 1122-block  0
        1: 1122-block  1
        -: 1123:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE5beginB6v15006Ev called 0 returned 0% blocks executed 0%
    #####: 1124:    const_iterator begin() const _NOEXCEPT {return const_iterator(__begin_node());}
    $$$$$: 1124-block  0
        -: 1125:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE3endB6v15006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE3endB6v15006Ev called 1 returned 100% blocks executed 100%
        3: 1126:          iterator end() _NOEXCEPT {return       iterator(__end_node());}
        2: 1126-block  0
        1: 1126-block  1
        -: 1127:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE3endB6v15006Ev called 0 returned 0% blocks executed 0%
    #####: 1128:    const_iterator end() const _NOEXCEPT {return const_iterator(__end_node());}
    $$$$$: 1128-block  0
        -: 1129:
        -: 1130:    _LIBCPP_INLINE_VISIBILITY
        -: 1131:    size_type max_size() const _NOEXCEPT
        -: 1132:        {return _VSTD::min<size_type>(
        -: 1133:                __node_traits::max_size(__node_alloc()),
        -: 1134:                numeric_limits<difference_type >::max());}
        -: 1135:
        -: 1136:    void clear() _NOEXCEPT;
        -: 1137:
        -: 1138:    void swap(__tree& __t)
        -: 1139:#if _LIBCPP_STD_VER <= 11
        -: 1140:        _NOEXCEPT_(
        -: 1141:            __is_nothrow_swappable<value_compare>::value
        -: 1142:            && (!__node_traits::propagate_on_container_swap::value ||
        -: 1143:                 __is_nothrow_swappable<__node_allocator>::value)
        -: 1144:            );
        -: 1145:#else
        -: 1146:        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value);
        -: 1147:#endif
        -: 1148:
        -: 1149:    template <class _Key, class ..._Args>
        -: 1150:    pair<iterator, bool>
        -: 1151:    __emplace_unique_key_args(_Key const&, _Args&&... __args);
        -: 1152:    template <class _Key, class ..._Args>
        -: 1153:    pair<iterator, bool>
        -: 1154:    __emplace_hint_unique_key_args(const_iterator, _Key const&, _Args&&...);
        -: 1155:
        -: 1156:    template <class... _Args>
        -: 1157:    pair<iterator, bool> __emplace_unique_impl(_Args&&... __args);
        -: 1158:
        -: 1159:    template <class... _Args>
        -: 1160:    iterator __emplace_hint_unique_impl(const_iterator __p, _Args&&... __args);
        -: 1161:
        -: 1162:    template <class... _Args>
        -: 1163:    iterator __emplace_multi(_Args&&... __args);
        -: 1164:
        -: 1165:    template <class... _Args>
        -: 1166:    iterator __emplace_hint_multi(const_iterator __p, _Args&&... __args);
        -: 1167:
        -: 1168:    template <class _Pp>
        -: 1169:    _LIBCPP_INLINE_VISIBILITY
        -: 1170:    pair<iterator, bool> __emplace_unique(_Pp&& __x) {
        -: 1171:        return __emplace_unique_extract_key(_VSTD::forward<_Pp>(__x),
        -: 1172:                                            __can_extract_key<_Pp, key_type>());
        -: 1173:    }
        -: 1174:
        -: 1175:    template <class _First, class _Second>
        -: 1176:    _LIBCPP_INLINE_VISIBILITY
        -: 1177:    __enable_if_t<__can_extract_map_key<_First, key_type, __container_value_type>::value, pair<iterator, bool> >
        -: 1178:    __emplace_unique(_First&& __f, _Second&& __s) {
        -: 1179:        return __emplace_unique_key_args(__f, _VSTD::forward<_First>(__f),
        -: 1180:                                              _VSTD::forward<_Second>(__s));
        -: 1181:    }
        -: 1182:
        -: 1183:    template <class... _Args>
        -: 1184:    _LIBCPP_INLINE_VISIBILITY
        -: 1185:    pair<iterator, bool> __emplace_unique(_Args&&... __args) {
        -: 1186:        return __emplace_unique_impl(_VSTD::forward<_Args>(__args)...);
        -: 1187:    }
        -: 1188:
        -: 1189:    template <class _Pp>
        -: 1190:    _LIBCPP_INLINE_VISIBILITY
        -: 1191:    pair<iterator, bool>
        -: 1192:    __emplace_unique_extract_key(_Pp&& __x, __extract_key_fail_tag) {
        -: 1193:      return __emplace_unique_impl(_VSTD::forward<_Pp>(__x));
        -: 1194:    }
        -: 1195:
        -: 1196:    template <class _Pp>
        -: 1197:    _LIBCPP_INLINE_VISIBILITY
        -: 1198:    pair<iterator, bool>
        -: 1199:    __emplace_unique_extract_key(_Pp&& __x, __extract_key_self_tag) {
        -: 1200:      return __emplace_unique_key_args(__x, _VSTD::forward<_Pp>(__x));
        -: 1201:    }
        -: 1202:
        -: 1203:    template <class _Pp>
        -: 1204:    _LIBCPP_INLINE_VISIBILITY
        -: 1205:    pair<iterator, bool>
        -: 1206:    __emplace_unique_extract_key(_Pp&& __x, __extract_key_first_tag) {
        -: 1207:      return __emplace_unique_key_args(__x.first, _VSTD::forward<_Pp>(__x));
        -: 1208:    }
        -: 1209:
        -: 1210:    template <class _Pp>
        -: 1211:    _LIBCPP_INLINE_VISIBILITY
        -: 1212:    iterator __emplace_hint_unique(const_iterator __p, _Pp&& __x) {
        -: 1213:        return __emplace_hint_unique_extract_key(__p, _VSTD::forward<_Pp>(__x),
        -: 1214:                                            __can_extract_key<_Pp, key_type>());
        -: 1215:    }
        -: 1216:
        -: 1217:    template <class _First, class _Second>
        -: 1218:    _LIBCPP_INLINE_VISIBILITY
        -: 1219:    __enable_if_t<__can_extract_map_key<_First, key_type, __container_value_type>::value, iterator>
        -: 1220:    __emplace_hint_unique(const_iterator __p, _First&& __f, _Second&& __s) {
        -: 1221:        return __emplace_hint_unique_key_args(__p, __f,
        -: 1222:                                              _VSTD::forward<_First>(__f),
        -: 1223:                                              _VSTD::forward<_Second>(__s)).first;
        -: 1224:    }
        -: 1225:
        -: 1226:    template <class... _Args>
        -: 1227:    _LIBCPP_INLINE_VISIBILITY
        -: 1228:    iterator __emplace_hint_unique(const_iterator __p, _Args&&... __args) {
        -: 1229:        return __emplace_hint_unique_impl(__p, _VSTD::forward<_Args>(__args)...);
        -: 1230:    }
        -: 1231:
        -: 1232:    template <class _Pp>
        -: 1233:    _LIBCPP_INLINE_VISIBILITY
        -: 1234:    iterator
        -: 1235:    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_fail_tag) {
        -: 1236:      return __emplace_hint_unique_impl(__p, _VSTD::forward<_Pp>(__x));
        -: 1237:    }
        -: 1238:
        -: 1239:    template <class _Pp>
        -: 1240:    _LIBCPP_INLINE_VISIBILITY
        -: 1241:    iterator
        -: 1242:    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_self_tag) {
        -: 1243:      return __emplace_hint_unique_key_args(__p, __x, _VSTD::forward<_Pp>(__x)).first;
        -: 1244:    }
        -: 1245:
        -: 1246:    template <class _Pp>
        -: 1247:    _LIBCPP_INLINE_VISIBILITY
        -: 1248:    iterator
        -: 1249:    __emplace_hint_unique_extract_key(const_iterator __p, _Pp&& __x, __extract_key_first_tag) {
        -: 1250:      return __emplace_hint_unique_key_args(__p, __x.first, _VSTD::forward<_Pp>(__x)).first;
        -: 1251:    }
        -: 1252:
        -: 1253:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE15__insert_uniqueB6v15006ERKS3_ called 1 returned 100% blocks executed 100%
        1: 1254:    pair<iterator, bool> __insert_unique(const __container_value_type& __v) {
        1: 1255:        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), __v);
        1: 1255-block  0
        -: 1256:    }
        -: 1257:
        -: 1258:    _LIBCPP_INLINE_VISIBILITY
        -: 1259:    iterator __insert_unique(const_iterator __p, const __container_value_type& __v) {
        -: 1260:        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), __v).first;
        -: 1261:    }
        -: 1262:
        -: 1263:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueB6v15006EOS2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE15__insert_uniqueB6v15006EONS2_IKS5_SC_EE called 3 returned 100% blocks executed 100%
        3: 1264:    pair<iterator, bool> __insert_unique(__container_value_type&& __v) {
        3: 1265:        return __emplace_unique_key_args(_NodeTypes::__get_key(__v), _VSTD::move(__v));
    $$$$$: 1265-block  0
        3: 1265-block  1
        -: 1266:    }
        -: 1267:
        -: 1268:    _LIBCPP_INLINE_VISIBILITY
        -: 1269:    iterator __insert_unique(const_iterator __p, __container_value_type&& __v) {
        -: 1270:        return __emplace_hint_unique_key_args(__p, _NodeTypes::__get_key(__v), _VSTD::move(__v)).first;
        -: 1271:    }
        -: 1272:
        -: 1273:    template <class _Vp,
        -: 1274:              class = __enable_if_t<!is_same<typename __unconstref<_Vp>::type, __container_value_type>::value> >
        -: 1275:    _LIBCPP_INLINE_VISIBILITY
        -: 1276:    pair<iterator, bool> __insert_unique(_Vp&& __v) {
        -: 1277:        return __emplace_unique(_VSTD::forward<_Vp>(__v));
        -: 1278:    }
        -: 1279:
        -: 1280:    template <class _Vp,
        -: 1281:              class = __enable_if_t<!is_same<typename __unconstref<_Vp>::type, __container_value_type>::value> >
        -: 1282:    _LIBCPP_INLINE_VISIBILITY
        -: 1283:    iterator __insert_unique(const_iterator __p, _Vp&& __v) {
        -: 1284:        return __emplace_hint_unique(__p, _VSTD::forward<_Vp>(__v));
        -: 1285:    }
        -: 1286:
        -: 1287:    _LIBCPP_INLINE_VISIBILITY
        -: 1288:    iterator __insert_multi(__container_value_type&& __v) {
        -: 1289:        return __emplace_multi(_VSTD::move(__v));
        -: 1290:    }
        -: 1291:
        -: 1292:    _LIBCPP_INLINE_VISIBILITY
        -: 1293:    iterator __insert_multi(const_iterator __p, __container_value_type&& __v) {
        -: 1294:        return __emplace_hint_multi(__p, _VSTD::move(__v));
        -: 1295:    }
        -: 1296:
        -: 1297:    template <class _Vp>
        -: 1298:    _LIBCPP_INLINE_VISIBILITY
        -: 1299:    iterator __insert_multi(_Vp&& __v) {
        -: 1300:        return __emplace_multi(_VSTD::forward<_Vp>(__v));
        -: 1301:    }
        -: 1302:
        -: 1303:    template <class _Vp>
        -: 1304:    _LIBCPP_INLINE_VISIBILITY
        -: 1305:    iterator __insert_multi(const_iterator __p, _Vp&& __v) {
        -: 1306:        return __emplace_hint_multi(__p, _VSTD::forward<_Vp>(__v));
        -: 1307:    }
        -: 1308:
        -: 1309:    _LIBCPP_INLINE_VISIBILITY
        -: 1310:    pair<iterator, bool> __node_assign_unique(const __container_value_type& __v, __node_pointer __dest);
        -: 1311:
        -: 1312:    _LIBCPP_INLINE_VISIBILITY
        -: 1313:    iterator __node_insert_multi(__node_pointer __nd);
        -: 1314:    _LIBCPP_INLINE_VISIBILITY
        -: 1315:    iterator __node_insert_multi(const_iterator __p, __node_pointer __nd);
        -: 1316:
        -: 1317:
        -: 1318:    _LIBCPP_INLINE_VISIBILITY iterator
        -: 1319:    __remove_node_pointer(__node_pointer) _NOEXCEPT;
        -: 1320:
        -: 1321:#if _LIBCPP_STD_VER > 14
        -: 1322:    template <class _NodeHandle, class _InsertReturnType>
        -: 1323:    _LIBCPP_INLINE_VISIBILITY
        -: 1324:    _InsertReturnType __node_handle_insert_unique(_NodeHandle&&);
        -: 1325:    template <class _NodeHandle>
        -: 1326:    _LIBCPP_INLINE_VISIBILITY
        -: 1327:    iterator __node_handle_insert_unique(const_iterator, _NodeHandle&&);
        -: 1328:    template <class _Tree>
        -: 1329:    _LIBCPP_INLINE_VISIBILITY
        -: 1330:    void __node_handle_merge_unique(_Tree& __source);
        -: 1331:
        -: 1332:    template <class _NodeHandle>
        -: 1333:    _LIBCPP_INLINE_VISIBILITY
        -: 1334:    iterator __node_handle_insert_multi(_NodeHandle&&);
        -: 1335:    template <class _NodeHandle>
        -: 1336:    _LIBCPP_INLINE_VISIBILITY
        -: 1337:    iterator __node_handle_insert_multi(const_iterator, _NodeHandle&&);
        -: 1338:    template <class _Tree>
        -: 1339:    _LIBCPP_INLINE_VISIBILITY
        -: 1340:    void __node_handle_merge_multi(_Tree& __source);
        -: 1341:
        -: 1342:
        -: 1343:    template <class _NodeHandle>
        -: 1344:    _LIBCPP_INLINE_VISIBILITY
        -: 1345:    _NodeHandle __node_handle_extract(key_type const&);
        -: 1346:    template <class _NodeHandle>
        -: 1347:    _LIBCPP_INLINE_VISIBILITY
        -: 1348:    _NodeHandle __node_handle_extract(const_iterator);
        -: 1349:#endif
        -: 1350:
        -: 1351:    iterator erase(const_iterator __p);
        -: 1352:    iterator erase(const_iterator __f, const_iterator __l);
        -: 1353:    template <class _Key>
        -: 1354:        size_type __erase_unique(const _Key& __k);
        -: 1355:    template <class _Key>
        -: 1356:        size_type __erase_multi(const _Key& __k);
        -: 1357:
        -: 1358:    void __insert_node_at(__parent_pointer     __parent,
        -: 1359:                          __node_base_pointer& __child,
        -: 1360:                          __node_base_pointer __new_node) _NOEXCEPT;
        -: 1361:
        -: 1362:    template <class _Key>
        -: 1363:        iterator find(const _Key& __v);
        -: 1364:    template <class _Key>
        -: 1365:        const_iterator find(const _Key& __v) const;
        -: 1366:
        -: 1367:    template <class _Key>
        -: 1368:        size_type __count_unique(const _Key& __k) const;
        -: 1369:    template <class _Key>
        -: 1370:        size_type __count_multi(const _Key& __k) const;
        -: 1371:
        -: 1372:    template <class _Key>
        -: 1373:        _LIBCPP_INLINE_VISIBILITY
        -: 1374:        iterator lower_bound(const _Key& __v)
        -: 1375:            {return __lower_bound(__v, __root(), __end_node());}
        -: 1376:    template <class _Key>
        -: 1377:        iterator __lower_bound(const _Key& __v,
        -: 1378:                               __node_pointer __root,
        -: 1379:                               __iter_pointer __result);
        -: 1380:    template <class _Key>
        -: 1381:        _LIBCPP_INLINE_VISIBILITY
        -: 1382:        const_iterator lower_bound(const _Key& __v) const
        -: 1383:            {return __lower_bound(__v, __root(), __end_node());}
        -: 1384:    template <class _Key>
        -: 1385:        const_iterator __lower_bound(const _Key& __v,
        -: 1386:                                     __node_pointer __root,
        -: 1387:                                     __iter_pointer __result) const;
        -: 1388:    template <class _Key>
        -: 1389:        _LIBCPP_INLINE_VISIBILITY
        -: 1390:        iterator upper_bound(const _Key& __v)
        -: 1391:            {return __upper_bound(__v, __root(), __end_node());}
        -: 1392:    template <class _Key>
        -: 1393:        iterator __upper_bound(const _Key& __v,
        -: 1394:                               __node_pointer __root,
        -: 1395:                               __iter_pointer __result);
        -: 1396:    template <class _Key>
        -: 1397:        _LIBCPP_INLINE_VISIBILITY
        -: 1398:        const_iterator upper_bound(const _Key& __v) const
        -: 1399:            {return __upper_bound(__v, __root(), __end_node());}
        -: 1400:    template <class _Key>
        -: 1401:        const_iterator __upper_bound(const _Key& __v,
        -: 1402:                                     __node_pointer __root,
        -: 1403:                                     __iter_pointer __result) const;
        -: 1404:    template <class _Key>
        -: 1405:        pair<iterator, iterator>
        -: 1406:        __equal_range_unique(const _Key& __k);
        -: 1407:    template <class _Key>
        -: 1408:        pair<const_iterator, const_iterator>
        -: 1409:        __equal_range_unique(const _Key& __k) const;
        -: 1410:
        -: 1411:    template <class _Key>
        -: 1412:        pair<iterator, iterator>
        -: 1413:        __equal_range_multi(const _Key& __k);
        -: 1414:    template <class _Key>
        -: 1415:        pair<const_iterator, const_iterator>
        -: 1416:        __equal_range_multi(const _Key& __k) const;
        -: 1417:
        -: 1418:    typedef __tree_node_destructor<__node_allocator> _Dp;
        -: 1419:    typedef unique_ptr<__node, _Dp> __node_holder;
        -: 1420:
        -: 1421:    __node_holder remove(const_iterator __p) _NOEXCEPT;
        -: 1422:private:
        -: 1423:    __node_base_pointer&
        -: 1424:        __find_leaf_low(__parent_pointer& __parent, const key_type& __v);
        -: 1425:    __node_base_pointer&
        -: 1426:        __find_leaf_high(__parent_pointer& __parent, const key_type& __v);
        -: 1427:    __node_base_pointer&
        -: 1428:        __find_leaf(const_iterator __hint,
        -: 1429:                    __parent_pointer& __parent, const key_type& __v);
        -: 1430:    // FIXME: Make this function const qualified. Unfortunately doing so
        -: 1431:    // breaks existing code which uses non-const callable comparators.
        -: 1432:    template <class _Key>
        -: 1433:    __node_base_pointer&
        -: 1434:        __find_equal(__parent_pointer& __parent, const _Key& __v);
        -: 1435:    template <class _Key>
        -: 1436:    _LIBCPP_INLINE_VISIBILITY __node_base_pointer&
        -: 1437:    __find_equal(__parent_pointer& __parent, const _Key& __v) const {
        -: 1438:      return const_cast<__tree*>(this)->__find_equal(__parent, __v);
        -: 1439:    }
        -: 1440:    template <class _Key>
        -: 1441:    __node_base_pointer&
        -: 1442:        __find_equal(const_iterator __hint, __parent_pointer& __parent,
        -: 1443:                     __node_base_pointer& __dummy,
        -: 1444:                     const _Key& __v);
        -: 1445:
        -: 1446:    template <class ..._Args>
        -: 1447:    __node_holder __construct_node(_Args&& ...__args);
        -: 1448:
        -: 1449:    void destroy(__node_pointer __nd) _NOEXCEPT;
        -: 1450:
        -: 1451:    _LIBCPP_INLINE_VISIBILITY
        -: 1452:    void __copy_assign_alloc(const __tree& __t)
        -: 1453:        {__copy_assign_alloc(__t, integral_constant<bool,
        -: 1454:             __node_traits::propagate_on_container_copy_assignment::value>());}
        -: 1455:
        -: 1456:    _LIBCPP_INLINE_VISIBILITY
        -: 1457:    void __copy_assign_alloc(const __tree& __t, true_type)
        -: 1458:        {
        -: 1459:        if (__node_alloc() != __t.__node_alloc())
        -: 1460:            clear();
        -: 1461:        __node_alloc() = __t.__node_alloc();
        -: 1462:        }
        -: 1463:    _LIBCPP_INLINE_VISIBILITY
        -: 1464:    void __copy_assign_alloc(const __tree&, false_type) {}
        -: 1465:
        -: 1466:    void __move_assign(__tree& __t, false_type);
        -: 1467:    void __move_assign(__tree& __t, true_type)
        -: 1468:        _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&
        -: 1469:                   is_nothrow_move_assignable<__node_allocator>::value);
        -: 1470:
        -: 1471:    _LIBCPP_INLINE_VISIBILITY
        -: 1472:    void __move_assign_alloc(__tree& __t)
        -: 1473:        _NOEXCEPT_(
        -: 1474:            !__node_traits::propagate_on_container_move_assignment::value ||
        -: 1475:            is_nothrow_move_assignable<__node_allocator>::value)
        -: 1476:        {__move_assign_alloc(__t, integral_constant<bool,
        -: 1477:             __node_traits::propagate_on_container_move_assignment::value>());}
        -: 1478:
        -: 1479:    _LIBCPP_INLINE_VISIBILITY
        -: 1480:    void __move_assign_alloc(__tree& __t, true_type)
        -: 1481:        _NOEXCEPT_(is_nothrow_move_assignable<__node_allocator>::value)
        -: 1482:        {__node_alloc() = _VSTD::move(__t.__node_alloc());}
        -: 1483:    _LIBCPP_INLINE_VISIBILITY
        -: 1484:    void __move_assign_alloc(__tree&, false_type) _NOEXCEPT {}
        -: 1485:
        -: 1486:    struct _DetachedTreeCache {
        -: 1487:      _LIBCPP_INLINE_VISIBILITY
        -: 1488:      explicit _DetachedTreeCache(__tree *__t) _NOEXCEPT : __t_(__t),
        -: 1489:        __cache_root_(__detach_from_tree(__t)) {
        -: 1490:          __advance();
        -: 1491:        }
        -: 1492:
        -: 1493:      _LIBCPP_INLINE_VISIBILITY
        -: 1494:      __node_pointer __get() const _NOEXCEPT {
        -: 1495:        return __cache_elem_;
        -: 1496:      }
        -: 1497:
        -: 1498:      _LIBCPP_INLINE_VISIBILITY
        -: 1499:      void __advance() _NOEXCEPT {
        -: 1500:        __cache_elem_ = __cache_root_;
        -: 1501:        if (__cache_root_) {
        -: 1502:          __cache_root_ = __detach_next(__cache_root_);
        -: 1503:        }
        -: 1504:      }
        -: 1505:
        -: 1506:      _LIBCPP_INLINE_VISIBILITY
        -: 1507:      ~_DetachedTreeCache() {
        -: 1508:        __t_->destroy(__cache_elem_);
        -: 1509:        if (__cache_root_) {
        -: 1510:          while (__cache_root_->__parent_ != nullptr)
        -: 1511:            __cache_root_ = static_cast<__node_pointer>(__cache_root_->__parent_);
        -: 1512:          __t_->destroy(__cache_root_);
        -: 1513:        }
        -: 1514:      }
        -: 1515:
        -: 1516:       _DetachedTreeCache(_DetachedTreeCache const&) = delete;
        -: 1517:       _DetachedTreeCache& operator=(_DetachedTreeCache const&) = delete;
        -: 1518:
        -: 1519:    private:
        -: 1520:      _LIBCPP_INLINE_VISIBILITY
        -: 1521:      static __node_pointer __detach_from_tree(__tree *__t) _NOEXCEPT;
        -: 1522:      _LIBCPP_INLINE_VISIBILITY
        -: 1523:      static __node_pointer __detach_next(__node_pointer) _NOEXCEPT;
        -: 1524:
        -: 1525:      __tree *__t_;
        -: 1526:      __node_pointer __cache_root_;
        -: 1527:      __node_pointer __cache_elem_;
        -: 1528:    };
        -: 1529:
        -: 1530:
        -: 1531:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS map;
        -: 1532:    template <class, class, class, class> friend class _LIBCPP_TEMPLATE_VIS multimap;
        -: 1533:};
        -: 1534:
        -: 1535:template <class _Tp, class _Compare, class _Allocator>
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEEC1ERKSH_ called 2 returned 100% blocks executed 100%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEEC2ERKSH_ called 2 returned 100% blocks executed 75%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEEC1ERKS5_ called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEEC2ERKS5_ called 1 returned 100% blocks executed 75%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEEC1ERKS4_ called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_ called 1 returned 100% blocks executed 75%
        8: 1536:__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp)
        -: 1537:        _NOEXCEPT_(
        -: 1538:            is_nothrow_default_constructible<__node_allocator>::value &&
        -: 1539:            is_nothrow_copy_constructible<value_compare>::value)
        4: 1540:    : __pair3_(0, __comp)
        2: 1540-block  0
branch  0 taken 2
branch  1 taken 0
        1: 1540-block  1
branch  2 taken 1
branch  3 taken 0
        1: 1540-block  2
branch  4 taken 1
branch  5 taken 0
        4: 1541:{
        4: 1542:    __begin_node() = __end_node();
        8: 1543:}
        2: 1543-block  0
        2: 1543-block  1
        1: 1543-block  2
        1: 1543-block  3
        1: 1543-block  4
        1: 1543-block  5
        -: 1544:
        -: 1545:template <class _Tp, class _Compare, class _Allocator>
        -: 1546:__tree<_Tp, _Compare, _Allocator>::__tree(const allocator_type& __a)
        -: 1547:    : __begin_node_(__iter_pointer()),
        -: 1548:      __pair1_(__default_init_tag(), __node_allocator(__a)),
        -: 1549:      __pair3_(0, __default_init_tag())
        -: 1550:{
        -: 1551:    __begin_node() = __end_node();
        -: 1552:}
        -: 1553:
        -: 1554:template <class _Tp, class _Compare, class _Allocator>
        -: 1555:__tree<_Tp, _Compare, _Allocator>::__tree(const value_compare& __comp,
        -: 1556:                                           const allocator_type& __a)
        -: 1557:    : __begin_node_(__iter_pointer()),
        -: 1558:      __pair1_(__default_init_tag(), __node_allocator(__a)),
        -: 1559:      __pair3_(0, __comp)
        -: 1560:{
        -: 1561:    __begin_node() = __end_node();
        -: 1562:}
        -: 1563:
        -: 1564:// Precondition:  size() != 0
        -: 1565:template <class _Tp, class _Compare, class _Allocator>
        -: 1566:typename __tree<_Tp, _Compare, _Allocator>::__node_pointer
        -: 1567:__tree<_Tp, _Compare, _Allocator>::_DetachedTreeCache::__detach_from_tree(__tree *__t) _NOEXCEPT
        -: 1568:{
        -: 1569:    __node_pointer __cache = static_cast<__node_pointer>(__t->__begin_node());
        -: 1570:    __t->__begin_node() = __t->__end_node();
        -: 1571:    __t->__end_node()->__left_->__parent_ = nullptr;
        -: 1572:    __t->__end_node()->__left_ = nullptr;
        -: 1573:    __t->size() = 0;
        -: 1574:    // __cache->__left_ == nullptr
        -: 1575:    if (__cache->__right_ != nullptr)
        -: 1576:        __cache = static_cast<__node_pointer>(__cache->__right_);
        -: 1577:    // __cache->__left_ == nullptr
        -: 1578:    // __cache->__right_ == nullptr
        -: 1579:    return __cache;
        -: 1580:}
        -: 1581:
        -: 1582:// Precondition:  __cache != nullptr
        -: 1583://    __cache->left_ == nullptr
        -: 1584://    __cache->right_ == nullptr
        -: 1585://    This is no longer a red-black tree
        -: 1586:template <class _Tp, class _Compare, class _Allocator>
        -: 1587:typename __tree<_Tp, _Compare, _Allocator>::__node_pointer
        -: 1588:__tree<_Tp, _Compare, _Allocator>::_DetachedTreeCache::__detach_next(__node_pointer __cache) _NOEXCEPT
        -: 1589:{
        -: 1590:    if (__cache->__parent_ == nullptr)
        -: 1591:        return nullptr;
        -: 1592:    if (_VSTD::__tree_is_left_child(static_cast<__node_base_pointer>(__cache)))
        -: 1593:    {
        -: 1594:        __cache->__parent_->__left_ = nullptr;
        -: 1595:        __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1596:        if (__cache->__right_ == nullptr)
        -: 1597:            return __cache;
        -: 1598:        return static_cast<__node_pointer>(_VSTD::__tree_leaf(__cache->__right_));
        -: 1599:    }
        -: 1600:    // __cache is right child
        -: 1601:    __cache->__parent_unsafe()->__right_ = nullptr;
        -: 1602:    __cache = static_cast<__node_pointer>(__cache->__parent_);
        -: 1603:    if (__cache->__left_ == nullptr)
        -: 1604:        return __cache;
        -: 1605:    return static_cast<__node_pointer>(_VSTD::__tree_leaf(__cache->__left_));
        -: 1606:}
        -: 1607:
        -: 1608:template <class _Tp, class _Compare, class _Allocator>
        -: 1609:__tree<_Tp, _Compare, _Allocator>&
        -: 1610:__tree<_Tp, _Compare, _Allocator>::operator=(const __tree& __t)
        -: 1611:{
        -: 1612:    if (this != _VSTD::addressof(__t))
        -: 1613:    {
        -: 1614:        value_comp() = __t.value_comp();
        -: 1615:        __copy_assign_alloc(__t);
        -: 1616:        __assign_multi(__t.begin(), __t.end());
        -: 1617:    }
        -: 1618:    return *this;
        -: 1619:}
        -: 1620:
        -: 1621:template <class _Tp, class _Compare, class _Allocator>
        -: 1622:template <class _ForwardIterator>
        -: 1623:void
        -: 1624:__tree<_Tp, _Compare, _Allocator>::__assign_unique(_ForwardIterator __first, _ForwardIterator __last)
        -: 1625:{
        -: 1626:    typedef iterator_traits<_ForwardIterator> _ITraits;
        -: 1627:    typedef typename _ITraits::value_type _ItValueType;
        -: 1628:    static_assert((is_same<_ItValueType, __container_value_type>::value),
        -: 1629:                  "__assign_unique may only be called with the containers value type");
        -: 1630:    static_assert(__is_cpp17_forward_iterator<_ForwardIterator>::value,
        -: 1631:                  "__assign_unique requires a forward iterator");
        -: 1632:    if (size() != 0)
        -: 1633:    {
        -: 1634:        _DetachedTreeCache __cache(this);
        -: 1635:          for (; __cache.__get() != nullptr && __first != __last; ++__first) {
        -: 1636:              if (__node_assign_unique(*__first, __cache.__get()).second)
        -: 1637:                  __cache.__advance();
        -: 1638:            }
        -: 1639:    }
        -: 1640:    for (; __first != __last; ++__first)
        -: 1641:        __insert_unique(*__first);
        -: 1642:}
        -: 1643:
        -: 1644:template <class _Tp, class _Compare, class _Allocator>
        -: 1645:template <class _InputIterator>
        -: 1646:void
        -: 1647:__tree<_Tp, _Compare, _Allocator>::__assign_multi(_InputIterator __first, _InputIterator __last)
        -: 1648:{
        -: 1649:    typedef iterator_traits<_InputIterator> _ITraits;
        -: 1650:    typedef typename _ITraits::value_type _ItValueType;
        -: 1651:    static_assert((is_same<_ItValueType, __container_value_type>::value ||
        -: 1652:                  is_same<_ItValueType, __node_value_type>::value),
        -: 1653:                  "__assign_multi may only be called with the containers value type"
        -: 1654:                  " or the nodes value type");
        -: 1655:    if (size() != 0)
        -: 1656:    {
        -: 1657:        _DetachedTreeCache __cache(this);
        -: 1658:        for (; __cache.__get() && __first != __last; ++__first) {
        -: 1659:            __cache.__get()->__value_ = *__first;
        -: 1660:            __node_insert_multi(__cache.__get());
        -: 1661:            __cache.__advance();
        -: 1662:        }
        -: 1663:    }
        -: 1664:    for (; __first != __last; ++__first)
        -: 1665:        __insert_multi(_NodeTypes::__get_value(*__first));
        -: 1666:}
        -: 1667:
        -: 1668:template <class _Tp, class _Compare, class _Allocator>
        -: 1669:__tree<_Tp, _Compare, _Allocator>::__tree(const __tree& __t)
        -: 1670:    : __begin_node_(__iter_pointer()),
        -: 1671:      __pair1_(__default_init_tag(), __node_traits::select_on_container_copy_construction(__t.__node_alloc())),
        -: 1672:      __pair3_(0, __t.value_comp())
        -: 1673:{
        -: 1674:    __begin_node() = __end_node();
        -: 1675:}
        -: 1676:
        -: 1677:template <class _Tp, class _Compare, class _Allocator>
        -: 1678:__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t)
        -: 1679:    _NOEXCEPT_(
        -: 1680:        is_nothrow_move_constructible<__node_allocator>::value &&
        -: 1681:        is_nothrow_move_constructible<value_compare>::value)
        -: 1682:    : __begin_node_(_VSTD::move(__t.__begin_node_)),
        -: 1683:      __pair1_(_VSTD::move(__t.__pair1_)),
        -: 1684:      __pair3_(_VSTD::move(__t.__pair3_))
        -: 1685:{
        -: 1686:    if (size() == 0)
        -: 1687:        __begin_node() = __end_node();
        -: 1688:    else
        -: 1689:    {
        -: 1690:        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1691:        __t.__begin_node() = __t.__end_node();
        -: 1692:        __t.__end_node()->__left_ = nullptr;
        -: 1693:        __t.size() = 0;
        -: 1694:    }
        -: 1695:}
        -: 1696:
        -: 1697:template <class _Tp, class _Compare, class _Allocator>
        -: 1698:__tree<_Tp, _Compare, _Allocator>::__tree(__tree&& __t, const allocator_type& __a)
        -: 1699:    : __pair1_(__default_init_tag(), __node_allocator(__a)),
        -: 1700:      __pair3_(0, _VSTD::move(__t.value_comp()))
        -: 1701:{
        -: 1702:    if (__a == __t.__alloc())
        -: 1703:    {
        -: 1704:        if (__t.size() == 0)
        -: 1705:            __begin_node() = __end_node();
        -: 1706:        else
        -: 1707:        {
        -: 1708:            __begin_node() = __t.__begin_node();
        -: 1709:            __end_node()->__left_ = __t.__end_node()->__left_;
        -: 1710:            __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1711:            size() = __t.size();
        -: 1712:            __t.__begin_node() = __t.__end_node();
        -: 1713:            __t.__end_node()->__left_ = nullptr;
        -: 1714:            __t.size() = 0;
        -: 1715:        }
        -: 1716:    }
        -: 1717:    else
        -: 1718:    {
        -: 1719:        __begin_node() = __end_node();
        -: 1720:    }
        -: 1721:}
        -: 1722:
        -: 1723:template <class _Tp, class _Compare, class _Allocator>
        -: 1724:void
        -: 1725:__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, true_type)
        -: 1726:    _NOEXCEPT_(is_nothrow_move_assignable<value_compare>::value &&
        -: 1727:               is_nothrow_move_assignable<__node_allocator>::value)
        -: 1728:{
        -: 1729:    destroy(static_cast<__node_pointer>(__end_node()->__left_));
        -: 1730:    __begin_node_ = __t.__begin_node_;
        -: 1731:    __pair1_.first() = __t.__pair1_.first();
        -: 1732:    __move_assign_alloc(__t);
        -: 1733:    __pair3_ = _VSTD::move(__t.__pair3_);
        -: 1734:    if (size() == 0)
        -: 1735:        __begin_node() = __end_node();
        -: 1736:    else
        -: 1737:    {
        -: 1738:        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1739:        __t.__begin_node() = __t.__end_node();
        -: 1740:        __t.__end_node()->__left_ = nullptr;
        -: 1741:        __t.size() = 0;
        -: 1742:    }
        -: 1743:}
        -: 1744:
        -: 1745:template <class _Tp, class _Compare, class _Allocator>
        -: 1746:void
        -: 1747:__tree<_Tp, _Compare, _Allocator>::__move_assign(__tree& __t, false_type)
        -: 1748:{
        -: 1749:    if (__node_alloc() == __t.__node_alloc())
        -: 1750:        __move_assign(__t, true_type());
        -: 1751:    else
        -: 1752:    {
        -: 1753:        value_comp() = _VSTD::move(__t.value_comp());
        -: 1754:        const_iterator __e = end();
        -: 1755:        if (size() != 0)
        -: 1756:        {
        -: 1757:            _DetachedTreeCache __cache(this);
        -: 1758:            while (__cache.__get() != nullptr && __t.size() != 0) {
        -: 1759:              __cache.__get()->__value_ = _VSTD::move(__t.remove(__t.begin())->__value_);
        -: 1760:              __node_insert_multi(__cache.__get());
        -: 1761:              __cache.__advance();
        -: 1762:            }
        -: 1763:        }
        -: 1764:        while (__t.size() != 0)
        -: 1765:            __insert_multi(__e, _NodeTypes::__move(__t.remove(__t.begin())->__value_));
        -: 1766:    }
        -: 1767:}
        -: 1768:
        -: 1769:template <class _Tp, class _Compare, class _Allocator>
        -: 1770:__tree<_Tp, _Compare, _Allocator>&
        -: 1771:__tree<_Tp, _Compare, _Allocator>::operator=(__tree&& __t)
        -: 1772:    _NOEXCEPT_(
        -: 1773:        __node_traits::propagate_on_container_move_assignment::value &&
        -: 1774:        is_nothrow_move_assignable<value_compare>::value &&
        -: 1775:        is_nothrow_move_assignable<__node_allocator>::value)
        -: 1776:
        -: 1777:{
        -: 1778:    __move_assign(__t, integral_constant<bool,
        -: 1779:                  __node_traits::propagate_on_container_move_assignment::value>());
        -: 1780:    return *this;
        -: 1781:}
        -: 1782:
        -: 1783:template <class _Tp, class _Compare, class _Allocator>
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEED1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEED2Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEED2Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEED1Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev called 1 returned 100% blocks executed 100%
        4: 1784:__tree<_Tp, _Compare, _Allocator>::~__tree()
        2: 1785:{
        -: 1786:    static_assert((is_copy_constructible<value_compare>::value),
        -: 1787:                 "Comparator must be copy-constructible.");
        2: 1788:  destroy(__root());
        4: 1789:}
        1: 1789-block  0
        1: 1789-block  1
    $$$$$: 1789-block  2
    $$$$$: 1789-block  3
        1: 1789-block  4
        1: 1789-block  5
        -: 1790:
        -: 1791:template <class _Tp, class _Compare, class _Allocator>
        -: 1792:void
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE7destroyEPNS_11__tree_nodeISD_PvEE called 1 returned 100% blocks executed 33%
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE called 1 returned 100% blocks executed 33%
        2: 1793:__tree<_Tp, _Compare, _Allocator>::destroy(__node_pointer __nd) _NOEXCEPT
        -: 1794:{
        2: 1795:    if (__nd != nullptr)
        1: 1795-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 1795-block  1
branch  2 never executed
branch  3 never executed
        1: 1795-block  2
branch  4 taken 1
branch  5 taken 0
        -: 1796:    {
    #####: 1797:        destroy(static_cast<__node_pointer>(__nd->__left_));
    #####: 1798:        destroy(static_cast<__node_pointer>(__nd->__right_));
    #####: 1799:        __node_allocator& __na = __node_alloc();
    #####: 1800:        __node_traits::destroy(__na, _NodeTypes::__get_ptr(__nd->__value_));
    $$$$$: 1800-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1800-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1800-block  2
    $$$$$: 1800-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 1800-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 1800-block  5
    $$$$$: 1800-block  6
branch  8 never executed
branch  9 never executed
    $$$$$: 1800-block  7
branch 10 never executed
branch 11 never executed
    $$$$$: 1800-block  8
    #####: 1801:        __node_traits::deallocate(__na, __nd, 1);
    #####: 1802:    }
    $$$$$: 1802-block  0
    $$$$$: 1802-block  1
    $$$$$: 1802-block  2
        2: 1803:}
        1: 1803-block  0
    $$$$$: 1803-block  1
        1: 1803-block  2
        -: 1804:
        -: 1805:template <class _Tp, class _Compare, class _Allocator>
        -: 1806:void
        -: 1807:__tree<_Tp, _Compare, _Allocator>::swap(__tree& __t)
        -: 1808:#if _LIBCPP_STD_VER <= 11
        -: 1809:        _NOEXCEPT_(
        -: 1810:            __is_nothrow_swappable<value_compare>::value
        -: 1811:            && (!__node_traits::propagate_on_container_swap::value ||
        -: 1812:                 __is_nothrow_swappable<__node_allocator>::value)
        -: 1813:            )
        -: 1814:#else
        -: 1815:        _NOEXCEPT_(__is_nothrow_swappable<value_compare>::value)
        -: 1816:#endif
        -: 1817:{
        -: 1818:    using _VSTD::swap;
        -: 1819:    swap(__begin_node_, __t.__begin_node_);
        -: 1820:    swap(__pair1_.first(), __t.__pair1_.first());
        -: 1821:    _VSTD::__swap_allocator(__node_alloc(), __t.__node_alloc());
        -: 1822:    __pair3_.swap(__t.__pair3_);
        -: 1823:    if (size() == 0)
        -: 1824:        __begin_node() = __end_node();
        -: 1825:    else
        -: 1826:        __end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__end_node());
        -: 1827:    if (__t.size() == 0)
        -: 1828:        __t.__begin_node() = __t.__end_node();
        -: 1829:    else
        -: 1830:        __t.__end_node()->__left_->__parent_ = static_cast<__parent_pointer>(__t.__end_node());
        -: 1831:}
        -: 1832:
        -: 1833:template <class _Tp, class _Compare, class _Allocator>
        -: 1834:void
        -: 1835:__tree<_Tp, _Compare, _Allocator>::clear() _NOEXCEPT
        -: 1836:{
        -: 1837:    destroy(__root());
        -: 1838:    size() = 0;
        -: 1839:    __begin_node() = __end_node();
        -: 1840:    __end_node()->__left_ = nullptr;
        -: 1841:}
        -: 1842:
        -: 1843:// Find lower_bound place to insert
        -: 1844:// Set __parent to parent of null leaf
        -: 1845:// Return reference to null leaf
        -: 1846:template <class _Tp, class _Compare, class _Allocator>
        -: 1847:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 1848:__tree<_Tp, _Compare, _Allocator>::__find_leaf_low(__parent_pointer& __parent,
        -: 1849:                                                   const key_type& __v)
        -: 1850:{
        -: 1851:    __node_pointer __nd = __root();
        -: 1852:    if (__nd != nullptr)
        -: 1853:    {
        -: 1854:        while (true)
        -: 1855:        {
        -: 1856:            if (value_comp()(__nd->__value_, __v))
        -: 1857:            {
        -: 1858:                if (__nd->__right_ != nullptr)
        -: 1859:                    __nd = static_cast<__node_pointer>(__nd->__right_);
        -: 1860:                else
        -: 1861:                {
        -: 1862:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1863:                    return __nd->__right_;
        -: 1864:                }
        -: 1865:            }
        -: 1866:            else
        -: 1867:            {
        -: 1868:                if (__nd->__left_ != nullptr)
        -: 1869:                    __nd = static_cast<__node_pointer>(__nd->__left_);
        -: 1870:                else
        -: 1871:                {
        -: 1872:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1873:                    return __parent->__left_;
        -: 1874:                }
        -: 1875:            }
        -: 1876:        }
        -: 1877:    }
        -: 1878:    __parent = static_cast<__parent_pointer>(__end_node());
        -: 1879:    return __parent->__left_;
        -: 1880:}
        -: 1881:
        -: 1882:// Find upper_bound place to insert
        -: 1883:// Set __parent to parent of null leaf
        -: 1884:// Return reference to null leaf
        -: 1885:template <class _Tp, class _Compare, class _Allocator>
        -: 1886:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 1887:__tree<_Tp, _Compare, _Allocator>::__find_leaf_high(__parent_pointer& __parent,
        -: 1888:                                                    const key_type& __v)
        -: 1889:{
        -: 1890:    __node_pointer __nd = __root();
        -: 1891:    if (__nd != nullptr)
        -: 1892:    {
        -: 1893:        while (true)
        -: 1894:        {
        -: 1895:            if (value_comp()(__v, __nd->__value_))
        -: 1896:            {
        -: 1897:                if (__nd->__left_ != nullptr)
        -: 1898:                    __nd = static_cast<__node_pointer>(__nd->__left_);
        -: 1899:                else
        -: 1900:                {
        -: 1901:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1902:                    return __parent->__left_;
        -: 1903:                }
        -: 1904:            }
        -: 1905:            else
        -: 1906:            {
        -: 1907:                if (__nd->__right_ != nullptr)
        -: 1908:                    __nd = static_cast<__node_pointer>(__nd->__right_);
        -: 1909:                else
        -: 1910:                {
        -: 1911:                    __parent = static_cast<__parent_pointer>(__nd);
        -: 1912:                    return __nd->__right_;
        -: 1913:                }
        -: 1914:            }
        -: 1915:        }
        -: 1916:    }
        -: 1917:    __parent = static_cast<__parent_pointer>(__end_node());
        -: 1918:    return __parent->__left_;
        -: 1919:}
        -: 1920:
        -: 1921:// Find leaf place to insert closest to __hint
        -: 1922:// First check prior to __hint.
        -: 1923:// Next check after __hint.
        -: 1924:// Next do O(log N) search.
        -: 1925:// Set __parent to parent of null leaf
        -: 1926:// Return reference to null leaf
        -: 1927:template <class _Tp, class _Compare, class _Allocator>
        -: 1928:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 1929:__tree<_Tp, _Compare, _Allocator>::__find_leaf(const_iterator __hint,
        -: 1930:                                               __parent_pointer& __parent,
        -: 1931:                                               const key_type& __v)
        -: 1932:{
        -: 1933:    if (__hint == end() || !value_comp()(*__hint, __v))  // check before
        -: 1934:    {
        -: 1935:        // __v <= *__hint
        -: 1936:        const_iterator __prior = __hint;
        -: 1937:        if (__prior == begin() || !value_comp()(__v, *--__prior))
        -: 1938:        {
        -: 1939:            // *prev(__hint) <= __v <= *__hint
        -: 1940:            if (__hint.__ptr_->__left_ == nullptr)
        -: 1941:            {
        -: 1942:                __parent = static_cast<__parent_pointer>(__hint.__ptr_);
        -: 1943:                return __parent->__left_;
        -: 1944:            }
        -: 1945:            else
        -: 1946:            {
        -: 1947:                __parent = static_cast<__parent_pointer>(__prior.__ptr_);
        -: 1948:                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;
        -: 1949:            }
        -: 1950:        }
        -: 1951:        // __v < *prev(__hint)
        -: 1952:        return __find_leaf_high(__parent, __v);
        -: 1953:    }
        -: 1954:    // else __v > *__hint
        -: 1955:    return __find_leaf_low(__parent, __v);
        -: 1956:}
        -: 1957:
        -: 1958:// Find place to insert if __v doesn't exist
        -: 1959:// Set __parent to parent of null leaf
        -: 1960:// Return reference to null leaf
        -: 1961:// If __v exists, set parent to node of __v and return reference to node of __v
        -: 1962:template <class _Tp, class _Compare, class _Allocator>
        -: 1963:template <class _Key>
        -: 1964:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISD_EERKT_ called 1 returned 100% blocks executed 17%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISC_EERKT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE12__find_equalIS5_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISP_EERKT_ called 3 returned 100% blocks executed 58%
        4: 1965:__tree<_Tp, _Compare, _Allocator>::__find_equal(__parent_pointer& __parent,
        -: 1966:                                                const _Key& __v)
        -: 1967:{
        4: 1968:    __node_pointer __nd = __root();
        4: 1969:    __node_base_pointer* __nd_ptr = __root_ptr();
        4: 1970:    if (__nd != nullptr)
        1: 1970-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 1970-block  1
branch  2 never executed
branch  3 never executed
        3: 1970-block  2
branch  4 taken 2
branch  5 taken 1
        -: 1971:    {
        3: 1972:        while (true)
    $$$$$: 1972-block  0
    $$$$$: 1972-block  1
    $$$$$: 1972-block  2
    $$$$$: 1972-block  3
        2: 1972-block  4
        1: 1972-block  5
        -: 1973:        {
        3: 1974:            if (value_comp()(__v, __nd->__value_))
    $$$$$: 1974-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1974-block  1
branch  2 never executed
branch  3 never executed
        3: 1974-block  2
branch  4 taken 3
branch  5 taken 0
        -: 1975:            {
        3: 1976:                if (__nd->__left_ != nullptr) {
    $$$$$: 1976-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1976-block  1
branch  2 never executed
branch  3 never executed
        3: 1976-block  2
branch  4 taken 1
branch  5 taken 2
        1: 1977:                    __nd_ptr = _VSTD::addressof(__nd->__left_);
        1: 1978:                    __nd = static_cast<__node_pointer>(__nd->__left_);
        1: 1979:                } else {
    $$$$$: 1979-block  0
    $$$$$: 1979-block  1
        1: 1979-block  2
        2: 1980:                    __parent = static_cast<__parent_pointer>(__nd);
        2: 1981:                    return __parent->__left_;
    $$$$$: 1981-block  0
    $$$$$: 1981-block  1
        2: 1981-block  2
        -: 1982:                }
        1: 1983:            }
    $$$$$: 1983-block  0
    $$$$$: 1983-block  1
        1: 1983-block  2
    #####: 1984:            else if (value_comp()(__nd->__value_, __v))
    $$$$$: 1984-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1984-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1984-block  2
branch  4 never executed
branch  5 never executed
        -: 1985:            {
    #####: 1986:                if (__nd->__right_ != nullptr) {
    $$$$$: 1986-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1986-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1986-block  2
branch  4 never executed
branch  5 never executed
    #####: 1987:                    __nd_ptr = _VSTD::addressof(__nd->__right_);
    #####: 1988:                    __nd = static_cast<__node_pointer>(__nd->__right_);
    #####: 1989:                } else {
    $$$$$: 1989-block  0
    $$$$$: 1989-block  1
    $$$$$: 1989-block  2
    #####: 1990:                    __parent = static_cast<__parent_pointer>(__nd);
    #####: 1991:                    return __nd->__right_;
    $$$$$: 1991-block  0
    $$$$$: 1991-block  1
    $$$$$: 1991-block  2
        -: 1992:                }
    #####: 1993:            }
    $$$$$: 1993-block  0
    $$$$$: 1993-block  1
    $$$$$: 1993-block  2
        -: 1994:            else
        -: 1995:            {
    #####: 1996:                __parent = static_cast<__parent_pointer>(__nd);
    #####: 1997:                return *__nd_ptr;
    $$$$$: 1997-block  0
    $$$$$: 1997-block  1
    $$$$$: 1997-block  2
        -: 1998:            }
        -: 1999:        }
        -: 2000:    }
        2: 2001:    __parent = static_cast<__parent_pointer>(__end_node());
        2: 2002:    return __parent->__left_;
        1: 2002-block  0
    $$$$$: 2002-block  1
        1: 2002-block  2
        4: 2003:}
        1: 2003-block  0
    $$$$$: 2003-block  1
        3: 2003-block  2
        -: 2004:
        -: 2005:// Find place to insert if __v doesn't exist
        -: 2006:// First check prior to __hint.
        -: 2007:// Next check after __hint.
        -: 2008:// Next do O(log N) search.
        -: 2009:// Set __parent to parent of null leaf
        -: 2010:// Return reference to null leaf
        -: 2011:// If __v exists, set parent to node of __v and return reference to node of __v
        -: 2012:template <class _Tp, class _Compare, class _Allocator>
        -: 2013:template <class _Key>
        -: 2014:typename __tree<_Tp, _Compare, _Allocator>::__node_base_pointer&
        -: 2015:__tree<_Tp, _Compare, _Allocator>::__find_equal(const_iterator __hint,
        -: 2016:                                                __parent_pointer& __parent,
        -: 2017:                                                __node_base_pointer& __dummy,
        -: 2018:                                                const _Key& __v)
        -: 2019:{
        -: 2020:    if (__hint == end() || value_comp()(__v, *__hint))  // check before
        -: 2021:    {
        -: 2022:        // __v < *__hint
        -: 2023:        const_iterator __prior = __hint;
        -: 2024:        if (__prior == begin() || value_comp()(*--__prior, __v))
        -: 2025:        {
        -: 2026:            // *prev(__hint) < __v < *__hint
        -: 2027:            if (__hint.__ptr_->__left_ == nullptr)
        -: 2028:            {
        -: 2029:                __parent = static_cast<__parent_pointer>(__hint.__ptr_);
        -: 2030:                return __parent->__left_;
        -: 2031:            }
        -: 2032:            else
        -: 2033:            {
        -: 2034:                __parent = static_cast<__parent_pointer>(__prior.__ptr_);
        -: 2035:                return static_cast<__node_base_pointer>(__prior.__ptr_)->__right_;
        -: 2036:            }
        -: 2037:        }
        -: 2038:        // __v <= *prev(__hint)
        -: 2039:        return __find_equal(__parent, __v);
        -: 2040:    }
        -: 2041:    else if (value_comp()(*__hint, __v))  // check after
        -: 2042:    {
        -: 2043:        // *__hint < __v
        -: 2044:        const_iterator __next = _VSTD::next(__hint);
        -: 2045:        if (__next == end() || value_comp()(__v, *__next))
        -: 2046:        {
        -: 2047:            // *__hint < __v < *_VSTD::next(__hint)
        -: 2048:            if (__hint.__get_np()->__right_ == nullptr)
        -: 2049:            {
        -: 2050:                __parent = static_cast<__parent_pointer>(__hint.__ptr_);
        -: 2051:                return static_cast<__node_base_pointer>(__hint.__ptr_)->__right_;
        -: 2052:            }
        -: 2053:            else
        -: 2054:            {
        -: 2055:                __parent = static_cast<__parent_pointer>(__next.__ptr_);
        -: 2056:                return __parent->__left_;
        -: 2057:            }
        -: 2058:        }
        -: 2059:        // *next(__hint) <= __v
        -: 2060:        return __find_equal(__parent, __v);
        -: 2061:    }
        -: 2062:    // else __v == *__hint
        -: 2063:    __parent = static_cast<__parent_pointer>(__hint.__ptr_);
        -: 2064:    __dummy = static_cast<__node_base_pointer>(__hint.__ptr_);
        -: 2065:    return __dummy;
        -: 2066:}
        -: 2067:
        -: 2068:template <class _Tp, class _Compare, class _Allocator>
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSD_SD_ called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSC_SC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSP_SP_ called 3 returned 100% blocks executed 100%
        4: 2069:void __tree<_Tp, _Compare, _Allocator>::__insert_node_at(
        -: 2070:    __parent_pointer __parent, __node_base_pointer& __child,
        -: 2071:    __node_base_pointer __new_node) _NOEXCEPT
        -: 2072:{
        4: 2073:    __new_node->__left_   = nullptr;
        4: 2074:    __new_node->__right_  = nullptr;
        4: 2075:    __new_node->__parent_ = __parent;
        -: 2076:    // __new_node->__is_black_ is initialized in __tree_balance_after_insert
        4: 2077:    __child = __new_node;
        4: 2078:    if (__begin_node()->__left_ != nullptr)
        1: 2078-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 2078-block  1
branch  2 never executed
branch  3 never executed
        3: 2078-block  2
branch  4 taken 3
branch  5 taken 0
        4: 2079:        __begin_node() = static_cast<__iter_pointer>(__begin_node()->__left_);
        1: 2079-block  0
    $$$$$: 2079-block  1
        3: 2079-block  2
        4: 2080:    _VSTD::__tree_balance_after_insert(__end_node()->__left_, __child);
        4: 2081:    ++size();
        4: 2082:}
        1: 2082-block  0
    $$$$$: 2082-block  1
        3: 2082-block  2
        -: 2083:
        -: 2084:template <class _Tp, class _Compare, class _Allocator>
        -: 2085:template <class _Key, class... _Args>
        -: 2086:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS3_JRKS3_EEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_ called 1 returned 100% blocks executed 100%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE25__emplace_unique_key_argsIS2_JS2_EEENS_4pairINS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEElEEbEERKT_DpOT0_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE25__emplace_unique_key_argsIS5_JNS2_IKS5_SC_EEEEENS2_INS_15__tree_iteratorISD_PNS_11__tree_nodeISD_PvEElEEbEERKT_DpOT0_ called 3 returned 100% blocks executed 100%
        4: 2087:__tree<_Tp, _Compare, _Allocator>::__emplace_unique_key_args(_Key const& __k, _Args&&... __args)
        -: 2088:{
        -: 2089:    __parent_pointer __parent;
        4: 2090:    __node_base_pointer& __child = __find_equal(__parent, __k);
        4: 2091:    __node_pointer __r = static_cast<__node_pointer>(__child);
        4: 2092:    bool __inserted = false;
        4: 2093:    if (__child == nullptr)
        1: 2093-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 2093-block  1
branch  2 never executed
branch  3 never executed
        3: 2093-block  2
branch  4 taken 3
branch  5 taken 0
        -: 2094:    {
        4: 2095:        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        4: 2096:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        4: 2097:        __r = __h.release();
        4: 2098:        __inserted = true;
        4: 2099:    }
        1: 2099-block  0
    $$$$$: 2099-block  1
        3: 2099-block  2
        4: 2100:    return pair<iterator, bool>(iterator(__r), __inserted);
        1: 2100-block  0
    $$$$$: 2100-block  1
        3: 2100-block  2
        -: 2101:}
        -: 2102:
        -: 2103:template <class _Tp, class _Compare, class _Allocator>
        -: 2104:template <class _Key, class... _Args>
        -: 2105:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2106:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_key_args(
        -: 2107:    const_iterator __p, _Key const& __k, _Args&&... __args)
        -: 2108:{
        -: 2109:    __parent_pointer __parent;
        -: 2110:    __node_base_pointer __dummy;
        -: 2111:    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __k);
        -: 2112:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2113:    bool __inserted = false;
        -: 2114:    if (__child == nullptr)
        -: 2115:    {
        -: 2116:        __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2117:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2118:        __r = __h.release();
        -: 2119:        __inserted = true;
        -: 2120:    }
        -: 2121:    return pair<iterator, bool>(iterator(__r), __inserted);
        -: 2122:}
        -: 2123:
        -: 2124:template <class _Tp, class _Compare, class _Allocator>
        -: 2125:template <class ..._Args>
        -: 2126:typename __tree<_Tp, _Compare, _Allocator>::__node_holder
function _ZNSt3__16__treeIN7doctest6detail8TestCaseENS_4lessIS3_EENS_9allocatorIS3_EEE16__construct_nodeIJRKS3_EEENS_10unique_ptrINS_11__tree_nodeIS3_PvEENS_22__tree_node_destructorINS6_ISF_EEEEEEDpOT_ called 1 returned 100% blocks executed 50%
function _ZNSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeIJS2_EEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS5_ISC_EEEEEEDpOT_ called 0 returned 0% blocks executed 0%
function _ZNSt3__16__treeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS3_9IReporterERKNS3_14ContextOptionsEEEENS_19__map_value_compareIS5_SD_NS_4lessIS5_EELb1EEENS_9allocatorISD_EEE16__construct_nodeIJNS2_IKS5_SC_EEEEENS_10unique_ptrINS_11__tree_nodeISD_PvEENS_22__tree_node_destructorINSI_ISR_EEEEEEDpOT_ called 3 returned 100% blocks executed 57%
        4: 2127:__tree<_Tp, _Compare, _Allocator>::__construct_node(_Args&& ...__args)
        -: 2128:{
        -: 2129:    static_assert(!__is_tree_value_type<_Args...>::value,
        -: 2130:                  "Cannot construct from __value_type");
        4: 2131:    __node_allocator& __na = __node_alloc();
        4: 2132:    __node_holder __h(__node_traits::allocate(__na, 1), _Dp(__na));
        4: 2133:    __node_traits::construct(__na, _NodeTypes::__get_ptr(__h->__value_), _VSTD::forward<_Args>(__args)...);
        1: 2133-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 2133-block  1
branch  2 never executed
branch  3 never executed
        3: 2133-block  2
branch  4 taken 3
branch  5 taken 0
        3: 2133-block  3
branch  6 taken 3
branch  7 taken 0
        4: 2134:    __h.get_deleter().__value_constructed = true;
        4: 2135:    return __h;
        4: 2136:}
        1: 2136-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 2136-block  1
    $$$$$: 2136-block  2
        1: 2136-block  3
    $$$$$: 2136-block  4
    $$$$$: 2136-block  5
branch  2 never executed
branch  3 never executed
    $$$$$: 2136-block  6
    $$$$$: 2136-block  7
    $$$$$: 2136-block  8
    $$$$$: 2136-block  9
        3: 2136-block 10
branch  4 taken 3
branch  5 taken 0
    $$$$$: 2136-block 11
    $$$$$: 2136-block 12
        3: 2136-block 13
    $$$$$: 2136-block 14
        -: 2137:
        -: 2138:
        -: 2139:template <class _Tp, class _Compare, class _Allocator>
        -: 2140:template <class... _Args>
        -: 2141:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2142:__tree<_Tp, _Compare, _Allocator>::__emplace_unique_impl(_Args&&... __args)
        -: 2143:{
        -: 2144:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2145:    __parent_pointer __parent;
        -: 2146:    __node_base_pointer& __child = __find_equal(__parent, __h->__value_);
        -: 2147:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2148:    bool __inserted = false;
        -: 2149:    if (__child == nullptr)
        -: 2150:    {
        -: 2151:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2152:        __r = __h.release();
        -: 2153:        __inserted = true;
        -: 2154:    }
        -: 2155:    return pair<iterator, bool>(iterator(__r), __inserted);
        -: 2156:}
        -: 2157:
        -: 2158:template <class _Tp, class _Compare, class _Allocator>
        -: 2159:template <class... _Args>
        -: 2160:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2161:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_unique_impl(const_iterator __p, _Args&&... __args)
        -: 2162:{
        -: 2163:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2164:    __parent_pointer __parent;
        -: 2165:    __node_base_pointer __dummy;
        -: 2166:    __node_base_pointer& __child = __find_equal(__p, __parent, __dummy, __h->__value_);
        -: 2167:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2168:    if (__child == nullptr)
        -: 2169:    {
        -: 2170:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2171:        __r = __h.release();
        -: 2172:    }
        -: 2173:    return iterator(__r);
        -: 2174:}
        -: 2175:
        -: 2176:template <class _Tp, class _Compare, class _Allocator>
        -: 2177:template <class... _Args>
        -: 2178:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2179:__tree<_Tp, _Compare, _Allocator>::__emplace_multi(_Args&&... __args)
        -: 2180:{
        -: 2181:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2182:    __parent_pointer __parent;
        -: 2183:    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__h->__value_));
        -: 2184:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2185:    return iterator(static_cast<__node_pointer>(__h.release()));
        -: 2186:}
        -: 2187:
        -: 2188:template <class _Tp, class _Compare, class _Allocator>
        -: 2189:template <class... _Args>
        -: 2190:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2191:__tree<_Tp, _Compare, _Allocator>::__emplace_hint_multi(const_iterator __p,
        -: 2192:                                                        _Args&&... __args)
        -: 2193:{
        -: 2194:    __node_holder __h = __construct_node(_VSTD::forward<_Args>(__args)...);
        -: 2195:    __parent_pointer __parent;
        -: 2196:    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__h->__value_));
        -: 2197:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));
        -: 2198:    return iterator(static_cast<__node_pointer>(__h.release()));
        -: 2199:}
        -: 2200:
        -: 2201:template <class _Tp, class _Compare, class _Allocator>
        -: 2202:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator, bool>
        -: 2203:__tree<_Tp, _Compare, _Allocator>::__node_assign_unique(const __container_value_type& __v, __node_pointer __nd)
        -: 2204:{
        -: 2205:    __parent_pointer __parent;
        -: 2206:    __node_base_pointer& __child = __find_equal(__parent, _NodeTypes::__get_key(__v));
        -: 2207:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2208:    bool __inserted = false;
        -: 2209:    if (__child == nullptr)
        -: 2210:    {
        -: 2211:        __nd->__value_ = __v;
        -: 2212:        __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2213:        __r = __nd;
        -: 2214:        __inserted = true;
        -: 2215:    }
        -: 2216:    return pair<iterator, bool>(iterator(__r), __inserted);
        -: 2217:}
        -: 2218:
        -: 2219:
        -: 2220:template <class _Tp, class _Compare, class _Allocator>
        -: 2221:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2222:__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(__node_pointer __nd)
        -: 2223:{
        -: 2224:    __parent_pointer __parent;
        -: 2225:    __node_base_pointer& __child = __find_leaf_high(__parent, _NodeTypes::__get_key(__nd->__value_));
        -: 2226:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2227:    return iterator(__nd);
        -: 2228:}
        -: 2229:
        -: 2230:template <class _Tp, class _Compare, class _Allocator>
        -: 2231:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2232:__tree<_Tp, _Compare, _Allocator>::__node_insert_multi(const_iterator __p,
        -: 2233:                                                       __node_pointer __nd)
        -: 2234:{
        -: 2235:    __parent_pointer __parent;
        -: 2236:    __node_base_pointer& __child = __find_leaf(__p, __parent, _NodeTypes::__get_key(__nd->__value_));
        -: 2237:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__nd));
        -: 2238:    return iterator(__nd);
        -: 2239:}
        -: 2240:
        -: 2241:template <class _Tp, class _Compare, class _Allocator>
        -: 2242:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2243:__tree<_Tp, _Compare, _Allocator>::__remove_node_pointer(__node_pointer __ptr) _NOEXCEPT
        -: 2244:{
        -: 2245:    iterator __r(__ptr);
        -: 2246:    ++__r;
        -: 2247:    if (__begin_node() == __ptr)
        -: 2248:        __begin_node() = __r.__ptr_;
        -: 2249:    --size();
        -: 2250:    _VSTD::__tree_remove(__end_node()->__left_,
        -: 2251:                         static_cast<__node_base_pointer>(__ptr));
        -: 2252:    return __r;
        -: 2253:}
        -: 2254:
        -: 2255:#if _LIBCPP_STD_VER > 14
        -: 2256:template <class _Tp, class _Compare, class _Allocator>
        -: 2257:template <class _NodeHandle, class _InsertReturnType>
        -: 2258:_LIBCPP_INLINE_VISIBILITY
        -: 2259:_InsertReturnType
        -: 2260:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_unique(
        -: 2261:    _NodeHandle&& __nh)
        -: 2262:{
        -: 2263:    if (__nh.empty())
        -: 2264:        return _InsertReturnType{end(), false, _NodeHandle()};
        -: 2265:
        -: 2266:    __node_pointer __ptr = __nh.__ptr_;
        -: 2267:    __parent_pointer __parent;
        -: 2268:    __node_base_pointer& __child = __find_equal(__parent,
        -: 2269:                                                __ptr->__value_);
        -: 2270:    if (__child != nullptr)
        -: 2271:        return _InsertReturnType{
        -: 2272:            iterator(static_cast<__node_pointer>(__child)),
        -: 2273:            false, _VSTD::move(__nh)};
        -: 2274:
        -: 2275:    __insert_node_at(__parent, __child,
        -: 2276:                     static_cast<__node_base_pointer>(__ptr));
        -: 2277:    __nh.__release_ptr();
        -: 2278:    return _InsertReturnType{iterator(__ptr), true, _NodeHandle()};
        -: 2279:}
        -: 2280:
        -: 2281:template <class _Tp, class _Compare, class _Allocator>
        -: 2282:template <class _NodeHandle>
        -: 2283:_LIBCPP_INLINE_VISIBILITY
        -: 2284:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2285:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_unique(
        -: 2286:    const_iterator __hint, _NodeHandle&& __nh)
        -: 2287:{
        -: 2288:    if (__nh.empty())
        -: 2289:        return end();
        -: 2290:
        -: 2291:    __node_pointer __ptr = __nh.__ptr_;
        -: 2292:    __parent_pointer __parent;
        -: 2293:    __node_base_pointer __dummy;
        -: 2294:    __node_base_pointer& __child = __find_equal(__hint, __parent, __dummy,
        -: 2295:                                                __ptr->__value_);
        -: 2296:    __node_pointer __r = static_cast<__node_pointer>(__child);
        -: 2297:    if (__child == nullptr)
        -: 2298:    {
        -: 2299:        __insert_node_at(__parent, __child,
        -: 2300:                         static_cast<__node_base_pointer>(__ptr));
        -: 2301:        __r = __ptr;
        -: 2302:        __nh.__release_ptr();
        -: 2303:    }
        -: 2304:    return iterator(__r);
        -: 2305:}
        -: 2306:
        -: 2307:template <class _Tp, class _Compare, class _Allocator>
        -: 2308:template <class _NodeHandle>
        -: 2309:_LIBCPP_INLINE_VISIBILITY
        -: 2310:_NodeHandle
        -: 2311:__tree<_Tp, _Compare, _Allocator>::__node_handle_extract(key_type const& __key)
        -: 2312:{
        -: 2313:    iterator __it = find(__key);
        -: 2314:    if (__it == end())
        -: 2315:        return _NodeHandle();
        -: 2316:    return __node_handle_extract<_NodeHandle>(__it);
        -: 2317:}
        -: 2318:
        -: 2319:template <class _Tp, class _Compare, class _Allocator>
        -: 2320:template <class _NodeHandle>
        -: 2321:_LIBCPP_INLINE_VISIBILITY
        -: 2322:_NodeHandle
        -: 2323:__tree<_Tp, _Compare, _Allocator>::__node_handle_extract(const_iterator __p)
        -: 2324:{
        -: 2325:    __node_pointer __np = __p.__get_np();
        -: 2326:    __remove_node_pointer(__np);
        -: 2327:    return _NodeHandle(__np, __alloc());
        -: 2328:}
        -: 2329:
        -: 2330:template <class _Tp, class _Compare, class _Allocator>
        -: 2331:template <class _Tree>
        -: 2332:_LIBCPP_INLINE_VISIBILITY
        -: 2333:void
        -: 2334:__tree<_Tp, _Compare, _Allocator>::__node_handle_merge_unique(_Tree& __source)
        -: 2335:{
        -: 2336:    static_assert(is_same<typename _Tree::__node_pointer, __node_pointer>::value, "");
        -: 2337:
        -: 2338:    for (typename _Tree::iterator __i = __source.begin();
        -: 2339:         __i != __source.end();)
        -: 2340:    {
        -: 2341:        __node_pointer __src_ptr = __i.__get_np();
        -: 2342:        __parent_pointer __parent;
        -: 2343:        __node_base_pointer& __child =
        -: 2344:            __find_equal(__parent, _NodeTypes::__get_key(__src_ptr->__value_));
        -: 2345:        ++__i;
        -: 2346:        if (__child != nullptr)
        -: 2347:            continue;
        -: 2348:        __source.__remove_node_pointer(__src_ptr);
        -: 2349:        __insert_node_at(__parent, __child,
        -: 2350:                         static_cast<__node_base_pointer>(__src_ptr));
        -: 2351:    }
        -: 2352:}
        -: 2353:
        -: 2354:template <class _Tp, class _Compare, class _Allocator>
        -: 2355:template <class _NodeHandle>
        -: 2356:_LIBCPP_INLINE_VISIBILITY
        -: 2357:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2358:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_multi(_NodeHandle&& __nh)
        -: 2359:{
        -: 2360:    if (__nh.empty())
        -: 2361:        return end();
        -: 2362:    __node_pointer __ptr = __nh.__ptr_;
        -: 2363:    __parent_pointer __parent;
        -: 2364:    __node_base_pointer& __child = __find_leaf_high(
        -: 2365:        __parent, _NodeTypes::__get_key(__ptr->__value_));
        -: 2366:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__ptr));
        -: 2367:    __nh.__release_ptr();
        -: 2368:    return iterator(__ptr);
        -: 2369:}
        -: 2370:
        -: 2371:template <class _Tp, class _Compare, class _Allocator>
        -: 2372:template <class _NodeHandle>
        -: 2373:_LIBCPP_INLINE_VISIBILITY
        -: 2374:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2375:__tree<_Tp, _Compare, _Allocator>::__node_handle_insert_multi(
        -: 2376:    const_iterator __hint, _NodeHandle&& __nh)
        -: 2377:{
        -: 2378:    if (__nh.empty())
        -: 2379:        return end();
        -: 2380:
        -: 2381:    __node_pointer __ptr = __nh.__ptr_;
        -: 2382:    __parent_pointer __parent;
        -: 2383:    __node_base_pointer& __child = __find_leaf(__hint, __parent,
        -: 2384:                                               _NodeTypes::__get_key(__ptr->__value_));
        -: 2385:    __insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__ptr));
        -: 2386:    __nh.__release_ptr();
        -: 2387:    return iterator(__ptr);
        -: 2388:}
        -: 2389:
        -: 2390:template <class _Tp, class _Compare, class _Allocator>
        -: 2391:template <class _Tree>
        -: 2392:_LIBCPP_INLINE_VISIBILITY
        -: 2393:void
        -: 2394:__tree<_Tp, _Compare, _Allocator>::__node_handle_merge_multi(_Tree& __source)
        -: 2395:{
        -: 2396:    static_assert(is_same<typename _Tree::__node_pointer, __node_pointer>::value, "");
        -: 2397:
        -: 2398:    for (typename _Tree::iterator __i = __source.begin();
        -: 2399:         __i != __source.end();)
        -: 2400:    {
        -: 2401:        __node_pointer __src_ptr = __i.__get_np();
        -: 2402:        __parent_pointer __parent;
        -: 2403:        __node_base_pointer& __child = __find_leaf_high(
        -: 2404:            __parent, _NodeTypes::__get_key(__src_ptr->__value_));
        -: 2405:        ++__i;
        -: 2406:        __source.__remove_node_pointer(__src_ptr);
        -: 2407:        __insert_node_at(__parent, __child,
        -: 2408:                         static_cast<__node_base_pointer>(__src_ptr));
        -: 2409:    }
        -: 2410:}
        -: 2411:
        -: 2412:#endif // _LIBCPP_STD_VER > 14
        -: 2413:
        -: 2414:template <class _Tp, class _Compare, class _Allocator>
        -: 2415:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2416:__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __p)
        -: 2417:{
        -: 2418:    __node_pointer __np = __p.__get_np();
        -: 2419:    iterator __r = __remove_node_pointer(__np);
        -: 2420:    __node_allocator& __na = __node_alloc();
        -: 2421:    __node_traits::destroy(__na, _NodeTypes::__get_ptr(
        -: 2422:        const_cast<__node_value_type&>(*__p)));
        -: 2423:    __node_traits::deallocate(__na, __np, 1);
        -: 2424:    return __r;
        -: 2425:}
        -: 2426:
        -: 2427:template <class _Tp, class _Compare, class _Allocator>
        -: 2428:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2429:__tree<_Tp, _Compare, _Allocator>::erase(const_iterator __f, const_iterator __l)
        -: 2430:{
        -: 2431:    while (__f != __l)
        -: 2432:        __f = erase(__f);
        -: 2433:    return iterator(__l.__ptr_);
        -: 2434:}
        -: 2435:
        -: 2436:template <class _Tp, class _Compare, class _Allocator>
        -: 2437:template <class _Key>
        -: 2438:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2439:__tree<_Tp, _Compare, _Allocator>::__erase_unique(const _Key& __k)
        -: 2440:{
        -: 2441:    iterator __i = find(__k);
        -: 2442:    if (__i == end())
        -: 2443:        return 0;
        -: 2444:    erase(__i);
        -: 2445:    return 1;
        -: 2446:}
        -: 2447:
        -: 2448:template <class _Tp, class _Compare, class _Allocator>
        -: 2449:template <class _Key>
        -: 2450:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2451:__tree<_Tp, _Compare, _Allocator>::__erase_multi(const _Key& __k)
        -: 2452:{
        -: 2453:    pair<iterator, iterator> __p = __equal_range_multi(__k);
        -: 2454:    size_type __r = 0;
        -: 2455:    for (; __p.first != __p.second; ++__r)
        -: 2456:        __p.first = erase(__p.first);
        -: 2457:    return __r;
        -: 2458:}
        -: 2459:
        -: 2460:template <class _Tp, class _Compare, class _Allocator>
        -: 2461:template <class _Key>
        -: 2462:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2463:__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v)
        -: 2464:{
        -: 2465:    iterator __p = __lower_bound(__v, __root(), __end_node());
        -: 2466:    if (__p != end() && !value_comp()(__v, *__p))
        -: 2467:        return __p;
        -: 2468:    return end();
        -: 2469:}
        -: 2470:
        -: 2471:template <class _Tp, class _Compare, class _Allocator>
        -: 2472:template <class _Key>
        -: 2473:typename __tree<_Tp, _Compare, _Allocator>::const_iterator
        -: 2474:__tree<_Tp, _Compare, _Allocator>::find(const _Key& __v) const
        -: 2475:{
        -: 2476:    const_iterator __p = __lower_bound(__v, __root(), __end_node());
        -: 2477:    if (__p != end() && !value_comp()(__v, *__p))
        -: 2478:        return __p;
        -: 2479:    return end();
        -: 2480:}
        -: 2481:
        -: 2482:template <class _Tp, class _Compare, class _Allocator>
        -: 2483:template <class _Key>
        -: 2484:typename __tree<_Tp, _Compare, _Allocator>::size_type
function _ZNKSt3__16__treeIN7doctest6StringENS_4lessIS2_EENS_9allocatorIS2_EEE14__count_uniqueIS2_EEmRKT_ called 0 returned 0% blocks executed 0%
    #####: 2485:__tree<_Tp, _Compare, _Allocator>::__count_unique(const _Key& __k) const
        -: 2486:{
    #####: 2487:    __node_pointer __rt = __root();
    #####: 2488:    while (__rt != nullptr)
    $$$$$: 2488-block  0
    $$$$$: 2488-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 2488-block  2
        -: 2489:    {
    #####: 2490:        if (value_comp()(__k, __rt->__value_))
    $$$$$: 2490-block  0
branch  0 never executed
branch  1 never executed
        -: 2491:        {
    #####: 2492:            __rt = static_cast<__node_pointer>(__rt->__left_);
    #####: 2493:        }
    $$$$$: 2493-block  0
    #####: 2494:        else if (value_comp()(__rt->__value_, __k))
    $$$$$: 2494-block  0
branch  0 never executed
branch  1 never executed
    #####: 2495:            __rt = static_cast<__node_pointer>(__rt->__right_);
    $$$$$: 2495-block  0
        -: 2496:        else
    #####: 2497:            return 1;
    $$$$$: 2497-block  0
        -: 2498:    }
    #####: 2499:    return 0;
    $$$$$: 2499-block  0
    #####: 2500:}
    $$$$$: 2500-block  0
        -: 2501:
        -: 2502:template <class _Tp, class _Compare, class _Allocator>
        -: 2503:template <class _Key>
        -: 2504:typename __tree<_Tp, _Compare, _Allocator>::size_type
        -: 2505:__tree<_Tp, _Compare, _Allocator>::__count_multi(const _Key& __k) const
        -: 2506:{
        -: 2507:    __iter_pointer __result = __end_node();
        -: 2508:    __node_pointer __rt = __root();
        -: 2509:    while (__rt != nullptr)
        -: 2510:    {
        -: 2511:        if (value_comp()(__k, __rt->__value_))
        -: 2512:        {
        -: 2513:            __result = static_cast<__iter_pointer>(__rt);
        -: 2514:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2515:        }
        -: 2516:        else if (value_comp()(__rt->__value_, __k))
        -: 2517:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2518:        else
        -: 2519:            return _VSTD::distance(
        -: 2520:                __lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),
        -: 2521:                __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result)
        -: 2522:            );
        -: 2523:    }
        -: 2524:    return 0;
        -: 2525:}
        -: 2526:
        -: 2527:template <class _Tp, class _Compare, class _Allocator>
        -: 2528:template <class _Key>
        -: 2529:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2530:__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,
        -: 2531:                                                 __node_pointer __root,
        -: 2532:                                                 __iter_pointer __result)
        -: 2533:{
        -: 2534:    while (__root != nullptr)
        -: 2535:    {
        -: 2536:        if (!value_comp()(__root->__value_, __v))
        -: 2537:        {
        -: 2538:            __result = static_cast<__iter_pointer>(__root);
        -: 2539:            __root = static_cast<__node_pointer>(__root->__left_);
        -: 2540:        }
        -: 2541:        else
        -: 2542:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2543:    }
        -: 2544:    return iterator(__result);
        -: 2545:}
        -: 2546:
        -: 2547:template <class _Tp, class _Compare, class _Allocator>
        -: 2548:template <class _Key>
        -: 2549:typename __tree<_Tp, _Compare, _Allocator>::const_iterator
        -: 2550:__tree<_Tp, _Compare, _Allocator>::__lower_bound(const _Key& __v,
        -: 2551:                                                 __node_pointer __root,
        -: 2552:                                                 __iter_pointer __result) const
        -: 2553:{
        -: 2554:    while (__root != nullptr)
        -: 2555:    {
        -: 2556:        if (!value_comp()(__root->__value_, __v))
        -: 2557:        {
        -: 2558:            __result = static_cast<__iter_pointer>(__root);
        -: 2559:            __root = static_cast<__node_pointer>(__root->__left_);
        -: 2560:        }
        -: 2561:        else
        -: 2562:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2563:    }
        -: 2564:    return const_iterator(__result);
        -: 2565:}
        -: 2566:
        -: 2567:template <class _Tp, class _Compare, class _Allocator>
        -: 2568:template <class _Key>
        -: 2569:typename __tree<_Tp, _Compare, _Allocator>::iterator
        -: 2570:__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,
        -: 2571:                                                 __node_pointer __root,
        -: 2572:                                                 __iter_pointer __result)
        -: 2573:{
        -: 2574:    while (__root != nullptr)
        -: 2575:    {
        -: 2576:        if (value_comp()(__v, __root->__value_))
        -: 2577:        {
        -: 2578:            __result = static_cast<__iter_pointer>(__root);
        -: 2579:            __root = static_cast<__node_pointer>(__root->__left_);
        -: 2580:        }
        -: 2581:        else
        -: 2582:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2583:    }
        -: 2584:    return iterator(__result);
        -: 2585:}
        -: 2586:
        -: 2587:template <class _Tp, class _Compare, class _Allocator>
        -: 2588:template <class _Key>
        -: 2589:typename __tree<_Tp, _Compare, _Allocator>::const_iterator
        -: 2590:__tree<_Tp, _Compare, _Allocator>::__upper_bound(const _Key& __v,
        -: 2591:                                                 __node_pointer __root,
        -: 2592:                                                 __iter_pointer __result) const
        -: 2593:{
        -: 2594:    while (__root != nullptr)
        -: 2595:    {
        -: 2596:        if (value_comp()(__v, __root->__value_))
        -: 2597:        {
        -: 2598:            __result = static_cast<__iter_pointer>(__root);
        -: 2599:            __root = static_cast<__node_pointer>(__root->__left_);
        -: 2600:        }
        -: 2601:        else
        -: 2602:            __root = static_cast<__node_pointer>(__root->__right_);
        -: 2603:    }
        -: 2604:    return const_iterator(__result);
        -: 2605:}
        -: 2606:
        -: 2607:template <class _Tp, class _Compare, class _Allocator>
        -: 2608:template <class _Key>
        -: 2609:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator,
        -: 2610:     typename __tree<_Tp, _Compare, _Allocator>::iterator>
        -: 2611:__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k)
        -: 2612:{
        -: 2613:    typedef pair<iterator, iterator> _Pp;
        -: 2614:    __iter_pointer __result = __end_node();
        -: 2615:    __node_pointer __rt = __root();
        -: 2616:    while (__rt != nullptr)
        -: 2617:    {
        -: 2618:        if (value_comp()(__k, __rt->__value_))
        -: 2619:        {
        -: 2620:            __result = static_cast<__iter_pointer>(__rt);
        -: 2621:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2622:        }
        -: 2623:        else if (value_comp()(__rt->__value_, __k))
        -: 2624:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2625:        else
        -: 2626:            return _Pp(iterator(__rt),
        -: 2627:                      iterator(
        -: 2628:                          __rt->__right_ != nullptr ?
        -: 2629:                              static_cast<__iter_pointer>(_VSTD::__tree_min(__rt->__right_))
        -: 2630:                            : __result));
        -: 2631:    }
        -: 2632:    return _Pp(iterator(__result), iterator(__result));
        -: 2633:}
        -: 2634:
        -: 2635:template <class _Tp, class _Compare, class _Allocator>
        -: 2636:template <class _Key>
        -: 2637:pair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,
        -: 2638:     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>
        -: 2639:__tree<_Tp, _Compare, _Allocator>::__equal_range_unique(const _Key& __k) const
        -: 2640:{
        -: 2641:    typedef pair<const_iterator, const_iterator> _Pp;
        -: 2642:    __iter_pointer __result = __end_node();
        -: 2643:    __node_pointer __rt = __root();
        -: 2644:    while (__rt != nullptr)
        -: 2645:    {
        -: 2646:        if (value_comp()(__k, __rt->__value_))
        -: 2647:        {
        -: 2648:            __result = static_cast<__iter_pointer>(__rt);
        -: 2649:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2650:        }
        -: 2651:        else if (value_comp()(__rt->__value_, __k))
        -: 2652:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2653:        else
        -: 2654:            return _Pp(const_iterator(__rt),
        -: 2655:                      const_iterator(
        -: 2656:                          __rt->__right_ != nullptr ?
        -: 2657:                              static_cast<__iter_pointer>(_VSTD::__tree_min(__rt->__right_))
        -: 2658:                            : __result));
        -: 2659:    }
        -: 2660:    return _Pp(const_iterator(__result), const_iterator(__result));
        -: 2661:}
        -: 2662:
        -: 2663:template <class _Tp, class _Compare, class _Allocator>
        -: 2664:template <class _Key>
        -: 2665:pair<typename __tree<_Tp, _Compare, _Allocator>::iterator,
        -: 2666:     typename __tree<_Tp, _Compare, _Allocator>::iterator>
        -: 2667:__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k)
        -: 2668:{
        -: 2669:    typedef pair<iterator, iterator> _Pp;
        -: 2670:    __iter_pointer __result = __end_node();
        -: 2671:    __node_pointer __rt = __root();
        -: 2672:    while (__rt != nullptr)
        -: 2673:    {
        -: 2674:        if (value_comp()(__k, __rt->__value_))
        -: 2675:        {
        -: 2676:            __result = static_cast<__iter_pointer>(__rt);
        -: 2677:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2678:        }
        -: 2679:        else if (value_comp()(__rt->__value_, __k))
        -: 2680:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2681:        else
        -: 2682:            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),
        -: 2683:                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));
        -: 2684:    }
        -: 2685:    return _Pp(iterator(__result), iterator(__result));
        -: 2686:}
        -: 2687:
        -: 2688:template <class _Tp, class _Compare, class _Allocator>
        -: 2689:template <class _Key>
        -: 2690:pair<typename __tree<_Tp, _Compare, _Allocator>::const_iterator,
        -: 2691:     typename __tree<_Tp, _Compare, _Allocator>::const_iterator>
        -: 2692:__tree<_Tp, _Compare, _Allocator>::__equal_range_multi(const _Key& __k) const
        -: 2693:{
        -: 2694:    typedef pair<const_iterator, const_iterator> _Pp;
        -: 2695:    __iter_pointer __result = __end_node();
        -: 2696:    __node_pointer __rt = __root();
        -: 2697:    while (__rt != nullptr)
        -: 2698:    {
        -: 2699:        if (value_comp()(__k, __rt->__value_))
        -: 2700:        {
        -: 2701:            __result = static_cast<__iter_pointer>(__rt);
        -: 2702:            __rt = static_cast<__node_pointer>(__rt->__left_);
        -: 2703:        }
        -: 2704:        else if (value_comp()(__rt->__value_, __k))
        -: 2705:            __rt = static_cast<__node_pointer>(__rt->__right_);
        -: 2706:        else
        -: 2707:            return _Pp(__lower_bound(__k, static_cast<__node_pointer>(__rt->__left_), static_cast<__iter_pointer>(__rt)),
        -: 2708:                      __upper_bound(__k, static_cast<__node_pointer>(__rt->__right_), __result));
        -: 2709:    }
        -: 2710:    return _Pp(const_iterator(__result), const_iterator(__result));
        -: 2711:}
        -: 2712:
        -: 2713:template <class _Tp, class _Compare, class _Allocator>
        -: 2714:typename __tree<_Tp, _Compare, _Allocator>::__node_holder
        -: 2715:__tree<_Tp, _Compare, _Allocator>::remove(const_iterator __p) _NOEXCEPT
        -: 2716:{
        -: 2717:    __node_pointer __np = __p.__get_np();
        -: 2718:    if (__begin_node() == __p.__ptr_)
        -: 2719:    {
        -: 2720:        if (__np->__right_ != nullptr)
        -: 2721:            __begin_node() = static_cast<__iter_pointer>(__np->__right_);
        -: 2722:        else
        -: 2723:            __begin_node() = static_cast<__iter_pointer>(__np->__parent_);
        -: 2724:    }
        -: 2725:    --size();
        -: 2726:    _VSTD::__tree_remove(__end_node()->__left_,
        -: 2727:                         static_cast<__node_base_pointer>(__np));
        -: 2728:    return __node_holder(__np, _Dp(__node_alloc(), true));
        -: 2729:}
        -: 2730:
        -: 2731:template <class _Tp, class _Compare, class _Allocator>
        -: 2732:inline _LIBCPP_INLINE_VISIBILITY
        -: 2733:void
        -: 2734:swap(__tree<_Tp, _Compare, _Allocator>& __x,
        -: 2735:     __tree<_Tp, _Compare, _Allocator>& __y)
        -: 2736:    _NOEXCEPT_(_NOEXCEPT_(__x.swap(__y)))
        -: 2737:{
        -: 2738:    __x.swap(__y);
        -: 2739:}
        -: 2740:
        -: 2741:_LIBCPP_END_NAMESPACE_STD
        -: 2742:
        -: 2743:_LIBCPP_POP_MACROS
        -: 2744:
        -: 2745:#endif // _LIBCPP___TREE
