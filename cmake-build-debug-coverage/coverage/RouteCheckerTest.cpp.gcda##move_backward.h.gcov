        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__algorithm/move_backward.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/RouteCheckerTest.dir/UnitTesting/RouteCheckerTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/RouteCheckerTest.dir/UnitTesting/RouteCheckerTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___ALGORITHM_MOVE_BACKWARD_H
        -:   10:#define _LIBCPP___ALGORITHM_MOVE_BACKWARD_H
        -:   11:
        -:   12:#include <__algorithm/iterator_operations.h>
        -:   13:#include <__algorithm/unwrap_iter.h>
        -:   14:#include <__config>
        -:   15:#include <__utility/move.h>
        -:   16:#include <cstring>
        -:   17:#include <type_traits>
        -:   18:
        -:   19:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   20:#  pragma GCC system_header
        -:   21:#endif
        -:   22:
        -:   23:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   24:
        -:   25:template <class _AlgPolicy, class _InputIterator, class _OutputIterator>
        -:   26:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:   27:_OutputIterator
function _ZNSt3__125__move_backward_constexprB6v15006INS_17_ClassicAlgPolicyEPN7doctest16SubcaseSignatureES4_EET1_T0_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:   28:__move_backward_constexpr(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
        -:   29:{
    #####:   30:    while (__first != __last)
    $$$$$:   30-block  0
    $$$$$:   30-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   30-block  2
    #####:   31:        *--__result = _IterOps<_AlgPolicy>::__iter_move(--__last);
    #####:   32:    return __result;
    $$$$$:   32-block  0
        -:   33:}
        -:   34:
        -:   35:template <class _AlgPolicy, class _InputIterator, class _OutputIterator>
        -:   36:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:   37:_OutputIterator
function _ZNSt3__120__move_backward_implB6v15006INS_17_ClassicAlgPolicyEPN7doctest16SubcaseSignatureES4_EET1_T0_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:   38:__move_backward_impl(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
        -:   39:{
    #####:   40:    return _VSTD::__move_backward_constexpr<_AlgPolicy>(__first, __last, __result);
    $$$$$:   40-block  0
        -:   41:}
        -:   42:
        -:   43:template <class _AlgPolicy, class _Tp, class _Up>
        -:   44:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14
        -:   45:typename enable_if
        -:   46:<
        -:   47:    is_same<typename remove_const<_Tp>::type, _Up>::value &&
        -:   48:    is_trivially_move_assignable<_Up>::value,
        -:   49:    _Up*
        -:   50:>::type
function _ZNSt3__120__move_backward_implB6v15006INS_17_ClassicAlgPolicyEPN7doctest9IReporterES4_EENS_9enable_ifIXaasr7is_sameINS_12remove_constIT0_E4typeET1_EE5valuesr28is_trivially_move_assignableISA_EE5valueEPSA_E4typeEPS7_SE_SB_ called 0 returned 0% blocks executed 0%
    #####:   51:__move_backward_impl(_Tp* __first, _Tp* __last, _Up* __result)
        -:   52:{
    #####:   53:    const size_t __n = static_cast<size_t>(__last - __first);
    #####:   54:    if (__n > 0)
    $$$$$:   54-block  0
branch  0 never executed
branch  1 never executed
        -:   55:    {
    #####:   56:        __result -= __n;
    #####:   57:        _VSTD::memmove(__result, __first, __n * sizeof(_Up));
    #####:   58:    }
    $$$$$:   58-block  0
    #####:   59:    return __result;
    $$$$$:   59-block  0
        -:   60:}
        -:   61:
        -:   62:template <class _AlgPolicy, class _BidirectionalIterator1, class _BidirectionalIterator2>
        -:   63:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:   64:_BidirectionalIterator2
function _ZNSt3__115__move_backwardB6v15006INS_17_ClassicAlgPolicyEPN7doctest16SubcaseSignatureES4_EET1_T0_S6_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__115__move_backwardB6v15006INS_17_ClassicAlgPolicyEPPN7doctest9IReporterES5_EET1_T0_S7_S6_ called 0 returned 0% blocks executed 0%
    #####:   65:__move_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last,
        -:   66:                _BidirectionalIterator2 __result)
        -:   67:{
        -:   68:    if (__libcpp_is_constant_evaluated()) {
        -:   69:        return _VSTD::__move_backward_constexpr<_AlgPolicy>(__first, __last, __result);
        -:   70:    } else {
    #####:   71:        return _VSTD::__rewrap_iter(__result,
    $$$$$:   71-block  0
    $$$$$:   71-block  1
    $$$$$:   71-block  2
    $$$$$:   71-block  3
    #####:   72:            _VSTD::__move_backward_impl<_AlgPolicy>(_VSTD::__unwrap_iter(__first),
    #####:   73:                                                    _VSTD::__unwrap_iter(__last),
    #####:   74:                                                    _VSTD::__unwrap_iter(__result)));
        -:   75:    }
        -:   76:}
        -:   77:
        -:   78:template <class _BidirectionalIterator1, class _BidirectionalIterator2>
        -:   79:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:   80:_BidirectionalIterator2
function _ZNSt3__113move_backwardB6v15006IPN7doctest16SubcaseSignatureES3_EET0_T_S5_S4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__113move_backwardB6v15006IPPN7doctest9IReporterES4_EET0_T_S6_S5_ called 0 returned 0% blocks executed 0%
    #####:   81:move_backward(_BidirectionalIterator1 __first, _BidirectionalIterator1 __last,
        -:   82:              _BidirectionalIterator2 __result)
        -:   83:{
    #####:   84:  return std::__move_backward<_ClassicAlgPolicy>(std::move(__first), std::move(__last), std::move(__result));
    $$$$$:   84-block  0
    $$$$$:   84-block  1
        -:   85:}
        -:   86:
        -:   87:_LIBCPP_END_NAMESPACE_STD
        -:   88:
        -:   89:#endif // _LIBCPP___ALGORITHM_MOVE_BACKWARD_H
