        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__algorithm/sort.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphvizControllerTest.dir/UnitTesting/GraphvizControllerTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphvizControllerTest.dir/UnitTesting/GraphvizControllerTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___ALGORITHM_SORT_H
        -:   10:#define _LIBCPP___ALGORITHM_SORT_H
        -:   11:
        -:   12:#include <__algorithm/comp.h>
        -:   13:#include <__algorithm/comp_ref_type.h>
        -:   14:#include <__algorithm/iterator_operations.h>
        -:   15:#include <__algorithm/min_element.h>
        -:   16:#include <__algorithm/partial_sort.h>
        -:   17:#include <__algorithm/unwrap_iter.h>
        -:   18:#include <__bits>
        -:   19:#include <__config>
        -:   20:#include <__debug>
        -:   21:#include <__debug_utils/randomize_range.h>
        -:   22:#include <__functional/operations.h>
        -:   23:#include <__functional/ranges_operations.h>
        -:   24:#include <__iterator/iterator_traits.h>
        -:   25:#include <climits>
        -:   26:#include <memory>
        -:   27:
        -:   28:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   29:#  pragma GCC system_header
        -:   30:#endif
        -:   31:
        -:   32:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   33:
        -:   34:// Wraps an algorithm policy tag and a comparator in a single struct, used to pass the policy tag around without
        -:   35:// changing the number of template arguments (to keep the ABI stable). This is only used for the "range" policy tag.
        -:   36://
        -:   37:// To create an object of this type, use `_WrapAlgPolicy<T, C>::type` -- see the specialization below for the rationale.
        -:   38:template <class _PolicyT, class _CompT, class = void>
        -:   39:struct _WrapAlgPolicy {
        -:   40:  using type = _WrapAlgPolicy;
        -:   41:
        -:   42:  using _AlgPolicy = _PolicyT;
        -:   43:  using _Comp = _CompT;
        -:   44:  _Comp& __comp;
        -:   45:
        -:   46:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11
        -:   47:  _WrapAlgPolicy(_Comp& __c) : __comp(__c) {}
        -:   48:};
        -:   49:
        -:   50:// Specialization for the "classic" policy tag that avoids creating a struct and simply defines an alias for the
        -:   51:// comparator. When unwrapping, a pristine comparator is always considered to have the "classic" tag attached. Passing
        -:   52:// the pristine comparator where possible allows using template instantiations from the dylib.
        -:   53:template <class _PolicyT, class _CompT>
        -:   54:struct _WrapAlgPolicy<_PolicyT, _CompT, __enable_if_t<std::is_same<_PolicyT, _ClassicAlgPolicy>::value> > {
        -:   55:  using type = _CompT;
        -:   56:};
        -:   57:
        -:   58:// Unwraps a pristine functor (e.g. `std::less`) as if it were wrapped using `_WrapAlgPolicy`. The policy tag is always
        -:   59:// set to "classic".
        -:   60:template <class _CompT>
        -:   61:struct _UnwrapAlgPolicy {
        -:   62:  using _AlgPolicy = _ClassicAlgPolicy;
        -:   63:  using _Comp = _CompT;
        -:   64:
        -:   65:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 static
function _ZNSt3__116_UnwrapAlgPolicyIRPFbPKN7doctest6detail8TestCaseES5_EE10__get_compB6v15006ES8_ called 1 returned 100% blocks executed 100%
        1:   66:  _Comp __get_comp(_Comp __comp) { return __comp; }
        1:   66-block  0
        -:   67:};
        -:   68:
        -:   69:// Unwraps a `_WrapAlgPolicy` struct.
        -:   70:template <class... _Ts>
        -:   71:struct _UnwrapAlgPolicy<_WrapAlgPolicy<_Ts...> > {
        -:   72:  using _Wrapped = _WrapAlgPolicy<_Ts...>;
        -:   73:  using _AlgPolicy = typename _Wrapped::_AlgPolicy;
        -:   74:  using _Comp = typename _Wrapped::_Comp;
        -:   75:
        -:   76:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 static
        -:   77:  _Comp __get_comp(_Wrapped& __w) { return __w.__comp; }
        -:   78:};
        -:   79:
        -:   80:// stable, 2-3 compares, 0-2 swaps
        -:   81:
        -:   82:template <class _AlgPolicy, class _Compare, class _ForwardIterator>
function _ZNSt3__17__sort3INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEjT1_SB_SB_T0_ called 0 returned 0% blocks executed 0%
    #####:   83:_LIBCPP_CONSTEXPR_AFTER_CXX11 unsigned __sort3(_ForwardIterator __x, _ForwardIterator __y, _ForwardIterator __z,
        -:   84:                                               _Compare __c) {
        -:   85:  using _Ops = _IterOps<_AlgPolicy>;
        -:   86:
    #####:   87:  unsigned __r = 0;
    #####:   88:  if (!__c(*__y, *__x))   // if x <= y
    $$$$$:   88-block  0
branch  0 never executed
branch  1 never executed
        -:   89:  {
    #####:   90:    if (!__c(*__z, *__y)) // if y <= z
    $$$$$:   90-block  0
branch  0 never executed
branch  1 never executed
    #####:   91:      return __r;         // x <= y && y <= z
    $$$$$:   91-block  0
        -:   92:                          // x <= y && y > z
    #####:   93:    _Ops::iter_swap(__y, __z);     // x <= z && y < z
    #####:   94:    __r = 1;
    #####:   95:    if (__c(*__y, *__x))  // if x > y
    $$$$$:   95-block  0
branch  0 never executed
branch  1 never executed
        -:   96:    {
    #####:   97:      _Ops::iter_swap(__x, __y);   // x < y && y <= z
    #####:   98:      __r = 2;
    #####:   99:    }
    $$$$$:   99-block  0
    #####:  100:    return __r;           // x <= y && y < z
    $$$$$:  100-block  0
        -:  101:  }
    #####:  102:  if (__c(*__z, *__y))    // x > y, if y > z
    $$$$$:  102-block  0
branch  0 never executed
branch  1 never executed
        -:  103:  {
    #####:  104:    _Ops::iter_swap(__x, __z);     // x < y && y < z
    #####:  105:    __r = 1;
    #####:  106:    return __r;
    $$$$$:  106-block  0
        -:  107:  }
    #####:  108:  _Ops::iter_swap(__x, __y);       // x > y && y <= z
    #####:  109:  __r = 1;                // x < y && x <= z
    #####:  110:  if (__c(*__z, *__y))    // if y > z
    $$$$$:  110-block  0
branch  0 never executed
branch  1 never executed
        -:  111:  {
    #####:  112:    _Ops::iter_swap(__y, __z);     // x <= y && y < z
    #####:  113:    __r = 2;
    #####:  114:  }
    $$$$$:  114-block  0
    #####:  115:  return __r;
    $$$$$:  115-block  0
    #####:  116:}                         // x <= y && y <= z
    $$$$$:  116-block  0
        -:  117:
        -:  118:// stable, 3-6 compares, 0-5 swaps
        -:  119:
        -:  120:template <class _AlgPolicy, class _Compare, class _ForwardIterator>
function _ZNSt3__17__sort4INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEjT1_SB_SB_SB_T0_ called 0 returned 0% blocks executed 0%
    #####:  121:unsigned __sort4(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3, _ForwardIterator __x4,
        -:  122:                 _Compare __c) {
        -:  123:  using _Ops = _IterOps<_AlgPolicy>;
        -:  124:
    #####:  125:  unsigned __r = std::__sort3<_AlgPolicy, _Compare>(__x1, __x2, __x3, __c);
    #####:  126:  if (__c(*__x4, *__x3)) {
    $$$$$:  126-block  0
branch  0 never executed
branch  1 never executed
    #####:  127:    _Ops::iter_swap(__x3, __x4);
    #####:  128:    ++__r;
    #####:  129:    if (__c(*__x3, *__x2)) {
    $$$$$:  129-block  0
branch  0 never executed
branch  1 never executed
    #####:  130:      _Ops::iter_swap(__x2, __x3);
    #####:  131:      ++__r;
    #####:  132:      if (__c(*__x2, *__x1)) {
    $$$$$:  132-block  0
branch  0 never executed
branch  1 never executed
    #####:  133:        _Ops::iter_swap(__x1, __x2);
    #####:  134:        ++__r;
    #####:  135:      }
    $$$$$:  135-block  0
    #####:  136:    }
    $$$$$:  136-block  0
    #####:  137:  }
    $$$$$:  137-block  0
    #####:  138:  return __r;
    $$$$$:  138-block  0
        -:  139:}
        -:  140:
        -:  141:// stable, 4-10 compares, 0-9 swaps
        -:  142:
        -:  143:template <class _WrappedComp, class _ForwardIterator>
function _ZNSt3__17__sort5IRPFbPKN7doctest6detail8TestCaseES5_EPS5_EEjT0_SA_SA_SA_SA_T_ called 0 returned 0% blocks executed 0%
    #####:  144:_LIBCPP_HIDDEN unsigned __sort5(_ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3,
        -:  145:                                _ForwardIterator __x4, _ForwardIterator __x5, _WrappedComp __wrapped_comp) {
        -:  146:  using _Unwrap = _UnwrapAlgPolicy<_WrappedComp>;
        -:  147:  using _AlgPolicy = typename _Unwrap::_AlgPolicy;
        -:  148:  using _Ops = _IterOps<_AlgPolicy>;
        -:  149:
        -:  150:  using _Compare = typename _Unwrap::_Comp;
    #####:  151:  _Compare __c = _Unwrap::__get_comp(__wrapped_comp);
        -:  152:
    #####:  153:  unsigned __r = std::__sort4<_AlgPolicy, _Compare>(__x1, __x2, __x3, __x4, __c);
    #####:  154:  if (__c(*__x5, *__x4)) {
    $$$$$:  154-block  0
branch  0 never executed
branch  1 never executed
    #####:  155:    _Ops::iter_swap(__x4, __x5);
    #####:  156:    ++__r;
    #####:  157:    if (__c(*__x4, *__x3)) {
    $$$$$:  157-block  0
branch  0 never executed
branch  1 never executed
    #####:  158:      _Ops::iter_swap(__x3, __x4);
    #####:  159:      ++__r;
    #####:  160:      if (__c(*__x3, *__x2)) {
    $$$$$:  160-block  0
branch  0 never executed
branch  1 never executed
    #####:  161:        _Ops::iter_swap(__x2, __x3);
    #####:  162:        ++__r;
    #####:  163:        if (__c(*__x2, *__x1)) {
    $$$$$:  163-block  0
branch  0 never executed
branch  1 never executed
    #####:  164:          _Ops::iter_swap(__x1, __x2);
    #####:  165:          ++__r;
    #####:  166:        }
    $$$$$:  166-block  0
    #####:  167:      }
    $$$$$:  167-block  0
    #####:  168:    }
    $$$$$:  168-block  0
    #####:  169:  }
    $$$$$:  169-block  0
    #####:  170:  return __r;
    $$$$$:  170-block  0
        -:  171:}
        -:  172:
        -:  173:template <class _AlgPolicy, class _Compare, class _ForwardIterator>
function _ZNSt3__119__sort5_wrap_policyINS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEjT1_SB_SB_SB_SB_T0_ called 0 returned 0% blocks executed 0%
    #####:  174:_LIBCPP_HIDDEN unsigned __sort5_wrap_policy(
        -:  175:    _ForwardIterator __x1, _ForwardIterator __x2, _ForwardIterator __x3, _ForwardIterator __x4, _ForwardIterator __x5,
        -:  176:    _Compare __c) {
        -:  177:  using _WrappedComp = typename _WrapAlgPolicy<_AlgPolicy, _Compare>::type;
    #####:  178:  _WrappedComp __wrapped_comp(__c);
    #####:  179:  return std::__sort5<_WrappedComp>(
    $$$$$:  179-block  0
    #####:  180:      std::move(__x1), std::move(__x2), std::move(__x3), std::move(__x4), std::move(__x5), __wrapped_comp);
        -:  181:}
        -:  182:
        -:  183:// The comparator being simple is a prerequisite for using the branchless optimization.
        -:  184:template <class _Tp>
        -:  185:struct __is_simple_comparator : false_type {};
        -:  186:template <class _Tp>
        -:  187:struct __is_simple_comparator<__less<_Tp>&> : true_type {};
        -:  188:template <class _Tp>
        -:  189:struct __is_simple_comparator<less<_Tp>&> : true_type {};
        -:  190:template <class _Tp>
        -:  191:struct __is_simple_comparator<greater<_Tp>&> : true_type {};
        -:  192:#if _LIBCPP_STD_VER > 17
        -:  193:template <>
        -:  194:struct __is_simple_comparator<ranges::less&> : true_type {};
        -:  195:template <>
        -:  196:struct __is_simple_comparator<ranges::greater&> : true_type {};
        -:  197:#endif
        -:  198:
        -:  199:template <class _Compare, class _Iter, class _Tp = typename iterator_traits<_Iter>::value_type>
        -:  200:using __use_branchless_sort =
        -:  201:    integral_constant<bool, __is_cpp17_contiguous_iterator<_Iter>::value && sizeof(_Tp) <= sizeof(void*) &&
        -:  202:                                is_arithmetic<_Tp>::value && __is_simple_comparator<_Compare>::value>;
        -:  203:
        -:  204:// Ensures that __c(*__x, *__y) is true by swapping *__x and *__y if necessary.
        -:  205:template <class _Compare, class _RandomAccessIterator>
        -:  206:inline _LIBCPP_HIDE_FROM_ABI void __cond_swap(_RandomAccessIterator __x, _RandomAccessIterator __y, _Compare __c) {
        -:  207:  // Note: this function behaves correctly even with proxy iterators (because it relies on `value_type`).
        -:  208:  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
        -:  209:  bool __r = __c(*__x, *__y);
        -:  210:  value_type __tmp = __r ? *__x : *__y;
        -:  211:  *__y = __r ? *__y : *__x;
        -:  212:  *__x = __tmp;
        -:  213:}
        -:  214:
        -:  215:// Ensures that *__x, *__y and *__z are ordered according to the comparator __c,
        -:  216:// under the assumption that *__y and *__z are already ordered.
        -:  217:template <class _Compare, class _RandomAccessIterator>
        -:  218:inline _LIBCPP_HIDE_FROM_ABI void __partially_sorted_swap(_RandomAccessIterator __x, _RandomAccessIterator __y,
        -:  219:                                                          _RandomAccessIterator __z, _Compare __c) {
        -:  220:  // Note: this function behaves correctly even with proxy iterators (because it relies on `value_type`).
        -:  221:  using value_type = typename iterator_traits<_RandomAccessIterator>::value_type;
        -:  222:  bool __r = __c(*__z, *__x);
        -:  223:  value_type __tmp = __r ? *__z : *__x;
        -:  224:  *__z = __r ? *__x : *__z;
        -:  225:  __r = __c(__tmp, *__y);
        -:  226:  *__x = __r ? *__x : *__y;
        -:  227:  *__y = __r ? *__y : __tmp;
        -:  228:}
        -:  229:
        -:  230:template <class, class _Compare, class _RandomAccessIterator>
        -:  231:inline _LIBCPP_HIDE_FROM_ABI __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, void>
        -:  232:__sort3_maybe_branchless(_RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3,
        -:  233:                         _Compare __c) {
        -:  234:  _VSTD::__cond_swap<_Compare>(__x2, __x3, __c);
        -:  235:  _VSTD::__partially_sorted_swap<_Compare>(__x1, __x2, __x3, __c);
        -:  236:}
        -:  237:
        -:  238:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
        -:  239:inline _LIBCPP_HIDE_FROM_ABI __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, void>
function _ZNSt3__124__sort3_maybe_branchlessB6v15006INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EENS_9enable_ifIXntsr21__use_branchless_sortIT0_T1_EE5valueEvE4typeESD_SD_SD_SC_ called 0 returned 0% blocks executed 0%
    #####:  240:__sort3_maybe_branchless(_RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3,
        -:  241:                         _Compare __c) {
    #####:  242:  std::__sort3<_AlgPolicy, _Compare>(__x1, __x2, __x3, __c);
    #####:  243:}
    $$$$$:  243-block  0
        -:  244:
        -:  245:template <class, class _Compare, class _RandomAccessIterator>
        -:  246:inline _LIBCPP_HIDE_FROM_ABI __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, void>
        -:  247:__sort4_maybe_branchless(_RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3,
        -:  248:                         _RandomAccessIterator __x4, _Compare __c) {
        -:  249:  _VSTD::__cond_swap<_Compare>(__x1, __x3, __c);
        -:  250:  _VSTD::__cond_swap<_Compare>(__x2, __x4, __c);
        -:  251:  _VSTD::__cond_swap<_Compare>(__x1, __x2, __c);
        -:  252:  _VSTD::__cond_swap<_Compare>(__x3, __x4, __c);
        -:  253:  _VSTD::__cond_swap<_Compare>(__x2, __x3, __c);
        -:  254:}
        -:  255:
        -:  256:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
        -:  257:inline _LIBCPP_HIDE_FROM_ABI __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, void>
function _ZNSt3__124__sort4_maybe_branchlessB6v15006INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EENS_9enable_ifIXntsr21__use_branchless_sortIT0_T1_EE5valueEvE4typeESD_SD_SD_SD_SC_ called 0 returned 0% blocks executed 0%
    #####:  258:__sort4_maybe_branchless(_RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3,
        -:  259:                         _RandomAccessIterator __x4, _Compare __c) {
    #####:  260:  std::__sort4<_AlgPolicy, _Compare>(__x1, __x2, __x3, __x4, __c);
    #####:  261:}
    $$$$$:  261-block  0
        -:  262:
        -:  263:template <class, class _Compare, class _RandomAccessIterator>
        -:  264:inline _LIBCPP_HIDE_FROM_ABI __enable_if_t<__use_branchless_sort<_Compare, _RandomAccessIterator>::value, void>
        -:  265:__sort5_maybe_branchless(_RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3,
        -:  266:                         _RandomAccessIterator __x4, _RandomAccessIterator __x5, _Compare __c) {
        -:  267:  _VSTD::__cond_swap<_Compare>(__x1, __x2, __c);
        -:  268:  _VSTD::__cond_swap<_Compare>(__x4, __x5, __c);
        -:  269:  _VSTD::__partially_sorted_swap<_Compare>(__x3, __x4, __x5, __c);
        -:  270:  _VSTD::__cond_swap<_Compare>(__x2, __x5, __c);
        -:  271:  _VSTD::__partially_sorted_swap<_Compare>(__x1, __x3, __x4, __c);
        -:  272:  _VSTD::__partially_sorted_swap<_Compare>(__x2, __x3, __x4, __c);
        -:  273:}
        -:  274:
        -:  275:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
        -:  276:inline _LIBCPP_HIDE_FROM_ABI __enable_if_t<!__use_branchless_sort<_Compare, _RandomAccessIterator>::value, void>
function _ZNSt3__124__sort5_maybe_branchlessB6v15006INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EENS_9enable_ifIXntsr21__use_branchless_sortIT0_T1_EE5valueEvE4typeESD_SD_SD_SD_SD_SC_ called 0 returned 0% blocks executed 0%
    #####:  277:__sort5_maybe_branchless(_RandomAccessIterator __x1, _RandomAccessIterator __x2, _RandomAccessIterator __x3,
        -:  278:                         _RandomAccessIterator __x4, _RandomAccessIterator __x5, _Compare __c) {
    #####:  279:  std::__sort5_wrap_policy<_AlgPolicy, _Compare>(__x1, __x2, __x3, __x4, __x5, __c);
    #####:  280:}
    $$$$$:  280-block  0
        -:  281:
        -:  282:// Assumes size > 0
        -:  283:template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
        -:  284:_LIBCPP_CONSTEXPR_AFTER_CXX11 void __selection_sort(_BidirectionalIterator __first, _BidirectionalIterator __last,
        -:  285:                                                    _Compare __comp) {
        -:  286:  _BidirectionalIterator __lm1 = __last;
        -:  287:  for (--__lm1; __first != __lm1; ++__first) {
        -:  288:    _BidirectionalIterator __i = std::__min_element<_Compare>(__first, __last, __comp);
        -:  289:    if (__i != __first)
        -:  290:      _IterOps<_AlgPolicy>::iter_swap(__first, __i);
        -:  291:  }
        -:  292:}
        -:  293:
        -:  294:template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
        -:  295:void __insertion_sort(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp) {
        -:  296:  using _Ops = _IterOps<_AlgPolicy>;
        -:  297:
        -:  298:  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
        -:  299:  if (__first != __last) {
        -:  300:    _BidirectionalIterator __i = __first;
        -:  301:    for (++__i; __i != __last; ++__i) {
        -:  302:      _BidirectionalIterator __j = __i;
        -:  303:      value_type __t(_Ops::__iter_move(__j));
        -:  304:      for (_BidirectionalIterator __k = __i; __k != __first && __comp(__t, *--__k); --__j)
        -:  305:        *__j = _Ops::__iter_move(__k);
        -:  306:      *__j = _VSTD::move(__t);
        -:  307:    }
        -:  308:  }
        -:  309:}
        -:  310:
        -:  311:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
function _ZNSt3__118__insertion_sort_3INS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEvT1_SB_T0_ called 0 returned 0% blocks executed 0%
    #####:  312:void __insertion_sort_3(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp) {
        -:  313:  using _Ops = _IterOps<_AlgPolicy>;
        -:  314:
        -:  315:  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
        -:  316:  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
    #####:  317:  _RandomAccessIterator __j = __first + difference_type(2);
    #####:  318:  std::__sort3_maybe_branchless<_AlgPolicy, _Compare>(__first, __first + difference_type(1), __j, __comp);
    #####:  319:  for (_RandomAccessIterator __i = __j + difference_type(1); __i != __last; ++__i) {
    $$$$$:  319-block  0
    $$$$$:  319-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  319-block  2
    #####:  320:    if (__comp(*__i, *__j)) {
    $$$$$:  320-block  0
branch  0 never executed
branch  1 never executed
    #####:  321:      value_type __t(_Ops::__iter_move(__i));
    #####:  322:      _RandomAccessIterator __k = __j;
    #####:  323:      __j = __i;
    #####:  324:      do {
    $$$$$:  324-block  0
    #####:  325:        *__j = _Ops::__iter_move(__k);
    #####:  326:        __j = __k;
    #####:  327:      } while (__j != __first && __comp(__t, *--__k));
    $$$$$:  327-block  0
    $$$$$:  327-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  327-block  2
    $$$$$:  327-block  3
branch  2 never executed
branch  3 never executed
    #####:  328:      *__j = _VSTD::move(__t);
    #####:  329:    }
    $$$$$:  329-block  0
    #####:  330:    __j = __i;
    #####:  331:  }
    $$$$$:  331-block  0
    #####:  332:}
    $$$$$:  332-block  0
        -:  333:
        -:  334:template <class _WrappedComp, class _RandomAccessIterator>
function _ZNSt3__127__insertion_sort_incompleteIRPFbPKN7doctest6detail8TestCaseES5_EPS5_EEbT0_SA_T_ called 0 returned 0% blocks executed 0%
    #####:  335:bool __insertion_sort_incomplete(
        -:  336:    _RandomAccessIterator __first, _RandomAccessIterator __last, _WrappedComp __wrapped_comp) {
        -:  337:  using _Unwrap = _UnwrapAlgPolicy<_WrappedComp>;
        -:  338:  using _AlgPolicy = typename _Unwrap::_AlgPolicy;
        -:  339:  using _Ops = _IterOps<_AlgPolicy>;
        -:  340:
        -:  341:  using _Compare = typename _Unwrap::_Comp;
    #####:  342:  _Compare __comp = _Unwrap::__get_comp(__wrapped_comp);
        -:  343:
        -:  344:  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
    #####:  345:  switch (__last - __first) {
    $$$$$:  345-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  345-block  1
        -:  346:  case 0:
        -:  347:  case 1:
    #####:  348:    return true;
    $$$$$:  348-block  0
        -:  349:  case 2:
    #####:  350:    if (__comp(*--__last, *__first))
    $$$$$:  350-block  0
branch  0 never executed
branch  1 never executed
    #####:  351:      _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    $$$$$:  351-block  0
    #####:  352:    return true;
    $$$$$:  352-block  0
        -:  353:  case 3:
    #####:  354:    std::__sort3_maybe_branchless<_AlgPolicy, _Compare>(__first, __first + difference_type(1), --__last, __comp);
    #####:  355:    return true;
    $$$$$:  355-block  0
        -:  356:  case 4:
    #####:  357:    std::__sort4_maybe_branchless<_AlgPolicy, _Compare>(
    #####:  358:        __first, __first + difference_type(1), __first + difference_type(2), --__last, __comp);
    #####:  359:    return true;
    $$$$$:  359-block  0
        -:  360:  case 5:
    #####:  361:    std::__sort5_maybe_branchless<_AlgPolicy, _Compare>(
    #####:  362:        __first, __first + difference_type(1), __first + difference_type(2), __first + difference_type(3),
    #####:  363:        --__last, __comp);
    #####:  364:    return true;
    $$$$$:  364-block  0
        -:  365:  }
        -:  366:  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
    #####:  367:  _RandomAccessIterator __j = __first + difference_type(2);
    #####:  368:  std::__sort3_maybe_branchless<_AlgPolicy, _Compare>(__first, __first + difference_type(1), __j, __comp);
    #####:  369:  const unsigned __limit = 8;
    #####:  370:  unsigned __count = 0;
    #####:  371:  for (_RandomAccessIterator __i = __j + difference_type(1); __i != __last; ++__i) {
    $$$$$:  371-block  0
    $$$$$:  371-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  371-block  2
    #####:  372:    if (__comp(*__i, *__j)) {
    $$$$$:  372-block  0
branch  0 never executed
branch  1 never executed
    #####:  373:      value_type __t(_Ops::__iter_move(__i));
    #####:  374:      _RandomAccessIterator __k = __j;
    #####:  375:      __j = __i;
    #####:  376:      do {
    $$$$$:  376-block  0
    #####:  377:        *__j = _Ops::__iter_move(__k);
    #####:  378:        __j = __k;
    #####:  379:      } while (__j != __first && __comp(__t, *--__k));
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  379-block  2
    $$$$$:  379-block  3
branch  2 never executed
branch  3 never executed
    #####:  380:      *__j = _VSTD::move(__t);
    #####:  381:      if (++__count == __limit)
    $$$$$:  381-block  0
branch  0 never executed
branch  1 never executed
    #####:  382:        return ++__i == __last;
    $$$$$:  382-block  0
    #####:  383:    }
    $$$$$:  383-block  0
    #####:  384:    __j = __i;
    #####:  385:  }
    $$$$$:  385-block  0
    #####:  386:  return true;
    $$$$$:  386-block  0
    #####:  387:}
    $$$$$:  387-block  0
        -:  388:
        -:  389:template <class _AlgPolicy, class _Compare, class _BidirectionalIterator>
        -:  390:void __insertion_sort_move(_BidirectionalIterator __first1, _BidirectionalIterator __last1,
        -:  391:                           typename iterator_traits<_BidirectionalIterator>::value_type* __first2, _Compare __comp) {
        -:  392:  using _Ops = _IterOps<_AlgPolicy>;
        -:  393:
        -:  394:  typedef typename iterator_traits<_BidirectionalIterator>::value_type value_type;
        -:  395:  if (__first1 != __last1) {
        -:  396:    __destruct_n __d(0);
        -:  397:    unique_ptr<value_type, __destruct_n&> __h(__first2, __d);
        -:  398:    value_type* __last2 = __first2;
        -:  399:    ::new ((void*)__last2) value_type(_Ops::__iter_move(__first1));
        -:  400:    __d.template __incr<value_type>();
        -:  401:    for (++__last2; ++__first1 != __last1; ++__last2) {
        -:  402:      value_type* __j2 = __last2;
        -:  403:      value_type* __i2 = __j2;
        -:  404:      if (__comp(*__first1, *--__i2)) {
        -:  405:        ::new ((void*)__j2) value_type(std::move(*__i2));
        -:  406:        __d.template __incr<value_type>();
        -:  407:        for (--__j2; __i2 != __first2 && __comp(*__first1, *--__i2); --__j2)
        -:  408:          *__j2 = std::move(*__i2);
        -:  409:        *__j2 = _Ops::__iter_move(__first1);
        -:  410:      } else {
        -:  411:        ::new ((void*)__j2) value_type(_Ops::__iter_move(__first1));
        -:  412:        __d.template __incr<value_type>();
        -:  413:      }
        -:  414:    }
        -:  415:    __h.release();
        -:  416:  }
        -:  417:}
        -:  418:
        -:  419:template <class _AlgPolicy, class _Compare, class _RandomAccessIterator>
function _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERPFbPKN7doctest6detail8TestCaseES6_EPS6_EEvT1_SB_T0_NS_15iterator_traitsISB_E15difference_typeE called 1 returned 100% blocks executed 6%
        1:  420:void __introsort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp,
        -:  421:                 typename iterator_traits<_RandomAccessIterator>::difference_type __depth) {
        -:  422:  using _Ops = _IterOps<_AlgPolicy>;
        -:  423:
        -:  424:  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
        -:  425:  typedef typename iterator_traits<_RandomAccessIterator>::value_type value_type;
        1:  426:  const difference_type __limit =
        -:  427:      is_trivially_copy_constructible<value_type>::value && is_trivially_copy_assignable<value_type>::value ? 30 : 6;
        1:  428:  while (true) {
        1:  428-block  0
        1:  428-block  1
    $$$$$:  428-block  2
        -:  429:  __restart:
        1:  430:    difference_type __len = __last - __first;
        1:  431:    switch (__len) {
        1:  431-block  0
branch  0 taken 1
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
    $$$$$:  431-block  1
        -:  432:    case 0:
        -:  433:    case 1:
        1:  434:      return;
        1:  434-block  0
        -:  435:    case 2:
    #####:  436:      if (__comp(*--__last, *__first))
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    #####:  437:        _IterOps<_AlgPolicy>::iter_swap(__first, __last);
    $$$$$:  437-block  0
    #####:  438:      return;
    $$$$$:  438-block  0
        -:  439:    case 3:
    #####:  440:      std::__sort3_maybe_branchless<_AlgPolicy, _Compare>(__first, __first + difference_type(1), --__last, __comp);
    #####:  441:      return;
    $$$$$:  441-block  0
        -:  442:    case 4:
    #####:  443:      std::__sort4_maybe_branchless<_AlgPolicy, _Compare>(
    #####:  444:          __first, __first + difference_type(1), __first + difference_type(2), --__last, __comp);
    #####:  445:      return;
    $$$$$:  445-block  0
        -:  446:    case 5:
    #####:  447:      std::__sort5_maybe_branchless<_AlgPolicy, _Compare>(
    #####:  448:          __first, __first + difference_type(1), __first + difference_type(2), __first + difference_type(3),
    #####:  449:          --__last, __comp);
    #####:  450:      return;
    $$$$$:  450-block  0
        -:  451:    }
    #####:  452:    if (__len <= __limit) {
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    #####:  453:      std::__insertion_sort_3<_AlgPolicy, _Compare>(__first, __last, __comp);
    #####:  454:      return;
    $$$$$:  454-block  0
        -:  455:    }
        -:  456:    // __len > 5
    #####:  457:    if (__depth == 0) {
    $$$$$:  457-block  0
branch  0 never executed
branch  1 never executed
        -:  458:      // Fallback to heap sort as Introsort suggests.
    #####:  459:      std::__partial_sort<_AlgPolicy, _Compare>(__first, __last, __last, __comp);
    #####:  460:      return;
    $$$$$:  460-block  0
        -:  461:    }
    #####:  462:    --__depth;
    #####:  463:    _RandomAccessIterator __m = __first;
    #####:  464:    _RandomAccessIterator __lm1 = __last;
    #####:  465:    --__lm1;
        -:  466:    unsigned __n_swaps;
        -:  467:    {
        -:  468:      difference_type __delta;
    #####:  469:      if (__len >= 1000) {
    $$$$$:  469-block  0
branch  0 never executed
branch  1 never executed
    #####:  470:        __delta = __len / 2;
    #####:  471:        __m += __delta;
    #####:  472:        __delta /= 2;
    #####:  473:        __n_swaps = std::__sort5_wrap_policy<_AlgPolicy, _Compare>(
    #####:  474:            __first, __first + __delta, __m, __m + __delta, __lm1, __comp);
    #####:  475:      } else {
    $$$$$:  475-block  0
    #####:  476:        __delta = __len / 2;
    #####:  477:        __m += __delta;
    #####:  478:        __n_swaps = std::__sort3<_AlgPolicy, _Compare>(__first, __m, __lm1, __comp);
    $$$$$:  478-block  0
        -:  479:      }
        -:  480:    }
        -:  481:    // *__m is median
        -:  482:    // partition [__first, __m) < *__m and *__m <= [__m, __last)
        -:  483:    // (this inhibits tossing elements equivalent to __m around unnecessarily)
    #####:  484:    _RandomAccessIterator __i = __first;
    #####:  485:    _RandomAccessIterator __j = __lm1;
        -:  486:    // j points beyond range to be tested, *__m is known to be <= *__lm1
        -:  487:    // The search going up is known to be guarded but the search coming down isn't.
        -:  488:    // Prime the downward search with a guard.
    #####:  489:    if (!__comp(*__i, *__m)) // if *__first == *__m
    $$$$$:  489-block  0
branch  0 never executed
branch  1 never executed
        -:  490:    {
        -:  491:      // *__first == *__m, *__first doesn't go in first part
        -:  492:      // manually guard downward moving __j against __i
    #####:  493:      while (true) {
    $$$$$:  493-block  0
    $$$$$:  493-block  1
    #####:  494:        if (__i == --__j) {
    $$$$$:  494-block  0
branch  0 never executed
branch  1 never executed
        -:  495:          // *__first == *__m, *__m <= all other elements
        -:  496:          // Parition instead into [__first, __i) == *__first and *__first < [__i, __last)
    #####:  497:          ++__i; // __first + 1
    #####:  498:          __j = __last;
    #####:  499:          if (!__comp(*__first, *--__j)) // we need a guard if *__first == *(__last-1)
    $$$$$:  499-block  0
branch  0 never executed
branch  1 never executed
        -:  500:          {
    #####:  501:            while (true) {
    $$$$$:  501-block  0
    $$$$$:  501-block  1
    #####:  502:              if (__i == __j)
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
    #####:  503:                return; // [__first, __last) all equivalent elements
    $$$$$:  503-block  0
    #####:  504:              if (__comp(*__first, *__i)) {
    $$$$$:  504-block  0
branch  0 never executed
branch  1 never executed
    #####:  505:                _Ops::iter_swap(__i, __j);
    #####:  506:                ++__n_swaps;
    #####:  507:                ++__i;
    #####:  508:                break;
    $$$$$:  508-block  0
        -:  509:              }
    #####:  510:              ++__i;
        -:  511:            }
    #####:  512:          }
    $$$$$:  512-block  0
        -:  513:          // [__first, __i) == *__first and *__first < [__j, __last) and __j == __last - 1
    #####:  514:          if (__i == __j)
    $$$$$:  514-block  0
branch  0 never executed
branch  1 never executed
    #####:  515:            return;
    $$$$$:  515-block  0
    #####:  516:          while (true) {
    $$$$$:  516-block  0
    $$$$$:  516-block  1
    #####:  517:            while (!__comp(*__first, *__i))
    $$$$$:  517-block  0
    $$$$$:  517-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  517-block  2
    #####:  518:              ++__i;
    #####:  519:            while (__comp(*__first, *--__j))
    $$$$$:  519-block  0
    $$$$$:  519-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  519-block  2
        -:  520:              ;
    #####:  521:            if (__i >= __j)
    $$$$$:  521-block  0
branch  0 never executed
branch  1 never executed
    #####:  522:              break;
    $$$$$:  522-block  0
    #####:  523:            _Ops::iter_swap(__i, __j);
    #####:  524:            ++__n_swaps;
    #####:  525:            ++__i;
        -:  526:          }
        -:  527:          // [__first, __i) == *__first and *__first < [__i, __last)
        -:  528:          // The first part is sorted, sort the second part
        -:  529:          // _VSTD::__sort<_Compare>(__i, __last, __comp);
    #####:  530:          __first = __i;
    #####:  531:          goto __restart;
    $$$$$:  531-block  0
        -:  532:        }
    #####:  533:        if (__comp(*__j, *__m)) {
    $$$$$:  533-block  0
branch  0 never executed
branch  1 never executed
    #####:  534:          _Ops::iter_swap(__i, __j);
    #####:  535:          ++__n_swaps;
    #####:  536:          break; // found guard for downward moving __j, now use unguarded partition
    $$$$$:  536-block  0
        -:  537:        }
        -:  538:      }
    #####:  539:    }
    $$$$$:  539-block  0
        -:  540:    // It is known that *__i < *__m
    #####:  541:    ++__i;
        -:  542:    // j points beyond range to be tested, *__m is known to be <= *__lm1
        -:  543:    // if not yet partitioned...
    #####:  544:    if (__i < __j) {
    $$$$$:  544-block  0
branch  0 never executed
branch  1 never executed
        -:  545:      // known that *(__i - 1) < *__m
        -:  546:      // known that __i <= __m
    #####:  547:      while (true) {
    $$$$$:  547-block  0
    $$$$$:  547-block  1
        -:  548:        // __m still guards upward moving __i
    #####:  549:        while (__comp(*__i, *__m))
    $$$$$:  549-block  0
    $$$$$:  549-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  549-block  2
    #####:  550:          ++__i;
        -:  551:        // It is now known that a guard exists for downward moving __j
    #####:  552:        while (!__comp(*--__j, *__m))
    $$$$$:  552-block  0
    $$$$$:  552-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  552-block  2
        -:  553:          ;
    #####:  554:        if (__i > __j)
    $$$$$:  554-block  0
branch  0 never executed
branch  1 never executed
    #####:  555:          break;
    $$$$$:  555-block  0
    #####:  556:        _Ops::iter_swap(__i, __j);
    #####:  557:        ++__n_swaps;
        -:  558:        // It is known that __m != __j
        -:  559:        // If __m just moved, follow it
    #####:  560:        if (__m == __i)
    $$$$$:  560-block  0
branch  0 never executed
branch  1 never executed
    #####:  561:          __m = __j;
    $$$$$:  561-block  0
    #####:  562:        ++__i;
        -:  563:      }
    #####:  564:    }
    $$$$$:  564-block  0
        -:  565:    // [__first, __i) < *__m and *__m <= [__i, __last)
    #####:  566:    if (__i != __m && __comp(*__m, *__i)) {
    $$$$$:  566-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  566-block  1
branch  2 never executed
branch  3 never executed
    #####:  567:      _Ops::iter_swap(__i, __m);
    #####:  568:      ++__n_swaps;
    #####:  569:    }
    $$$$$:  569-block  0
        -:  570:    // [__first, __i) < *__i and *__i <= [__i+1, __last)
        -:  571:    // If we were given a perfect partition, see if insertion sort is quick...
    #####:  572:    if (__n_swaps == 0) {
    $$$$$:  572-block  0
branch  0 never executed
branch  1 never executed
        -:  573:      using _WrappedComp = typename _WrapAlgPolicy<_AlgPolicy, _Compare>::type;
    #####:  574:      _WrappedComp __wrapped_comp(__comp);
    #####:  575:      bool __fs = std::__insertion_sort_incomplete<_WrappedComp>(__first, __i, __wrapped_comp);
    #####:  576:      if (std::__insertion_sort_incomplete<_WrappedComp>(__i + difference_type(1), __last, __wrapped_comp)) {
    $$$$$:  576-block  0
branch  0 never executed
branch  1 never executed
    #####:  577:        if (__fs)
    $$$$$:  577-block  0
branch  0 never executed
branch  1 never executed
    #####:  578:          return;
    $$$$$:  578-block  0
    #####:  579:        __last = __i;
    #####:  580:        continue;
    $$$$$:  580-block  0
        -:  581:      } else {
    #####:  582:        if (__fs) {
    $$$$$:  582-block  0
branch  0 never executed
branch  1 never executed
    #####:  583:          __first = ++__i;
    #####:  584:          continue;
    $$$$$:  584-block  0
        -:  585:        }
        -:  586:      }
    #####:  587:    }
    $$$$$:  587-block  0
        -:  588:    // sort smaller range with recursive call and larger with tail recursion elimination
    #####:  589:    if (__i - __first < __last - __i) {
    $$$$$:  589-block  0
branch  0 never executed
branch  1 never executed
    #####:  590:      std::__introsort<_AlgPolicy, _Compare>(__first, __i, __comp, __depth);
    #####:  591:      __first = ++__i;
    #####:  592:    } else {
    $$$$$:  592-block  0
    #####:  593:      std::__introsort<_AlgPolicy, _Compare>(__i + difference_type(1), __last, __comp, __depth);
    #####:  594:      __last = __i;
    $$$$$:  594-block  0
        -:  595:    }
        -:  596:  }
        1:  597:}
        1:  597-block  0
        -:  598:
        -:  599:template <typename _Number>
function _ZNSt3__17__log2iB6v15006IlEET_S1_ called 1 returned 100% blocks executed 75%
        1:  600:inline _LIBCPP_HIDE_FROM_ABI _Number __log2i(_Number __n) {
        1:  601:  if (__n == 0)
        1:  601-block  0
branch  0 taken 0
branch  1 taken 1
    #####:  602:    return 0;
    $$$$$:  602-block  0
        -:  603:  if (sizeof(__n) <= sizeof(unsigned))
        -:  604:    return sizeof(unsigned) * CHAR_BIT - 1 - __libcpp_clz(static_cast<unsigned>(__n));
        -:  605:  if (sizeof(__n) <= sizeof(unsigned long))
        1:  606:    return sizeof(unsigned long) * CHAR_BIT - 1 - __libcpp_clz(static_cast<unsigned long>(__n));
        1:  606-block  0
        -:  607:  if (sizeof(__n) <= sizeof(unsigned long long))
        -:  608:    return sizeof(unsigned long long) * CHAR_BIT - 1 - __libcpp_clz(static_cast<unsigned long long>(__n));
        -:  609:
        -:  610:  _Number __log2 = 0;
        -:  611:  while (__n > 1) {
        -:  612:    __log2++;
        -:  613:    __n >>= 1;
        -:  614:  }
        -:  615:  return __log2;
        1:  616:}
        1:  616-block  0
        -:  617:
        -:  618:template <class _WrappedComp, class _RandomAccessIterator>
function _ZNSt3__16__sortIRPFbPKN7doctest6detail8TestCaseES5_EPS5_EEvT0_SA_T_ called 1 returned 100% blocks executed 100%
        1:  619:void __sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _WrappedComp __wrapped_comp) {
        -:  620:  typedef typename iterator_traits<_RandomAccessIterator>::difference_type difference_type;
        1:  621:  difference_type __depth_limit = 2 * __log2i(__last - __first);
        -:  622:
        -:  623:  using _Unwrap = _UnwrapAlgPolicy<_WrappedComp>;
        -:  624:  using _AlgPolicy = typename _Unwrap::_AlgPolicy;
        -:  625:  using _Compare = typename _Unwrap::_Comp;
        1:  626:  _Compare __comp = _Unwrap::__get_comp(__wrapped_comp);
        1:  627:  std::__introsort<_AlgPolicy, _Compare>(__first, __last, __comp, __depth_limit);
        1:  628:}
        1:  628-block  0
        -:  629:
        -:  630:template <class _Compare, class _Tp>
        -:  631:inline _LIBCPP_INLINE_VISIBILITY void __sort(_Tp** __first, _Tp** __last, __less<_Tp*>&) {
        -:  632:  __less<uintptr_t> __comp;
        -:  633:  std::__sort<__less<uintptr_t>&, uintptr_t*>((uintptr_t*)__first, (uintptr_t*)__last, __comp);
        -:  634:}
        -:  635:
        -:  636:extern template _LIBCPP_FUNC_VIS void __sort<__less<char>&, char*>(char*, char*, __less<char>&);
        -:  637:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  638:extern template _LIBCPP_FUNC_VIS void __sort<__less<wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, __less<wchar_t>&);
        -:  639:#endif
        -:  640:extern template _LIBCPP_FUNC_VIS void __sort<__less<signed char>&, signed char*>(signed char*, signed char*, __less<signed char>&);
        -:  641:extern template _LIBCPP_FUNC_VIS void __sort<__less<unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, __less<unsigned char>&);
        -:  642:extern template _LIBCPP_FUNC_VIS void __sort<__less<short>&, short*>(short*, short*, __less<short>&);
        -:  643:extern template _LIBCPP_FUNC_VIS void __sort<__less<unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, __less<unsigned short>&);
        -:  644:extern template _LIBCPP_FUNC_VIS void __sort<__less<int>&, int*>(int*, int*, __less<int>&);
        -:  645:extern template _LIBCPP_FUNC_VIS void __sort<__less<unsigned>&, unsigned*>(unsigned*, unsigned*, __less<unsigned>&);
        -:  646:extern template _LIBCPP_FUNC_VIS void __sort<__less<long>&, long*>(long*, long*, __less<long>&);
        -:  647:extern template _LIBCPP_FUNC_VIS void __sort<__less<unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, __less<unsigned long>&);
        -:  648:extern template _LIBCPP_FUNC_VIS void __sort<__less<long long>&, long long*>(long long*, long long*, __less<long long>&);
        -:  649:extern template _LIBCPP_FUNC_VIS void __sort<__less<unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, __less<unsigned long long>&);
        -:  650:extern template _LIBCPP_FUNC_VIS void __sort<__less<float>&, float*>(float*, float*, __less<float>&);
        -:  651:extern template _LIBCPP_FUNC_VIS void __sort<__less<double>&, double*>(double*, double*, __less<double>&);
        -:  652:extern template _LIBCPP_FUNC_VIS void __sort<__less<long double>&, long double*>(long double*, long double*, __less<long double>&);
        -:  653:
        -:  654:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<char>&, char*>(char*, char*, __less<char>&);
        -:  655:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  656:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<wchar_t>&, wchar_t*>(wchar_t*, wchar_t*, __less<wchar_t>&);
        -:  657:#endif
        -:  658:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<signed char>&, signed char*>(signed char*, signed char*, __less<signed char>&);
        -:  659:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned char>&, unsigned char*>(unsigned char*, unsigned char*, __less<unsigned char>&);
        -:  660:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<short>&, short*>(short*, short*, __less<short>&);
        -:  661:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned short>&, unsigned short*>(unsigned short*, unsigned short*, __less<unsigned short>&);
        -:  662:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<int>&, int*>(int*, int*, __less<int>&);
        -:  663:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned>&, unsigned*>(unsigned*, unsigned*, __less<unsigned>&);
        -:  664:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<long>&, long*>(long*, long*, __less<long>&);
        -:  665:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned long>&, unsigned long*>(unsigned long*, unsigned long*, __less<unsigned long>&);
        -:  666:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<long long>&, long long*>(long long*, long long*, __less<long long>&);
        -:  667:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<unsigned long long>&, unsigned long long*>(unsigned long long*, unsigned long long*, __less<unsigned long long>&);
        -:  668:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<float>&, float*>(float*, float*, __less<float>&);
        -:  669:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<double>&, double*>(double*, double*, __less<double>&);
        -:  670:extern template _LIBCPP_FUNC_VIS bool __insertion_sort_incomplete<__less<long double>&, long double*>(long double*, long double*, __less<long double>&);
        -:  671:
        -:  672:extern template _LIBCPP_FUNC_VIS unsigned __sort5<__less<long double>&, long double*>(long double*, long double*, long double*, long double*, long double*, __less<long double>&);
        -:  673:
        -:  674:template <class _AlgPolicy, class _RandomAccessIterator, class _Comp>
        -:  675:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__111__sort_implB6v15006INS_17_ClassicAlgPolicyENS_11__wrap_iterIPPKN7doctest6detail8TestCaseEEEPFbS7_S7_EEEvT0_SC_RT1_ called 1 returned 100% blocks executed 100%
        1:  676:void __sort_impl(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp& __comp) {
        1:  677:  std::__debug_randomize_range<_AlgPolicy>(__first, __last);
        -:  678:
        -:  679:  using _Comp_ref = typename __comp_ref_type<_Comp>::type;
        -:  680:  if (__libcpp_is_constant_evaluated()) {
        -:  681:    std::__partial_sort<_AlgPolicy>(__first, __last, __last, __comp);
        -:  682:
        -:  683:  } else {
        -:  684:    using _WrappedComp = typename _WrapAlgPolicy<_AlgPolicy, _Comp_ref>::type;
        1:  685:    _Comp_ref __comp_ref(__comp);
        1:  686:    _WrappedComp __wrapped_comp(__comp_ref);
        1:  687:    std::__sort<_WrappedComp>(std::__unwrap_iter(__first), std::__unwrap_iter(__last), __wrapped_comp);
        -:  688:  }
        1:  689:}
        1:  689-block  0
        -:  690:
        -:  691:template <class _RandomAccessIterator, class _Comp>
        -:  692:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__14sortB6v15006INS_11__wrap_iterIPPKN7doctest6detail8TestCaseEEEPFbS6_S6_EEEvT_SB_T0_ called 1 returned 100% blocks executed 100%
        1:  693:void sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Comp __comp) {
        1:  694:  std::__sort_impl<_ClassicAlgPolicy>(std::move(__first), std::move(__last), __comp);
        1:  695:}
        1:  695-block  0
        -:  696:
        -:  697:template <class _RandomAccessIterator>
        -:  698:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  699:void sort(_RandomAccessIterator __first, _RandomAccessIterator __last) {
        -:  700:  std::sort(__first, __last, __less<typename iterator_traits<_RandomAccessIterator>::value_type>());
        -:  701:}
        -:  702:
        -:  703:_LIBCPP_END_NAMESPACE_STD
        -:  704:
        -:  705:#endif // _LIBCPP___ALGORITHM_SORT_H
