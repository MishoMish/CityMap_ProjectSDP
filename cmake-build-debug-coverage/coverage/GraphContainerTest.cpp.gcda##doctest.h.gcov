        -:    0:Source:/Users/mihaildobroslavski/CLionProjects/CityMapProject/UnitTesting/doctest.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphContainerTest.dir/UnitTesting/GraphContainerTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/GraphContainerTest.dir/UnitTesting/GraphContainerTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ====================================================================== lgtm [cpp/missing-header-guard]
        -:    2:// == DO NOT MODIFY THIS FILE BY HAND - IT IS AUTO GENERATED BY CMAKE! ==
        -:    3:// ======================================================================
        -:    4://
        -:    5:// doctest.h - the lightest feature-rich C++ single-header testing framework for unit tests and TDD
        -:    6://
        -:    7:// Copyright (c) 2016-2023 Viktor Kirilov
        -:    8://
        -:    9:// Distributed under the MIT Software License
        -:   10:// See accompanying file LICENSE.txt or copy at
        -:   11:// https://opensource.org/licenses/MIT
        -:   12://
        -:   13:// The documentation can be found at the library's page:
        -:   14:// https://github.com/doctest/doctest/blob/master/doc/markdown/readme.md
        -:   15://
        -:   16:// =================================================================================================
        -:   17:// =================================================================================================
        -:   18:// =================================================================================================
        -:   19://
        -:   20:// The library is heavily influenced by Catch - https://github.com/catchorg/Catch2
        -:   21:// which uses the Boost Software License - Version 1.0
        -:   22:// see here - https://github.com/catchorg/Catch2/blob/master/LICENSE.txt
        -:   23://
        -:   24:// The concept of subcases (sections in Catch) and expression decomposition are from there.
        -:   25:// Some parts of the code are taken directly:
        -:   26:// - stringification - the detection of "ostream& operator<<(ostream&, const T&)" and StringMaker<>
        -:   27:// - the Approx() helper class for floating point comparison
        -:   28:// - colors in the console
        -:   29:// - breaking into a debugger
        -:   30:// - signal / SEH handling
        -:   31:// - timer
        -:   32:// - XmlWriter class - thanks to Phil Nash for allowing the direct reuse (AKA copy/paste)
        -:   33://
        -:   34:// The expression decomposing templates are taken from lest - https://github.com/martinmoene/lest
        -:   35:// which uses the Boost Software License - Version 1.0
        -:   36:// see here - https://github.com/martinmoene/lest/blob/master/LICENSE.txt
        -:   37://
        -:   38:// =================================================================================================
        -:   39:// =================================================================================================
        -:   40:// =================================================================================================
        -:   41:
        -:   42:#ifndef DOCTEST_LIBRARY_INCLUDED
        -:   43:#define DOCTEST_LIBRARY_INCLUDED
        -:   44:
        -:   45:// =================================================================================================
        -:   46:// == VERSION ======================================================================================
        -:   47:// =================================================================================================
        -:   48:
        -:   49:#define DOCTEST_VERSION_MAJOR 2
        -:   50:#define DOCTEST_VERSION_MINOR 4
        -:   51:#define DOCTEST_VERSION_PATCH 11
        -:   52:
        -:   53:// util we need here
        -:   54:#define DOCTEST_TOSTR_IMPL(x) #x
        -:   55:#define DOCTEST_TOSTR(x) DOCTEST_TOSTR_IMPL(x)
        -:   56:
        -:   57:#define DOCTEST_VERSION_STR                                                                        \
        -:   58:    DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) "."                                                       \
        -:   59:    DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) "."                                                       \
        -:   60:    DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)
        -:   61:
        -:   62:#define DOCTEST_VERSION                                                                            \
        -:   63:    (DOCTEST_VERSION_MAJOR * 10000 + DOCTEST_VERSION_MINOR * 100 + DOCTEST_VERSION_PATCH)
        -:   64:
        -:   65:// =================================================================================================
        -:   66:// == COMPILER VERSION =============================================================================
        -:   67:// =================================================================================================
        -:   68:
        -:   69:// ideas for the version stuff are taken from here: https://github.com/cxxstuff/cxx_detect
        -:   70:
        -:   71:#ifdef _MSC_VER
        -:   72:#define DOCTEST_CPLUSPLUS _MSVC_LANG
        -:   73:#else
        -:   74:#define DOCTEST_CPLUSPLUS __cplusplus
        -:   75:#endif
        -:   76:
        -:   77:#define DOCTEST_COMPILER(MAJOR, MINOR, PATCH) ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))
        -:   78:
        -:   79:// GCC/Clang and GCC/MSVC are mutually exclusive, but Clang/MSVC are not because of clang-cl...
        -:   80:#if defined(_MSC_VER) && defined(_MSC_FULL_VER)
        -:   81:                                                                                                                        #if _MSC_VER == _MSC_FULL_VER / 10000
        -:   82:#define DOCTEST_MSVC DOCTEST_COMPILER(_MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 10000)
        -:   83:#else // MSVC
        -:   84:#define DOCTEST_MSVC                                                                               \
        -:   85:    DOCTEST_COMPILER(_MSC_VER / 100, (_MSC_FULL_VER / 100000) % 100, _MSC_FULL_VER % 100000)
        -:   86:#endif // MSVC
        -:   87:#endif // MSVC
        -:   88:#if defined(__clang__) && defined(__clang_minor__) && defined(__clang_patchlevel__)
        -:   89:#define DOCTEST_CLANG DOCTEST_COMPILER(__clang_major__, __clang_minor__, __clang_patchlevel__)
        -:   90:#elif defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__) && \
        -:   91:        !defined(__INTEL_COMPILER)
        -:   92:#define DOCTEST_GCC DOCTEST_COMPILER(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)
        -:   93:#endif // GCC
        -:   94:#if defined(__INTEL_COMPILER)
        -:   95:#define DOCTEST_ICC DOCTEST_COMPILER(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)
        -:   96:#endif // ICC
        -:   97:
        -:   98:#ifndef DOCTEST_MSVC
        -:   99:#define DOCTEST_MSVC 0
        -:  100:#endif // DOCTEST_MSVC
        -:  101:#ifndef DOCTEST_CLANG
        -:  102:#define DOCTEST_CLANG 0
        -:  103:#endif // DOCTEST_CLANG
        -:  104:#ifndef DOCTEST_GCC
        -:  105:#define DOCTEST_GCC 0
        -:  106:#endif // DOCTEST_GCC
        -:  107:#ifndef DOCTEST_ICC
        -:  108:#define DOCTEST_ICC 0
        -:  109:#endif // DOCTEST_ICC
        -:  110:
        -:  111:// =================================================================================================
        -:  112:// == COMPILER WARNINGS HELPERS ====================================================================
        -:  113:// =================================================================================================
        -:  114:
        -:  115:#if DOCTEST_CLANG && !DOCTEST_ICC
        -:  116:#define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)
        -:  117:#define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH _Pragma("clang diagnostic push")
        -:  118:#define DOCTEST_CLANG_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(clang diagnostic ignored w)
        -:  119:#define DOCTEST_CLANG_SUPPRESS_WARNING_POP _Pragma("clang diagnostic pop")
        -:  120:#define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)                                                \
        -:  121:    DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_CLANG_SUPPRESS_WARNING(w)
        -:  122:#else // DOCTEST_CLANG
        -:  123:                                                                                                                        #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH
        -:  124:#define DOCTEST_CLANG_SUPPRESS_WARNING(w)
        -:  125:#define DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -:  126:#define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)
        -:  127:#endif // DOCTEST_CLANG
        -:  128:
        -:  129:#if DOCTEST_GCC
        -:  130:                                                                                                                        #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)
        -:  131:#define DOCTEST_GCC_SUPPRESS_WARNING_PUSH _Pragma("GCC diagnostic push")
        -:  132:#define DOCTEST_GCC_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(GCC diagnostic ignored w)
        -:  133:#define DOCTEST_GCC_SUPPRESS_WARNING_POP _Pragma("GCC diagnostic pop")
        -:  134:#define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)                                                  \
        -:  135:    DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING(w)
        -:  136:#else // DOCTEST_GCC
        -:  137:#define DOCTEST_GCC_SUPPRESS_WARNING_PUSH
        -:  138:#define DOCTEST_GCC_SUPPRESS_WARNING(w)
        -:  139:#define DOCTEST_GCC_SUPPRESS_WARNING_POP
        -:  140:#define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)
        -:  141:#endif // DOCTEST_GCC
        -:  142:
        -:  143:#if DOCTEST_MSVC
        -:  144:                                                                                                                        #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH __pragma(warning(push))
        -:  145:#define DOCTEST_MSVC_SUPPRESS_WARNING(w) __pragma(warning(disable : w))
        -:  146:#define DOCTEST_MSVC_SUPPRESS_WARNING_POP __pragma(warning(pop))
        -:  147:#define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)                                                 \
        -:  148:    DOCTEST_MSVC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING(w)
        -:  149:#else // DOCTEST_MSVC
        -:  150:#define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH
        -:  151:#define DOCTEST_MSVC_SUPPRESS_WARNING(w)
        -:  152:#define DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -:  153:#define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)
        -:  154:#endif // DOCTEST_MSVC
        -:  155:
        -:  156:// =================================================================================================
        -:  157:// == COMPILER WARNINGS ============================================================================
        -:  158:// =================================================================================================
        -:  159:
        -:  160:// both the header and the implementation suppress all of these,
        -:  161:// so it only makes sense to aggregate them like so
        -:  162:#define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH                                                      \
        -:  163:    DOCTEST_CLANG_SUPPRESS_WARNING_PUSH                                                            \
        -:  164:    DOCTEST_CLANG_SUPPRESS_WARNING("-Wunknown-pragmas")                                            \
        -:  165:    DOCTEST_CLANG_SUPPRESS_WARNING("-Wweak-vtables")                                               \
        -:  166:    DOCTEST_CLANG_SUPPRESS_WARNING("-Wpadded")                                                     \
        -:  167:    DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-prototypes")                                         \
        -:  168:    DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat")                                               \
        -:  169:    DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat-pedantic")                                      \
        -:  170:                                                                                                   \
        -:  171:    DOCTEST_GCC_SUPPRESS_WARNING_PUSH                                                              \
        -:  172:    DOCTEST_GCC_SUPPRESS_WARNING("-Wunknown-pragmas")                                              \
        -:  173:    DOCTEST_GCC_SUPPRESS_WARNING("-Wpragmas")                                                      \
        -:  174:    DOCTEST_GCC_SUPPRESS_WARNING("-Weffc++")                                                       \
        -:  175:    DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-overflow")                                              \
        -:  176:    DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-aliasing")                                              \
        -:  177:    DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-declarations")                                         \
        -:  178:    DOCTEST_GCC_SUPPRESS_WARNING("-Wuseless-cast")                                                 \
        -:  179:    DOCTEST_GCC_SUPPRESS_WARNING("-Wnoexcept")                                                     \
        -:  180:                                                                                                   \
        -:  181:    DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \
        -:  182:    /* these 4 also disabled globally via cmake: */                                                \
        -:  183:    DOCTEST_MSVC_SUPPRESS_WARNING(4514) /* unreferenced inline function has been removed */        \
        -:  184:    DOCTEST_MSVC_SUPPRESS_WARNING(4571) /* SEH related */                                          \
        -:  185:    DOCTEST_MSVC_SUPPRESS_WARNING(4710) /* function not inlined */                                 \
        -:  186:    DOCTEST_MSVC_SUPPRESS_WARNING(4711) /* function selected for inline expansion*/                \
        -:  187:    /* common ones */                                                                              \
        -:  188:    DOCTEST_MSVC_SUPPRESS_WARNING(4616) /* invalid compiler warning */                             \
        -:  189:    DOCTEST_MSVC_SUPPRESS_WARNING(4619) /* invalid compiler warning */                             \
        -:  190:    DOCTEST_MSVC_SUPPRESS_WARNING(4996) /* The compiler encountered a deprecated declaration */    \
        -:  191:    DOCTEST_MSVC_SUPPRESS_WARNING(4706) /* assignment within conditional expression */             \
        -:  192:    DOCTEST_MSVC_SUPPRESS_WARNING(4512) /* 'class' : assignment operator could not be generated */ \
        -:  193:    DOCTEST_MSVC_SUPPRESS_WARNING(4127) /* conditional expression is constant */                   \
        -:  194:    DOCTEST_MSVC_SUPPRESS_WARNING(4820) /* padding */                                              \
        -:  195:    DOCTEST_MSVC_SUPPRESS_WARNING(4625) /* copy constructor was implicitly deleted */              \
        -:  196:    DOCTEST_MSVC_SUPPRESS_WARNING(4626) /* assignment operator was implicitly deleted */           \
        -:  197:    DOCTEST_MSVC_SUPPRESS_WARNING(5027) /* move assignment operator implicitly deleted */          \
        -:  198:    DOCTEST_MSVC_SUPPRESS_WARNING(5026) /* move constructor was implicitly deleted */              \
        -:  199:    DOCTEST_MSVC_SUPPRESS_WARNING(4640) /* construction of local static object not thread-safe */  \
        -:  200:    DOCTEST_MSVC_SUPPRESS_WARNING(5045) /* Spectre mitigation for memory load */                   \
        -:  201:    DOCTEST_MSVC_SUPPRESS_WARNING(5264) /* 'variable-name': 'const' variable is not used */        \
        -:  202:    /* static analysis */                                                                          \
        -:  203:    DOCTEST_MSVC_SUPPRESS_WARNING(26439) /* Function may not throw. Declare it 'noexcept' */       \
        -:  204:    DOCTEST_MSVC_SUPPRESS_WARNING(26495) /* Always initialize a member variable */                 \
        -:  205:    DOCTEST_MSVC_SUPPRESS_WARNING(26451) /* Arithmetic overflow ... */                             \
        -:  206:    DOCTEST_MSVC_SUPPRESS_WARNING(26444) /* Avoid unnamed objects with custom ctor and dtor... */  \
        -:  207:    DOCTEST_MSVC_SUPPRESS_WARNING(26812) /* Prefer 'enum class' over 'enum' */
        -:  208:
        -:  209:#define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP                                                       \
        -:  210:    DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \
        -:  211:    DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \
        -:  212:    DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -:  213:
        -:  214:DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH
        -:  215:
        -:  216:DOCTEST_CLANG_SUPPRESS_WARNING_PUSH
        -:  217:DOCTEST_CLANG_SUPPRESS_WARNING("-Wnon-virtual-dtor")
        -:  218:DOCTEST_CLANG_SUPPRESS_WARNING("-Wdeprecated")
        -:  219:
        -:  220:DOCTEST_GCC_SUPPRESS_WARNING_PUSH
        -:  221:DOCTEST_GCC_SUPPRESS_WARNING("-Wctor-dtor-privacy")
        -:  222:DOCTEST_GCC_SUPPRESS_WARNING("-Wnon-virtual-dtor")
        -:  223:DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-promo")
        -:  224:
        -:  225:DOCTEST_MSVC_SUPPRESS_WARNING_PUSH
        -:  226:DOCTEST_MSVC_SUPPRESS_WARNING(4623) // default constructor was implicitly defined as deleted
        -:  227:
        -:  228:#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN                                 \
        -:  229:    DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \
        -:  230:    DOCTEST_MSVC_SUPPRESS_WARNING(4548) /* before comma no effect; expected side - effect */       \
        -:  231:    DOCTEST_MSVC_SUPPRESS_WARNING(4265) /* virtual functions, but destructor is not virtual */     \
        -:  232:    DOCTEST_MSVC_SUPPRESS_WARNING(4986) /* exception specification does not match previous */      \
        -:  233:    DOCTEST_MSVC_SUPPRESS_WARNING(4350) /* 'member1' called instead of 'member2' */                \
        -:  234:    DOCTEST_MSVC_SUPPRESS_WARNING(4668) /* not defined as a preprocessor macro */                  \
        -:  235:    DOCTEST_MSVC_SUPPRESS_WARNING(4365) /* signed/unsigned mismatch */                             \
        -:  236:    DOCTEST_MSVC_SUPPRESS_WARNING(4774) /* format string not a string literal */                   \
        -:  237:    DOCTEST_MSVC_SUPPRESS_WARNING(4820) /* padding */                                              \
        -:  238:    DOCTEST_MSVC_SUPPRESS_WARNING(4625) /* copy constructor was implicitly deleted */              \
        -:  239:    DOCTEST_MSVC_SUPPRESS_WARNING(4626) /* assignment operator was implicitly deleted */           \
        -:  240:    DOCTEST_MSVC_SUPPRESS_WARNING(5027) /* move assignment operator implicitly deleted */          \
        -:  241:    DOCTEST_MSVC_SUPPRESS_WARNING(5026) /* move constructor was implicitly deleted */              \
        -:  242:    DOCTEST_MSVC_SUPPRESS_WARNING(4623) /* default constructor was implicitly deleted */           \
        -:  243:    DOCTEST_MSVC_SUPPRESS_WARNING(5039) /* pointer to pot. throwing function passed to extern C */ \
        -:  244:    DOCTEST_MSVC_SUPPRESS_WARNING(5045) /* Spectre mitigation for memory load */                   \
        -:  245:    DOCTEST_MSVC_SUPPRESS_WARNING(5105) /* macro producing 'defined' has undefined behavior */     \
        -:  246:    DOCTEST_MSVC_SUPPRESS_WARNING(4738) /* storing float result in memory, loss of performance */  \
        -:  247:    DOCTEST_MSVC_SUPPRESS_WARNING(5262) /* implicit fall-through */
        -:  248:
        -:  249:#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -:  250:
        -:  251:// =================================================================================================
        -:  252:// == FEATURE DETECTION ============================================================================
        -:  253:// =================================================================================================
        -:  254:
        -:  255:// general compiler feature support table: https://en.cppreference.com/w/cpp/compiler_support
        -:  256:// MSVC C++11 feature support table: https://msdn.microsoft.com/en-us/library/hh567368.aspx
        -:  257:// GCC C++11 feature support table: https://gcc.gnu.org/projects/cxx-status.html
        -:  258:// MSVC version table:
        -:  259:// https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering
        -:  260:// MSVC++ 14.3 (17) _MSC_VER == 1930 (Visual Studio 2022)
        -:  261:// MSVC++ 14.2 (16) _MSC_VER == 1920 (Visual Studio 2019)
        -:  262:// MSVC++ 14.1 (15) _MSC_VER == 1910 (Visual Studio 2017)
        -:  263:// MSVC++ 14.0      _MSC_VER == 1900 (Visual Studio 2015)
        -:  264:// MSVC++ 12.0      _MSC_VER == 1800 (Visual Studio 2013)
        -:  265:// MSVC++ 11.0      _MSC_VER == 1700 (Visual Studio 2012)
        -:  266:// MSVC++ 10.0      _MSC_VER == 1600 (Visual Studio 2010)
        -:  267:// MSVC++ 9.0       _MSC_VER == 1500 (Visual Studio 2008)
        -:  268:// MSVC++ 8.0       _MSC_VER == 1400 (Visual Studio 2005)
        -:  269:
        -:  270:// Universal Windows Platform support
        -:  271:#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
        -:  272:#define DOCTEST_CONFIG_NO_WINDOWS_SEH
        -:  273:#endif // WINAPI_FAMILY
        -:  274:#if DOCTEST_MSVC && !defined(DOCTEST_CONFIG_WINDOWS_SEH)
        -:  275:#define DOCTEST_CONFIG_WINDOWS_SEH
        -:  276:#endif // MSVC
        -:  277:#if defined(DOCTEST_CONFIG_NO_WINDOWS_SEH) && defined(DOCTEST_CONFIG_WINDOWS_SEH)
        -:  278:#undef DOCTEST_CONFIG_WINDOWS_SEH
        -:  279:#endif // DOCTEST_CONFIG_NO_WINDOWS_SEH
        -:  280:
        -:  281:#if !defined(_WIN32) && !defined(__QNX__) && !defined(DOCTEST_CONFIG_POSIX_SIGNALS) && \
        -:  282:        !defined(__EMSCRIPTEN__) && !defined(__wasi__)
        -:  283:#define DOCTEST_CONFIG_POSIX_SIGNALS
        -:  284:#endif // _WIN32
        -:  285:#if defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS) && defined(DOCTEST_CONFIG_POSIX_SIGNALS)
        -:  286:#undef DOCTEST_CONFIG_POSIX_SIGNALS
        -:  287:#endif // DOCTEST_CONFIG_NO_POSIX_SIGNALS
        -:  288:
        -:  289:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -:  290:#if !defined(__cpp_exceptions) && !defined(__EXCEPTIONS) && !defined(_CPPUNWIND)                   \
        -:  291: || defined(__wasi__)
        -:  292:#define DOCTEST_CONFIG_NO_EXCEPTIONS
        -:  293:#endif // no exceptions
        -:  294:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -:  295:
        -:  296:#ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS
        -:  297:                                                                                                                        #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -:  298:#define DOCTEST_CONFIG_NO_EXCEPTIONS
        -:  299:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -:  300:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS
        -:  301:
        -:  302:#if defined(DOCTEST_CONFIG_NO_EXCEPTIONS) && !defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)
        -:  303:#define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS
        -:  304:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS && !DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS
        -:  305:
        -:  306:#ifdef __wasi__
        -:  307:#define DOCTEST_CONFIG_NO_MULTITHREADING
        -:  308:#endif
        -:  309:
        -:  310:#if defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN) && !defined(DOCTEST_CONFIG_IMPLEMENT)
        -:  311:#define DOCTEST_CONFIG_IMPLEMENT
        -:  312:#endif // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
        -:  313:
        -:  314:#if defined(_WIN32) || defined(__CYGWIN__)
        -:  315:                                                                                                                        #if DOCTEST_MSVC
        -:  316:#define DOCTEST_SYMBOL_EXPORT __declspec(dllexport)
        -:  317:#define DOCTEST_SYMBOL_IMPORT __declspec(dllimport)
        -:  318:#else // MSVC
        -:  319:#define DOCTEST_SYMBOL_EXPORT __attribute__((dllexport))
        -:  320:#define DOCTEST_SYMBOL_IMPORT __attribute__((dllimport))
        -:  321:#endif // MSVC
        -:  322:#else  // _WIN32
        -:  323:#define DOCTEST_SYMBOL_EXPORT __attribute__((visibility("default")))
        -:  324:#define DOCTEST_SYMBOL_IMPORT
        -:  325:#endif // _WIN32
        -:  326:
        -:  327:#ifdef DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL
        -:  328:                                                                                                                        #ifdef DOCTEST_CONFIG_IMPLEMENT
        -:  329:#define DOCTEST_INTERFACE DOCTEST_SYMBOL_EXPORT
        -:  330:#else // DOCTEST_CONFIG_IMPLEMENT
        -:  331:#define DOCTEST_INTERFACE DOCTEST_SYMBOL_IMPORT
        -:  332:#endif // DOCTEST_CONFIG_IMPLEMENT
        -:  333:#else  // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL
        -:  334:#define DOCTEST_INTERFACE
        -:  335:#endif // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL
        -:  336:
        -:  337:// needed for extern template instantiations
        -:  338:// see https://github.com/fmtlib/fmt/issues/2228
        -:  339:#if DOCTEST_MSVC
        -:  340:                                                                                                                        #define DOCTEST_INTERFACE_DECL
        -:  341:#define DOCTEST_INTERFACE_DEF DOCTEST_INTERFACE
        -:  342:#else // DOCTEST_MSVC
        -:  343:#define DOCTEST_INTERFACE_DECL DOCTEST_INTERFACE
        -:  344:#define DOCTEST_INTERFACE_DEF
        -:  345:#endif // DOCTEST_MSVC
        -:  346:
        -:  347:#define DOCTEST_EMPTY
        -:  348:
        -:  349:#if DOCTEST_MSVC
        -:  350:                                                                                                                        #define DOCTEST_NOINLINE __declspec(noinline)
        -:  351:#define DOCTEST_UNUSED
        -:  352:#define DOCTEST_ALIGNMENT(x)
        -:  353:#elif DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 5, 0)
        -:  354:                                                                                                                        #define DOCTEST_NOINLINE
        -:  355:#define DOCTEST_UNUSED
        -:  356:#define DOCTEST_ALIGNMENT(x)
        -:  357:#else
        -:  358:#define DOCTEST_NOINLINE __attribute__((noinline))
        -:  359:#define DOCTEST_UNUSED __attribute__((unused))
        -:  360:#define DOCTEST_ALIGNMENT(x) __attribute__((aligned(x)))
        -:  361:#endif
        -:  362:
        -:  363:#ifdef DOCTEST_CONFIG_NO_CONTRADICTING_INLINE
        -:  364:#define DOCTEST_INLINE_NOINLINE inline
        -:  365:#else
        -:  366:#define DOCTEST_INLINE_NOINLINE inline DOCTEST_NOINLINE
        -:  367:#endif
        -:  368:
        -:  369:#ifndef DOCTEST_NORETURN
        -:  370:#if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))
        -:  371:#define DOCTEST_NORETURN
        -:  372:#else // DOCTEST_MSVC
        -:  373:#define DOCTEST_NORETURN [[noreturn]]
        -:  374:#endif // DOCTEST_MSVC
        -:  375:#endif // DOCTEST_NORETURN
        -:  376:
        -:  377:#ifndef DOCTEST_NOEXCEPT
        -:  378:#if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))
        -:  379:#define DOCTEST_NOEXCEPT
        -:  380:#else // DOCTEST_MSVC
        -:  381:#define DOCTEST_NOEXCEPT noexcept
        -:  382:#endif // DOCTEST_MSVC
        -:  383:#endif // DOCTEST_NOEXCEPT
        -:  384:
        -:  385:#ifndef DOCTEST_CONSTEXPR
        -:  386:#if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))
        -:  387:                                                                                                                        #define DOCTEST_CONSTEXPR const
        -:  388:#define DOCTEST_CONSTEXPR_FUNC inline
        -:  389:#else // DOCTEST_MSVC
        -:  390:#define DOCTEST_CONSTEXPR constexpr
        -:  391:#define DOCTEST_CONSTEXPR_FUNC constexpr
        -:  392:#endif // DOCTEST_MSVC
        -:  393:#endif // DOCTEST_CONSTEXPR
        -:  394:
        -:  395:#ifndef DOCTEST_NO_SANITIZE_INTEGER
        -:  396:#if DOCTEST_CLANG >= DOCTEST_COMPILER(3, 7, 0)
        -:  397:#define DOCTEST_NO_SANITIZE_INTEGER __attribute__((no_sanitize("integer")))
        -:  398:#else
        -:  399:#define DOCTEST_NO_SANITIZE_INTEGER
        -:  400:#endif
        -:  401:#endif // DOCTEST_NO_SANITIZE_INTEGER
        -:  402:
        -:  403:// =================================================================================================
        -:  404:// == FEATURE DETECTION END ========================================================================
        -:  405:// =================================================================================================
        -:  406:
        -:  407:#define DOCTEST_DECLARE_INTERFACE(name)                                                            \
        -:  408:    virtual ~name();                                                                               \
        -:  409:    name() = default;                                                                              \
        -:  410:    name(const name&) = delete;                                                                    \
        -:  411:    name(name&&) = delete;                                                                         \
        -:  412:    name& operator=(const name&) = delete;                                                         \
        -:  413:    name& operator=(name&&) = delete;
        -:  414:
        -:  415:#define DOCTEST_DEFINE_INTERFACE(name)                                                             \
        -:  416:    name::~name() = default;
        -:  417:
        -:  418:// internal macros for string concatenation and anonymous variable name generation
        -:  419:#define DOCTEST_CAT_IMPL(s1, s2) s1##s2
        -:  420:#define DOCTEST_CAT(s1, s2) DOCTEST_CAT_IMPL(s1, s2)
        -:  421:#ifdef __COUNTER__ // not standard and may be missing for some compilers
        -:  422:#define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __COUNTER__)
        -:  423:#else // __COUNTER__
        -:  424:#define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __LINE__)
        -:  425:#endif // __COUNTER__
        -:  426:
        -:  427:#ifndef DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE
        -:  428:#define DOCTEST_REF_WRAP(x) x&
        -:  429:#else // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE
        -:  430:#define DOCTEST_REF_WRAP(x) x
        -:  431:#endif // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE
        -:  432:
        -:  433:// not using __APPLE__ because... this is how Catch does it
        -:  434:#ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
        -:  435:#define DOCTEST_PLATFORM_MAC
        -:  436:#elif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
        -:  437:#define DOCTEST_PLATFORM_IPHONE
        -:  438:#elif defined(_WIN32)
        -:  439:#define DOCTEST_PLATFORM_WINDOWS
        -:  440:#elif defined(__wasi__)
        -:  441:#define DOCTEST_PLATFORM_WASI
        -:  442:#else // DOCTEST_PLATFORM
        -:  443:#define DOCTEST_PLATFORM_LINUX
        -:  444:#endif // DOCTEST_PLATFORM
        -:  445:
        -:  446:namespace doctest {
        -:  447:    namespace detail {
function _ZN7doctest6detailL7consumeEPKii called 5 returned 100% blocks executed 100%
        5:  448:        static DOCTEST_CONSTEXPR int consume(const int *, int) noexcept { return 0; }
        5:  448-block  0
        -:  449:    }
        -:  450:}
        -:  451:
        -:  452:#define DOCTEST_GLOBAL_NO_WARNINGS(var, ...)                                                         \
        -:  453:    DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wglobal-constructors")                                \
        -:  454:    static const int var = doctest::detail::consume(&var, __VA_ARGS__);                              \
        -:  455:    DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -:  456:
        -:  457:#ifndef DOCTEST_BREAK_INTO_DEBUGGER
        -:  458:// should probably take a look at https://github.com/scottt/debugbreak
        -:  459:#ifdef DOCTEST_PLATFORM_LINUX
        -:  460:#if defined(__GNUC__) && (defined(__i386) || defined(__x86_64))
        -:  461:                                                                                                                        // Break at the location of the failing check if possible
        -:  462:#define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\n" : :) // NOLINT(hicpp-no-assembler)
        -:  463:#else
        -:  464:
        -:  465:#include <signal.h>
        -:  466:
        -:  467:#define DOCTEST_BREAK_INTO_DEBUGGER() raise(SIGTRAP)
        -:  468:#endif
        -:  469:#elif defined(DOCTEST_PLATFORM_MAC)
        -:  470:                                                                                                                        #if defined(__x86_64) || defined(__x86_64__) || defined(__amd64__) || defined(__i386)
        -:  471:#define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\n" : :) // NOLINT(hicpp-no-assembler)
        -:  472:#elif defined(__ppc__) || defined(__ppc64__)
        -:  473:// https://www.cocoawithlove.com/2008/03/break-into-debugger.html
        -:  474:#define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("li r0, 20\nsc\nnop\nli r0, 37\nli r4, 2\nsc\nnop\n": : : "memory","r0","r3","r4") // NOLINT(hicpp-no-assembler)
        -:  475:#else
        -:  476:#define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("brk #0"); // NOLINT(hicpp-no-assembler)
        -:  477:#endif
        -:  478:#elif DOCTEST_MSVC
        -:  479:#define DOCTEST_BREAK_INTO_DEBUGGER() __debugbreak()
        -:  480:#elif defined(__MINGW32__)
        -:  481:DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wredundant-decls")
        -:  482:extern "C" __declspec(dllimport) void __stdcall DebugBreak();
        -:  483:DOCTEST_GCC_SUPPRESS_WARNING_POP
        -:  484:#define DOCTEST_BREAK_INTO_DEBUGGER() ::DebugBreak()
        -:  485:#else // linux
        -:  486:#define DOCTEST_BREAK_INTO_DEBUGGER() (static_cast<void>(0))
        -:  487:#endif // linux
        -:  488:#endif // DOCTEST_BREAK_INTO_DEBUGGER
        -:  489:
        -:  490:// this is kept here for backwards compatibility since the config option was changed
        -:  491:#ifdef DOCTEST_CONFIG_USE_IOSFWD
        -:  492:                                                                                                                        #ifndef DOCTEST_CONFIG_USE_STD_HEADERS
        -:  493:#define DOCTEST_CONFIG_USE_STD_HEADERS
        -:  494:#endif
        -:  495:#endif // DOCTEST_CONFIG_USE_IOSFWD
        -:  496:
        -:  497:// for clang - always include ciso646 (which drags some std stuff) because
        -:  498:// we want to check if we are using libc++ with the _LIBCPP_VERSION macro in
        -:  499:// which case we don't want to forward declare stuff from std - for reference:
        -:  500:// https://github.com/doctest/doctest/issues/126
        -:  501:// https://github.com/doctest/doctest/issues/356
        -:  502:#if DOCTEST_CLANG
        -:  503:
        -:  504:#include <ciso646>
        -:  505:
        -:  506:#endif // clang
        -:  507:
        -:  508:#ifdef _LIBCPP_VERSION
        -:  509:#ifndef DOCTEST_CONFIG_USE_STD_HEADERS
        -:  510:#define DOCTEST_CONFIG_USE_STD_HEADERS
        -:  511:#endif
        -:  512:#endif // _LIBCPP_VERSION
        -:  513:
        -:  514:#ifdef DOCTEST_CONFIG_USE_STD_HEADERS
        -:  515:#ifndef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -:  516:#define DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -:  517:#endif // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -:  518:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN
        -:  519:#include <cstddef>
        -:  520:#include <ostream>
        -:  521:#include <istream>
        -:  522:
        -:  523:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END
        -:  524:#else // DOCTEST_CONFIG_USE_STD_HEADERS
        -:  525:
        -:  526:                                                                                                                        // Forward declaring 'X' in namespace std is not permitted by the C++ Standard.
        -:  527:DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4643)
        -:  528:
        -:  529:namespace std { // NOLINT(cert-dcl58-cpp)
        -:  530:typedef decltype(nullptr) nullptr_t; // NOLINT(modernize-use-using)
        -:  531:typedef decltype(sizeof(void*)) size_t; // NOLINT(modernize-use-using)
        -:  532:template <class charT>
        -:  533:struct char_traits;
        -:  534:template <>
        -:  535:struct char_traits<char>;
        -:  536:template <class charT, class traits>
        -:  537:class basic_ostream; // NOLINT(fuchsia-virtual-inheritance)
        -:  538:typedef basic_ostream<char, char_traits<char>> ostream; // NOLINT(modernize-use-using)
        -:  539:template<class traits>
        -:  540:// NOLINTNEXTLINE
        -:  541:basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>&, const char*);
        -:  542:template <class charT, class traits>
        -:  543:class basic_istream;
        -:  544:typedef basic_istream<char, char_traits<char>> istream; // NOLINT(modernize-use-using)
        -:  545:template <class... Types>
        -:  546:class tuple;
        -:  547:#if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)
        -:  548:// see this issue on why this is needed: https://github.com/doctest/doctest/issues/183
        -:  549:template <class Ty>
        -:  550:class allocator;
        -:  551:template <class Elem, class Traits, class Alloc>
        -:  552:class basic_string;
        -:  553:using string = basic_string<char, char_traits<char>, allocator<char>>;
        -:  554:#endif // VS 2019
        -:  555:} // namespace std
        -:  556:
        -:  557:DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -:  558:
        -:  559:#endif // DOCTEST_CONFIG_USE_STD_HEADERS
        -:  560:
        -:  561:#ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -:  562:
        -:  563:#include <type_traits>
        -:  564:
        -:  565:#endif // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -:  566:
        -:  567:namespace doctest {
        -:  568:
        -:  569:    using std::size_t;
        -:  570:
        -:  571:    DOCTEST_INTERFACE extern bool is_running_in_test;
        -:  572:
        -:  573:#ifndef DOCTEST_CONFIG_STRING_SIZE_TYPE
        -:  574:#define DOCTEST_CONFIG_STRING_SIZE_TYPE unsigned
        -:  575:#endif
        -:  576:
        -:  577:// A 24 byte string class (can be as small as 17 for x64 and 13 for x86) that can hold strings with length
        -:  578:// of up to 23 chars on the stack before going on the heap - the last byte of the buffer is used for:
        -:  579:// - "is small" bit - the highest bit - if "0" then it is small - otherwise its "1" (128)
        -:  580:// - if small - capacity left before going on the heap - using the lowest 5 bits
        -:  581:// - if small - 2 bits are left unused - the second and third highest ones
        -:  582:// - if small - acts as a null terminator if strlen() is 23 (24 including the null terminator)
        -:  583://              and the "is small" bit remains "0" ("as well as the capacity left") so its OK
        -:  584:// Idea taken from this lecture about the string implementation of facebook/folly - fbstring
        -:  585:// https://www.youtube.com/watch?v=kPR8h4-qZdk
        -:  586:// TODO:
        -:  587:// - optimizations - like not deleting memory unnecessarily in operator= and etc.
        -:  588:// - resize/reserve/clear
        -:  589:// - replace
        -:  590:// - back/front
        -:  591:// - iterator stuff
        -:  592:// - find & friends
        -:  593:// - push_back/pop_back
        -:  594:// - assign/insert/erase
        -:  595:// - relational operators as free functions - taking const char* as one of the params
        -:  596:    class DOCTEST_INTERFACE String {
        -:  597:    public:
        -:  598:        using size_type = DOCTEST_CONFIG_STRING_SIZE_TYPE;
        -:  599:
        -:  600:    private:
        -:  601:        static DOCTEST_CONSTEXPR size_type len = 24;      //!OCLINT avoid private static members
        -:  602:        static DOCTEST_CONSTEXPR size_type last = len - 1; //!OCLINT avoid private static members
        -:  603:
        -:  604:        struct view // len should be more than sizeof(view) - because of the final byte for flags
        -:  605:        {
        -:  606:            char *ptr;
        -:  607:            size_type size;
        -:  608:            size_type capacity;
        -:  609:        };
        -:  610:
        -:  611:        union {
        -:  612:            char buf[len]; // NOLINT(*-avoid-c-arrays)
        -:  613:            view data;
        -:  614:        };
        -:  615:
        -:  616:        char *allocate(size_type sz);
        -:  617:
function _ZNK7doctest6String9isOnStackEv called 1011 returned 100% blocks executed 100%
     1011:  618:        bool isOnStack() const noexcept { return (buf[last] & 128) == 0; }
     1011:  618-block  0
        -:  619:
        -:  620:        void setOnHeap() noexcept;
        -:  621:
        -:  622:        void setLast(size_type in = last) noexcept;
        -:  623:
        -:  624:        void setSize(size_type sz) noexcept;
        -:  625:
        -:  626:        void copy(const String &other);
        -:  627:
        -:  628:    public:
        -:  629:        static DOCTEST_CONSTEXPR size_type npos = static_cast<size_type>(-1);
        -:  630:
        -:  631:        String() noexcept;
        -:  632:
        -:  633:        ~String();
        -:  634:
        -:  635:        // cppcheck-suppress noExplicitConstructor
        -:  636:        String(const char *in);
        -:  637:
        -:  638:        String(const char *in, size_type in_size);
        -:  639:
        -:  640:        String(std::istream &in, size_type in_size);
        -:  641:
        -:  642:        String(const String &other);
        -:  643:
        -:  644:        String &operator=(const String &other);
        -:  645:
        -:  646:        String &operator+=(const String &other);
        -:  647:
        -:  648:        String(String &&other) noexcept;
        -:  649:
        -:  650:        String &operator=(String &&other) noexcept;
        -:  651:
        -:  652:        char operator[](size_type i) const;
        -:  653:
        -:  654:        char &operator[](size_type i);
        -:  655:
        -:  656:        // the only functions I'm willing to leave in the interface - available for inlining
function _ZNK7doctest6String5c_strEv called 46 returned 100% blocks executed 100%
       46:  657:        const char *c_str() const { return const_cast<String *>(this)->c_str(); } // NOLINT
       46:  657-block  0
function _ZN7doctest6String5c_strEv called 76 returned 100% blocks executed 100%
       76:  658:        char *c_str() {
       76:  659:            if (isOnStack()) {
       76:  659-block  0
branch  0 taken 73
branch  1 taken 3
       73:  660:                return reinterpret_cast<char *>(buf);
       73:  660-block  0
        -:  661:            }
        3:  662:            return data.ptr;
        3:  662-block  0
       76:  663:        }
       76:  663-block  0
        -:  664:
        -:  665:        size_type size() const;
        -:  666:
        -:  667:        size_type capacity() const;
        -:  668:
        -:  669:        String substr(size_type pos, size_type cnt = npos) &&;
        -:  670:
        -:  671:        String substr(size_type pos, size_type cnt = npos) const &;
        -:  672:
        -:  673:        size_type find(char ch, size_type pos = 0) const;
        -:  674:
        -:  675:        size_type rfind(char ch, size_type pos = npos) const;
        -:  676:
        -:  677:        int compare(const char *other, bool no_case = false) const;
        -:  678:
        -:  679:        int compare(const String &other, bool no_case = false) const;
        -:  680:
        -:  681:        friend DOCTEST_INTERFACE std::ostream &operator<<(std::ostream &s, const String &in);
        -:  682:    };
        -:  683:
        -:  684:    DOCTEST_INTERFACE String operator+(const String &lhs, const String &rhs);
        -:  685:
        -:  686:    DOCTEST_INTERFACE bool operator==(const String &lhs, const String &rhs);
        -:  687:
        -:  688:    DOCTEST_INTERFACE bool operator!=(const String &lhs, const String &rhs);
        -:  689:
        -:  690:    DOCTEST_INTERFACE bool operator<(const String &lhs, const String &rhs);
        -:  691:
        -:  692:    DOCTEST_INTERFACE bool operator>(const String &lhs, const String &rhs);
        -:  693:
        -:  694:    DOCTEST_INTERFACE bool operator<=(const String &lhs, const String &rhs);
        -:  695:
        -:  696:    DOCTEST_INTERFACE bool operator>=(const String &lhs, const String &rhs);
        -:  697:
function _ZN7doctest8ContainsC1ERKS0_ called 23 returned 100% blocks executed 100%
function _ZN7doctest8ContainsD1Ev called 46 returned 100% blocks executed 100%
function _ZN7doctest8ContainsC2ERKS0_ called 23 returned 100% blocks executed 100%
function _ZN7doctest8ContainsC1EOS0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest8ContainsC2EOS0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest8ContainsD2Ev called 46 returned 100% blocks executed 100%
        -:  698:    class DOCTEST_INTERFACE Contains {
        -:  699:    public:
        -:  700:        explicit Contains(const String &string);
        -:  701:
        -:  702:        bool checkWith(const String &other) const;
        -:  703:
        -:  704:        String string;
        -:  705:    };
        -:  706:
        -:  707:    DOCTEST_INTERFACE String toString(const Contains &in);
        -:  708:
        -:  709:    DOCTEST_INTERFACE bool operator==(const String &lhs, const Contains &rhs);
        -:  710:
        -:  711:    DOCTEST_INTERFACE bool operator==(const Contains &lhs, const String &rhs);
        -:  712:
        -:  713:    DOCTEST_INTERFACE bool operator!=(const String &lhs, const Contains &rhs);
        -:  714:
        -:  715:    DOCTEST_INTERFACE bool operator!=(const Contains &lhs, const String &rhs);
        -:  716:
        -:  717:    namespace Color {
        -:  718:        enum Enum {
        -:  719:            None = 0,
        -:  720:            White,
        -:  721:            Red,
        -:  722:            Green,
        -:  723:            Blue,
        -:  724:            Cyan,
        -:  725:            Yellow,
        -:  726:            Grey,
        -:  727:
        -:  728:            Bright = 0x10,
        -:  729:
        -:  730:            BrightRed = Bright | Red,
        -:  731:            BrightGreen = Bright | Green,
        -:  732:            LightGrey = Bright | Grey,
        -:  733:            BrightWhite = Bright | White
        -:  734:        };
        -:  735:
        -:  736:        DOCTEST_INTERFACE std::ostream &operator<<(std::ostream &s, Color::Enum code);
        -:  737:    } // namespace Color
        -:  738:
        -:  739:    namespace assertType {
        -:  740:        enum Enum {
        -:  741:            // macro traits
        -:  742:
        -:  743:            is_warn = 1,
        -:  744:            is_check = 2 * is_warn,
        -:  745:            is_require = 2 * is_check,
        -:  746:
        -:  747:            is_normal = 2 * is_require,
        -:  748:            is_throws = 2 * is_normal,
        -:  749:            is_throws_as = 2 * is_throws,
        -:  750:            is_throws_with = 2 * is_throws_as,
        -:  751:            is_nothrow = 2 * is_throws_with,
        -:  752:
        -:  753:            is_false = 2 * is_nothrow,
        -:  754:            is_unary = 2 * is_false, // not checked anywhere - used just to distinguish the types
        -:  755:
        -:  756:            is_eq = 2 * is_unary,
        -:  757:            is_ne = 2 * is_eq,
        -:  758:
        -:  759:            is_lt = 2 * is_ne,
        -:  760:            is_gt = 2 * is_lt,
        -:  761:
        -:  762:            is_ge = 2 * is_gt,
        -:  763:            is_le = 2 * is_ge,
        -:  764:
        -:  765:            // macro types
        -:  766:
        -:  767:            DT_WARN = is_normal | is_warn,
        -:  768:            DT_CHECK = is_normal | is_check,
        -:  769:            DT_REQUIRE = is_normal | is_require,
        -:  770:
        -:  771:            DT_WARN_FALSE = is_normal | is_false | is_warn,
        -:  772:            DT_CHECK_FALSE = is_normal | is_false | is_check,
        -:  773:            DT_REQUIRE_FALSE = is_normal | is_false | is_require,
        -:  774:
        -:  775:            DT_WARN_THROWS = is_throws | is_warn,
        -:  776:            DT_CHECK_THROWS = is_throws | is_check,
        -:  777:            DT_REQUIRE_THROWS = is_throws | is_require,
        -:  778:
        -:  779:            DT_WARN_THROWS_AS = is_throws_as | is_warn,
        -:  780:            DT_CHECK_THROWS_AS = is_throws_as | is_check,
        -:  781:            DT_REQUIRE_THROWS_AS = is_throws_as | is_require,
        -:  782:
        -:  783:            DT_WARN_THROWS_WITH = is_throws_with | is_warn,
        -:  784:            DT_CHECK_THROWS_WITH = is_throws_with | is_check,
        -:  785:            DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,
        -:  786:
        -:  787:            DT_WARN_THROWS_WITH_AS = is_throws_with | is_throws_as | is_warn,
        -:  788:            DT_CHECK_THROWS_WITH_AS = is_throws_with | is_throws_as | is_check,
        -:  789:            DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,
        -:  790:
        -:  791:            DT_WARN_NOTHROW = is_nothrow | is_warn,
        -:  792:            DT_CHECK_NOTHROW = is_nothrow | is_check,
        -:  793:            DT_REQUIRE_NOTHROW = is_nothrow | is_require,
        -:  794:
        -:  795:            DT_WARN_EQ = is_normal | is_eq | is_warn,
        -:  796:            DT_CHECK_EQ = is_normal | is_eq | is_check,
        -:  797:            DT_REQUIRE_EQ = is_normal | is_eq | is_require,
        -:  798:
        -:  799:            DT_WARN_NE = is_normal | is_ne | is_warn,
        -:  800:            DT_CHECK_NE = is_normal | is_ne | is_check,
        -:  801:            DT_REQUIRE_NE = is_normal | is_ne | is_require,
        -:  802:
        -:  803:            DT_WARN_GT = is_normal | is_gt | is_warn,
        -:  804:            DT_CHECK_GT = is_normal | is_gt | is_check,
        -:  805:            DT_REQUIRE_GT = is_normal | is_gt | is_require,
        -:  806:
        -:  807:            DT_WARN_LT = is_normal | is_lt | is_warn,
        -:  808:            DT_CHECK_LT = is_normal | is_lt | is_check,
        -:  809:            DT_REQUIRE_LT = is_normal | is_lt | is_require,
        -:  810:
        -:  811:            DT_WARN_GE = is_normal | is_ge | is_warn,
        -:  812:            DT_CHECK_GE = is_normal | is_ge | is_check,
        -:  813:            DT_REQUIRE_GE = is_normal | is_ge | is_require,
        -:  814:
        -:  815:            DT_WARN_LE = is_normal | is_le | is_warn,
        -:  816:            DT_CHECK_LE = is_normal | is_le | is_check,
        -:  817:            DT_REQUIRE_LE = is_normal | is_le | is_require,
        -:  818:
        -:  819:            DT_WARN_UNARY = is_normal | is_unary | is_warn,
        -:  820:            DT_CHECK_UNARY = is_normal | is_unary | is_check,
        -:  821:            DT_REQUIRE_UNARY = is_normal | is_unary | is_require,
        -:  822:
        -:  823:            DT_WARN_UNARY_FALSE = is_normal | is_false | is_unary | is_warn,
        -:  824:            DT_CHECK_UNARY_FALSE = is_normal | is_false | is_unary | is_check,
        -:  825:            DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,
        -:  826:        };
        -:  827:    } // namespace assertType
        -:  828:
        -:  829:    DOCTEST_INTERFACE const char *assertString(assertType::Enum at);
        -:  830:
        -:  831:    DOCTEST_INTERFACE const char *failureString(assertType::Enum at);
        -:  832:
        -:  833:    DOCTEST_INTERFACE const char *skipPathFromFilename(const char *file);
        -:  834:
function _ZN7doctest12TestCaseDataC2Ev called 2 returned 100% blocks executed 100%
function _ZN7doctest12TestCaseDataD2Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest12TestCaseDataaSERKS0_ called 1 returned 100% blocks executed 100%
        -:  835:    struct DOCTEST_INTERFACE TestCaseData {
        -:  836:        String m_file;       // the file in which the test was registered (using String - see #350)
        -:  837:        unsigned m_line;       // the line where the test was registered
        -:  838:        const char *m_name;       // name of the test case
        -:  839:        const char *m_test_suite; // the test suite in which the test was added
        -:  840:        const char *m_description;
        -:  841:        bool m_skip;
        -:  842:        bool m_no_breaks;
        -:  843:        bool m_no_output;
        -:  844:        bool m_may_fail;
        -:  845:        bool m_should_fail;
        -:  846:        int m_expected_failures;
        -:  847:        double m_timeout;
        -:  848:    };
        -:  849:
function _ZN7doctest10AssertDataD2Ev called 23 returned 100% blocks executed 100%
        -:  850:    struct DOCTEST_INTERFACE AssertData {
        -:  851:        // common - for all asserts
        -:  852:        const TestCaseData *m_test_case;
        -:  853:        assertType::Enum m_at;
        -:  854:        const char *m_file;
        -:  855:        int m_line;
        -:  856:        const char *m_expr;
        -:  857:        bool m_failed;
        -:  858:
        -:  859:        // exception-related - for all asserts
        -:  860:        bool m_threw;
        -:  861:        String m_exception;
        -:  862:
        -:  863:        // for normal asserts
        -:  864:        String m_decomp;
        -:  865:
        -:  866:        // for specific exception-related asserts
        -:  867:        bool m_threw_as;
        -:  868:        const char *m_exception_type;
        -:  869:
function _ZN7doctest10AssertData14StringContainsC1ERKS1_ called 23 returned 100% blocks executed 100%
function _ZN7doctest10AssertData14StringContainsD1Ev called 46 returned 100% blocks executed 100%
function _ZN7doctest10AssertData14StringContainsC2ERKS1_ called 23 returned 100% blocks executed 100%
function _ZN7doctest10AssertData14StringContainsD2Ev called 46 returned 100% blocks executed 100%
        -:  870:        class DOCTEST_INTERFACE StringContains {
        -:  871:        private:
        -:  872:            Contains content;
        -:  873:            bool isContains;
        -:  874:
        -:  875:        public:
function _ZN7doctest10AssertData14StringContainsC1ERKNS_6StringE called 23 returned 100% blocks executed 100%
function _ZN7doctest10AssertData14StringContainsC2ERKNS_6StringE called 23 returned 100% blocks executed 100%
       46:  876:            StringContains(const String &str) : content(str), isContains(false) {}
       23:  876-block  0
       23:  876-block  1
        -:  877:
function _ZN7doctest10AssertData14StringContainsC1ENS_8ContainsE called 0 returned 0% blocks executed 0%
function _ZN7doctest10AssertData14StringContainsC2ENS_8ContainsE called 0 returned 0% blocks executed 0%
    #####:  878:            StringContains(Contains cntn) : content(static_cast<Contains &&>(cntn)), isContains(true) {}
    $$$$$:  878-block  0
    $$$$$:  878-block  1
        -:  879:
function _ZN7doctest10AssertData14StringContains5checkERKNS_6StringE called 0 returned 0% blocks executed 0%
    #####:  880:            bool check(const String &str) { return isContains ? (content == str) : (content.string == str); }
    $$$$$:  880-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  880-block  1
    $$$$$:  880-block  2
    $$$$$:  880-block  3
        -:  881:
        -:  882:            operator const String &() const { return content.string; }
        -:  883:
function _ZNK7doctest10AssertData14StringContains5c_strEv called 0 returned 0% blocks executed 0%
    #####:  884:            const char *c_str() const { return content.string.c_str(); }
    $$$$$:  884-block  0
        -:  885:        } m_exception_string;
        -:  886:
        -:  887:        AssertData(assertType::Enum at, const char *file, int line, const char *expr,
        -:  888:                   const char *exception_type, const StringContains &exception_string);
        -:  889:    };
        -:  890:
function _ZN7doctest11MessageDataC2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest11MessageDataD2Ev called 0 returned 0% blocks executed 0%
        -:  891:    struct DOCTEST_INTERFACE MessageData {
        -:  892:        String m_string;
        -:  893:        const char *m_file;
        -:  894:        int m_line;
        -:  895:        assertType::Enum m_severity;
        -:  896:    };
        -:  897:
function _ZN7doctest16SubcaseSignatureD1Ev called 87 returned 100% blocks executed 100%
function _ZN7doctest16SubcaseSignatureC1ERKS0_ called 23 returned 100% blocks executed 100%
function _ZN7doctest16SubcaseSignatureC2ERKS0_ called 23 returned 100% blocks executed 100%
function _ZN7doctest16SubcaseSignatureC1EOS0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest16SubcaseSignatureC2EOS0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest16SubcaseSignatureaSEOS0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest16SubcaseSignatureaSERKS0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest16SubcaseSignatureD2Ev called 87 returned 100% blocks executed 100%
        -:  898:    struct DOCTEST_INTERFACE SubcaseSignature {
        -:  899:        String m_name;
        -:  900:        const char *m_file;
        -:  901:        int m_line;
        -:  902:
        -:  903:        bool operator==(const SubcaseSignature &other) const;
        -:  904:
        -:  905:        bool operator<(const SubcaseSignature &other) const;
        -:  906:    };
        -:  907:
        -:  908:    struct DOCTEST_INTERFACE IContextScope {
function _ZN7doctest13IContextScopeC2Ev called 0 returned 0% blocks executed 0%
    #####:  909:        DOCTEST_DECLARE_INTERFACE(IContextScope)
    $$$$$:  909-block  0
        -:  910:
        -:  911:        virtual void stringify(std::ostream *) const = 0;
        -:  912:    };
        -:  913:
        -:  914:    namespace detail {
        -:  915:        struct DOCTEST_INTERFACE TestCase;
        -:  916:    } // namespace detail
        -:  917:
function _ZN7doctest14ContextOptionsC2Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest14ContextOptionsD2Ev called 1 returned 100% blocks executed 100%
        2:  918:    struct ContextOptions //!OCLINT too many fields
        1:  918-block  0
        1:  918-block  1
        -:  919:    {
        1:  920:        std::ostream *cout = nullptr; // stdout stream
        -:  921:        String binary_name;    // the test binary name
        -:  922:
        1:  923:        const detail::TestCase *currentTest = nullptr;
        -:  924:
        -:  925:        // == parameters from the command line
        -:  926:        String out;       // output filename
        -:  927:        String order_by;  // how tests should be ordered
        -:  928:        unsigned rand_seed; // the seed for rand ordering
        -:  929:
        -:  930:        unsigned first; // the first (matching) test to be executed
        -:  931:        unsigned last;  // the last (matching) test to be executed
        -:  932:
        -:  933:        int abort_after;           // stop tests after this many failed assertions
        -:  934:        int subcase_filter_levels; // apply the subcase filters for the first N levels
        -:  935:
        -:  936:        bool success;              // include successful assertions in output
        -:  937:        bool case_sensitive;       // if filtering should be case sensitive
        -:  938:        bool exit;                 // if the program should be exited after the tests are ran/whatever
        -:  939:        bool duration;             // print the time duration of each test case
        -:  940:        bool minimal;              // minimal console output (only test failures)
        -:  941:        bool quiet;                // no console output
        -:  942:        bool no_throw;             // to skip exceptions-related assertion macros
        -:  943:        bool no_exitcode;          // if the framework should return 0 as the exitcode
        -:  944:        bool no_run;               // to not run the tests at all (can be done with an "*" exclude)
        -:  945:        bool no_intro;             // to not print the intro of the framework
        -:  946:        bool no_version;           // to not print the version of the framework
        -:  947:        bool no_colors;            // if output to the console should be colorized
        -:  948:        bool force_colors;         // forces the use of colors even when a tty cannot be detected
        -:  949:        bool no_breaks;            // to not break into the debugger
        -:  950:        bool no_skip;              // don't skip test cases which are marked to be skipped
        -:  951:        bool gnu_file_line;        // if line numbers should be surrounded with :x: and not (x):
        -:  952:        bool no_path_in_filenames; // if the path to files should be removed from the output
        -:  953:        bool no_line_numbers;      // if source code line numbers should be omitted from the output
        -:  954:        bool no_debug_output;      // no output in the debug console when a debugger is attached
        -:  955:        bool no_skipped_summary;   // don't print "skipped" in the summary !!! UNDOCUMENTED !!!
        -:  956:        bool no_time_in_output;    // omit any time/timestamps from output !!! UNDOCUMENTED !!!
        -:  957:
        -:  958:        bool help;             // to print the help
        -:  959:        bool version;          // to print the version
        -:  960:        bool count;            // if only the count of matching tests is to be retrieved
        -:  961:        bool list_test_cases;  // to list all tests matching the filters
        -:  962:        bool list_test_suites; // to list all suites matching the filters
        -:  963:        bool list_reporters;   // lists all registered reporters
        -:  964:    };
        -:  965:
        -:  966:    namespace detail {
        -:  967:        namespace types {
        -:  968:#ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -:  969:            using namespace std;
        -:  970:#else
        -:  971:                                                                                                                                    template <bool COND, typename T = void>
        -:  972:        struct enable_if { };
        -:  973:
        -:  974:        template <typename T>
        -:  975:        struct enable_if<true, T> { using type = T; };
        -:  976:
        -:  977:        struct true_type { static DOCTEST_CONSTEXPR bool value = true; };
        -:  978:        struct false_type { static DOCTEST_CONSTEXPR bool value = false; };
        -:  979:
        -:  980:        template <typename T> struct remove_reference { using type = T; };
        -:  981:        template <typename T> struct remove_reference<T&> { using type = T; };
        -:  982:        template <typename T> struct remove_reference<T&&> { using type = T; };
        -:  983:
        -:  984:        template <typename T> struct is_rvalue_reference : false_type { };
        -:  985:        template <typename T> struct is_rvalue_reference<T&&> : true_type { };
        -:  986:
        -:  987:        template<typename T> struct remove_const { using type = T; };
        -:  988:        template <typename T> struct remove_const<const T> { using type = T; };
        -:  989:
        -:  990:        // Compiler intrinsics
        -:  991:        template <typename T> struct is_enum { static DOCTEST_CONSTEXPR bool value = __is_enum(T); };
        -:  992:        template <typename T> struct underlying_type { using type = __underlying_type(T); };
        -:  993:
        -:  994:        template <typename T> struct is_pointer : false_type { };
        -:  995:        template <typename T> struct is_pointer<T*> : true_type { };
        -:  996:
        -:  997:        template <typename T> struct is_array : false_type { };
        -:  998:        // NOLINTNEXTLINE(*-avoid-c-arrays)
        -:  999:        template <typename T, size_t SIZE> struct is_array<T[SIZE]> : true_type { };
        -: 1000:#endif
        -: 1001:        }
        -: 1002:
        -: 1003:        // <utility>
        -: 1004:        template<typename T>
        -: 1005:        T &&declval();
        -: 1006:
        -: 1007:        template<class T>
function _ZN7doctest6detail7forwardIRP5GraphEEOT_RNSt3__116remove_referenceIS5_E4typeE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIDnEEOT_RNSt3__116remove_referenceIS2_E4typeE called 6 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIKmEEOT_RNSt3__116remove_referenceIS3_E4typeE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIiEEOT_RNSt3__116remove_referenceIS2_E4typeE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_RNS2_16remove_referenceISB_E4typeE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIRA2_KcEEOT_RNSt3__116remove_referenceIS5_E4typeE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIRKdEEOT_RNSt3__116remove_referenceIS4_E4typeE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIdEEOT_RNSt3__116remove_referenceIS2_E4typeE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIKP5GraphEEOT_RNSt3__116remove_referenceIS5_E4typeE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardIKNSt3__125__hash_map_const_iteratorINS2_21__hash_const_iteratorIPNS2_11__hash_nodeINS2_17__hash_value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5GraphEEPvEEEEEEEEOT_RNS2_16remove_referenceISM_E4typeE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail7forwardINSt3__125__hash_map_const_iteratorINS2_21__hash_const_iteratorIPNS2_11__hash_nodeINS2_17__hash_value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5GraphEEPvEEEEEEEEOT_RNS2_16remove_referenceISL_E4typeE called 2 returned 100% blocks executed 100%
       32: 1008:        DOCTEST_CONSTEXPR_FUNC T &&forward(typename types::remove_reference<T>::type &t) DOCTEST_NOEXCEPT {
       32: 1009:            return static_cast<T &&>(t);
        4: 1009-block  0
        6: 1009-block  1
        4: 1009-block  2
        4: 1009-block  3
        2: 1009-block  4
        2: 1009-block  5
        2: 1009-block  6
        2: 1009-block  7
        2: 1009-block  8
        2: 1009-block  9
        2: 1009-block 10
        -: 1010:        }
        -: 1011:
        -: 1012:        template<class T>
        -: 1013:        DOCTEST_CONSTEXPR_FUNC T &&forward(typename types::remove_reference<T>::type &&t) DOCTEST_NOEXCEPT {
        -: 1014:            return static_cast<T &&>(t);
        -: 1015:        }
        -: 1016:
        -: 1017:        template<typename T>
        -: 1018:        struct deferred_false : types::false_type {
        -: 1019:        };
        -: 1020:
        -: 1021:// MSVS 2015 :(
        -: 1022:#if !DOCTEST_CLANG && defined(_MSC_VER) && _MSC_VER <= 1900
        -: 1023:                                                                                                                                template <typename T, typename = void>
        -: 1024:    struct has_global_insertion_operator : types::false_type { };
        -: 1025:
        -: 1026:    template <typename T>
        -: 1027:    struct has_global_insertion_operator<T, decltype(::operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type { };
        -: 1028:
        -: 1029:    template <typename T, typename = void>
        -: 1030:    struct has_insertion_operator { static DOCTEST_CONSTEXPR bool value = has_global_insertion_operator<T>::value; };
        -: 1031:
        -: 1032:    template <typename T, bool global>
        -: 1033:    struct insert_hack;
        -: 1034:
        -: 1035:    template <typename T>
        -: 1036:    struct insert_hack<T, true> {
        -: 1037:        static void insert(std::ostream& os, const T& t) { ::operator<<(os, t); }
        -: 1038:    };
        -: 1039:
        -: 1040:    template <typename T>
        -: 1041:    struct insert_hack<T, false> {
        -: 1042:        static void insert(std::ostream& os, const T& t) { operator<<(os, t); }
        -: 1043:    };
        -: 1044:
        -: 1045:    template <typename T>
        -: 1046:    using insert_hack_t = insert_hack<T, has_global_insertion_operator<T>::value>;
        -: 1047:#else
        -: 1048:        template<typename T, typename = void>
        -: 1049:        struct has_insertion_operator : types::false_type {
        -: 1050:        };
        -: 1051:#endif
        -: 1052:
        -: 1053:        template<typename T>
        -: 1054:        struct has_insertion_operator<T, decltype(operator<<(declval<std::ostream &>(), declval<const T &>()), void())>
        -: 1055:                : types::true_type {
        -: 1056:        };
        -: 1057:
        -: 1058:        template<typename T>
        -: 1059:        struct should_stringify_as_underlying_type {
        -: 1060:            static DOCTEST_CONSTEXPR bool value =
        -: 1061:                    detail::types::is_enum<T>::value && !doctest::detail::has_insertion_operator<T>::value;
        -: 1062:        };
        -: 1063:
        -: 1064:        DOCTEST_INTERFACE std::ostream *tlssPush();
        -: 1065:
        -: 1066:        DOCTEST_INTERFACE String tlssPop();
        -: 1067:
        -: 1068:        template<bool C>
        -: 1069:        struct StringMakerBase {
        -: 1070:            template<typename T>
function _ZN7doctest6detail15StringMakerBaseILb0EE7convertINSt3__125__hash_map_const_iteratorINS4_21__hash_const_iteratorIPNS4_11__hash_nodeINS4_17__hash_value_typeINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP5GraphEEPvEEEEEEEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
    #####: 1071:            static String convert(const DOCTEST_REF_WRAP(T)) {
        -: 1072:#ifdef DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES
        -: 1073:                static_assert(deferred_false<T>::value, "No stringification detected for type T. See string conversion manual");
        -: 1074:#endif
    #####: 1075:                return "{?}";
    $$$$$: 1075-block  0
        -: 1076:            }
        -: 1077:        };
        -: 1078:
        -: 1079:        template<typename T>
        -: 1080:        struct filldata;
        -: 1081:
        -: 1082:        template<typename T>
function _ZN7doctest6detail7fillossIP5GraphEEvPNSt3__113basic_ostreamIcNS4_11char_traitsIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail7fillossINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvPNS2_13basic_ostreamIcS5_EERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail7fillossIA2_KcEEvPNSt3__113basic_ostreamIcNS4_11char_traitsIcEEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 1083:        void filloss(std::ostream *stream, const T &in) {
    #####: 1084:            filldata<T>::fill(stream, in);
    #####: 1085:        }
    $$$$$: 1085-block  0
    $$$$$: 1085-block  1
    $$$$$: 1085-block  2
        -: 1086:
        -: 1087:        template<typename T, size_t N>
function _ZN7doctest6detail7fillossIcLm2EEEvPNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEERAT0__KT_ called 0 returned 0% blocks executed 0%
    #####: 1088:        void filloss(std::ostream *stream, const T (&in)[N]) { // NOLINT(*-avoid-c-arrays)
        -: 1089:            // T[N], T(&)[N], T(&&)[N] have same behaviour.
        -: 1090:            // Hence remove reference.
    #####: 1091:            filloss < typename types::remove_reference<decltype(in)>::type > (stream, in);
    #####: 1092:        }
    $$$$$: 1092-block  0
        -: 1093:
        -: 1094:        template<typename T>
function _ZN7doctest6detail8toStreamIP5GraphEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail8toStreamINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail8toStreamIA2_cEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
    #####: 1095:        String toStream(const T &in) {
    #####: 1096:            std::ostream *stream = tlssPush();
    #####: 1097:            filloss(stream, in);
    #####: 1098:            return tlssPop();
    $$$$$: 1098-block  0
    $$$$$: 1098-block  1
    $$$$$: 1098-block  2
        -: 1099:        }
        -: 1100:
        -: 1101:        template<>
        -: 1102:        struct StringMakerBase<true> {
        -: 1103:            template<typename T>
function _ZN7doctest6detail15StringMakerBaseILb1EE7convertIP5GraphEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail15StringMakerBaseILb1EE7convertINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail15StringMakerBaseILb1EE7convertIA2_cEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
    #####: 1104:            static String convert(const DOCTEST_REF_WRAP(T)in) {
    #####: 1105:                return toStream(in);
    $$$$$: 1105-block  0
    $$$$$: 1105-block  1
    $$$$$: 1105-block  2
        -: 1106:            }
        -: 1107:        };
        -: 1108:    } // namespace detail
        -: 1109:
        -: 1110:    template<typename T>
        -: 1111:    struct StringMaker : public detail::StringMakerBase<
        -: 1112:            detail::has_insertion_operator<T>::value || detail::types::is_pointer<T>::value ||
        -: 1113:            detail::types::is_array<T>::value> {
        -: 1114:    };
        -: 1115:
        -: 1116:#ifndef DOCTEST_STRINGIFY
        -: 1117:#ifdef DOCTEST_CONFIG_DOUBLE_STRINGIFY
        -: 1118:#define DOCTEST_STRINGIFY(...) toString(toString(__VA_ARGS__))
        -: 1119:#else
        -: 1120:#define DOCTEST_STRINGIFY(...) toString(__VA_ARGS__)
        -: 1121:#endif
        -: 1122:#endif
        -: 1123:
        -: 1124:    template<typename T>
        -: 1125:    String toString() {
        -: 1126:#if DOCTEST_CLANG == 0 && DOCTEST_GCC == 0 && DOCTEST_ICC == 0
        -: 1127:                                                                                                                                String ret = __FUNCSIG__; // class doctest::String __cdecl doctest::toString<TYPE>(void)
        -: 1128:    String::size_type beginPos = ret.find('<');
        -: 1129:    return ret.substr(beginPos + 1, ret.size() - beginPos - static_cast<String::size_type>(sizeof(">(void)")));
        -: 1130:#else
        -: 1131:        String ret = __PRETTY_FUNCTION__; // doctest::String toString() [with T = TYPE]
        -: 1132:        String::size_type begin = ret.find('=') + 2;
        -: 1133:        return ret.substr(begin, ret.size() - begin - 1);
        -: 1134:#endif
        -: 1135:    }
        -: 1136:
        -: 1137:    template<typename T, typename detail::types::enable_if<!detail::should_stringify_as_underlying_type<T>::value, bool>::type = true>
function _ZN7doctest8toStringIP5GraphLb1EEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest8toStringINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEELb1EEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest8toStringIA2_cLb1EEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest8toStringINSt3__125__hash_map_const_iteratorINS1_21__hash_const_iteratorIPNS1_11__hash_nodeINS1_17__hash_value_typeINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP5GraphEEPvEEEEEELb1EEENS_6StringERKT_ called 0 returned 0% blocks executed 0%
    #####: 1138:    String toString(const DOCTEST_REF_WRAP(T)value) {
    #####: 1139:        return StringMaker<T>::convert(value);
    $$$$$: 1139-block  0
    $$$$$: 1139-block  1
    $$$$$: 1139-block  2
    $$$$$: 1139-block  3
        -: 1140:    }
        -: 1141:
        -: 1142:#ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1143:    DOCTEST_INTERFACE String toString(const char* in);
        -: 1144:#endif // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1145:
        -: 1146:#if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)
        -: 1147:                                                                                                                            // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183
        -: 1148:DOCTEST_INTERFACE String toString(const std::string& in);
        -: 1149:#endif // VS 2019
        -: 1150:
        -: 1151:    DOCTEST_INTERFACE String toString(String in);
        -: 1152:
        -: 1153:    DOCTEST_INTERFACE String toString(std::nullptr_t);
        -: 1154:
        -: 1155:    DOCTEST_INTERFACE String toString(bool in);
        -: 1156:
        -: 1157:    DOCTEST_INTERFACE String toString(float in);
        -: 1158:
        -: 1159:    DOCTEST_INTERFACE String toString(double in);
        -: 1160:
        -: 1161:    DOCTEST_INTERFACE String toString(double long in);
        -: 1162:
        -: 1163:    DOCTEST_INTERFACE String toString(char in);
        -: 1164:
        -: 1165:    DOCTEST_INTERFACE String toString(char signed in);
        -: 1166:
        -: 1167:    DOCTEST_INTERFACE String toString(char unsigned in);
        -: 1168:
        -: 1169:    DOCTEST_INTERFACE String toString(short in);
        -: 1170:
        -: 1171:    DOCTEST_INTERFACE String toString(short unsigned in);
        -: 1172:
        -: 1173:    DOCTEST_INTERFACE String toString(signed in);
        -: 1174:
        -: 1175:    DOCTEST_INTERFACE String toString(unsigned in);
        -: 1176:
        -: 1177:    DOCTEST_INTERFACE String toString(long in);
        -: 1178:
        -: 1179:    DOCTEST_INTERFACE String toString(long unsigned in);
        -: 1180:
        -: 1181:    DOCTEST_INTERFACE String toString(long long in);
        -: 1182:
        -: 1183:    DOCTEST_INTERFACE String toString(long long unsigned in);
        -: 1184:
        -: 1185:    template<typename T, typename detail::types::enable_if<detail::should_stringify_as_underlying_type<T>::value, bool>::type = true>
        -: 1186:    String toString(const DOCTEST_REF_WRAP(T)value) {
        -: 1187:        using UT = typename detail::types::underlying_type<T>::type;
        -: 1188:        return (DOCTEST_STRINGIFY(static_cast<UT>(value)));
        -: 1189:    }
        -: 1190:
        -: 1191:    namespace detail {
        -: 1192:        template<typename T>
        -: 1193:        struct filldata {
function _ZN7doctest6detail8filldataINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE4fillEPNS2_13basic_ostreamIcS5_EERKS8_ called 0 returned 0% blocks executed 0%
    #####: 1194:            static void fill(std::ostream *stream, const T &in) {
        -: 1195:#if defined(_MSC_VER) && _MSC_VER <= 1900
        -: 1196:                insert_hack_t<T>::insert(*stream, in);
        -: 1197:#else
    #####: 1198:                operator<<(*stream, in);
        -: 1199:#endif
    #####: 1200:            }
    $$$$$: 1200-block  0
        -: 1201:        };
        -: 1202:
        -: 1203:        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)
        -: 1204:
        -: 1205:// NOLINTBEGIN(*-avoid-c-arrays)
        -: 1206:        template<typename T, size_t N>
        -: 1207:        struct filldata<T[N]> {
        -: 1208:            static void fill(std::ostream *stream, const T(&in)[N]) {
        -: 1209:                *stream << "[";
        -: 1210:                for (size_t i = 0; i < N; i++) {
        -: 1211:                    if (i != 0) { *stream << ", "; }
        -: 1212:                    *stream << (DOCTEST_STRINGIFY(in[i]));
        -: 1213:                }
        -: 1214:                *stream << "]";
        -: 1215:            }
        -: 1216:        };
        -: 1217:// NOLINTEND(*-avoid-c-arrays)
        -: 1218:        DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 1219:
        -: 1220:        // Specialized since we don't want the terminating null byte!
        -: 1221:// NOLINTBEGIN(*-avoid-c-arrays)
        -: 1222:        template<size_t N>
        -: 1223:        struct filldata<const char[N]> {
function _ZN7doctest6detail8filldataIA2_KcE4fillEPNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEERS3_ called 0 returned 0% blocks executed 0%
    #####: 1224:            static void fill(std::ostream *stream, const char (&in)[N]) {
    #####: 1225:                *stream << String(in, in[N - 1] ? N : N - 1);
    $$$$$: 1225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
    #####: 1226:            } // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)
    $$$$$: 1226-block  0
        -: 1227:        };
        -: 1228:// NOLINTEND(*-avoid-c-arrays)
        -: 1229:
        -: 1230:        template<>
        -: 1231:        struct filldata<const void *> {
        -: 1232:            static void fill(std::ostream *stream, const void *in);
        -: 1233:        };
        -: 1234:
        -: 1235:        template<typename T>
        -: 1236:        struct filldata<T *> {
        -: 1237:            DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4180)
        -: 1238:
function _ZN7doctest6detail8filldataIP5GraphE4fillEPNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEEPKS2_ called 0 returned 0% blocks executed 0%
    #####: 1239:            static void fill(std::ostream *stream, const T *in) {
        -: 1240:                DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 1241:                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wmicrosoft-cast")
    #####: 1242:                filldata<const void *>::fill(stream,
        -: 1243:#if DOCTEST_GCC == 0 || DOCTEST_GCC >= DOCTEST_COMPILER(4, 9, 0)
    #####: 1244:                                             reinterpret_cast<const void *>(in)
        -: 1245:#else
        -: 1246:                        *reinterpret_cast<const void* const*>(&in)
        -: 1247:#endif
        -: 1248:                );
        -: 1249:                DOCTEST_CLANG_SUPPRESS_WARNING_POP
    #####: 1250:            }
    $$$$$: 1250-block  0
        -: 1251:        };
        -: 1252:    }
        -: 1253:
        -: 1254:    struct DOCTEST_INTERFACE Approx {
        -: 1255:        Approx(double value);
        -: 1256:
        -: 1257:        Approx operator()(double value) const;
        -: 1258:
        -: 1259:#ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1260:
        -: 1261:        template<typename T>
        -: 1262:        explicit Approx(const T &value,
        -: 1263:                        typename detail::types::enable_if<std::is_constructible<double, T>::value>::type * =
        -: 1264:                        static_cast<T *>(nullptr)) {
        -: 1265:            *this = static_cast<double>(value);
        -: 1266:        }
        -: 1267:
        -: 1268:#endif // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1269:
        -: 1270:        Approx &epsilon(double newEpsilon);
        -: 1271:
        -: 1272:#ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1273:
        -: 1274:        template<typename T>
        -: 1275:        typename std::enable_if<std::is_constructible<double, T>::value, Approx &>::type epsilon(
        -: 1276:                const T &newEpsilon) {
        -: 1277:            m_epsilon = static_cast<double>(newEpsilon);
        -: 1278:            return *this;
        -: 1279:        }
        -: 1280:
        -: 1281:#endif //  DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1282:
        -: 1283:        Approx &scale(double newScale);
        -: 1284:
        -: 1285:#ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1286:
        -: 1287:        template<typename T>
        -: 1288:        typename std::enable_if<std::is_constructible<double, T>::value, Approx &>::type scale(
        -: 1289:                const T &newScale) {
        -: 1290:            m_scale = static_cast<double>(newScale);
        -: 1291:            return *this;
        -: 1292:        }
        -: 1293:
        -: 1294:#endif // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1295:
        -: 1296:        // clang-format off
        -: 1297:        DOCTEST_INTERFACE friend bool operator==(double lhs, const Approx &rhs);
        -: 1298:
        -: 1299:        DOCTEST_INTERFACE friend bool operator==(const Approx &lhs, double rhs);
        -: 1300:
        -: 1301:        DOCTEST_INTERFACE friend bool operator!=(double lhs, const Approx &rhs);
        -: 1302:
        -: 1303:        DOCTEST_INTERFACE friend bool operator!=(const Approx &lhs, double rhs);
        -: 1304:
        -: 1305:        DOCTEST_INTERFACE friend bool operator<=(double lhs, const Approx &rhs);
        -: 1306:
        -: 1307:        DOCTEST_INTERFACE friend bool operator<=(const Approx &lhs, double rhs);
        -: 1308:
        -: 1309:        DOCTEST_INTERFACE friend bool operator>=(double lhs, const Approx &rhs);
        -: 1310:
        -: 1311:        DOCTEST_INTERFACE friend bool operator>=(const Approx &lhs, double rhs);
        -: 1312:
        -: 1313:        DOCTEST_INTERFACE friend bool operator<(double lhs, const Approx &rhs);
        -: 1314:
        -: 1315:        DOCTEST_INTERFACE friend bool operator<(const Approx &lhs, double rhs);
        -: 1316:
        -: 1317:        DOCTEST_INTERFACE friend bool operator>(double lhs, const Approx &rhs);
        -: 1318:
        -: 1319:        DOCTEST_INTERFACE friend bool operator>(const Approx &lhs, double rhs);
        -: 1320:
        -: 1321:#ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1322:#define DOCTEST_APPROX_PREFIX \
        -: 1323:    template <typename T> friend typename std::enable_if<std::is_constructible<double, T>::value, bool>::type
        -: 1324:
function _ZN7doctesteqIiEENSt3__19enable_ifIXsr3std16is_constructibleIdT_EE5valueEbE4typeERKS3_RKNS_6ApproxE called 1 returned 100% blocks executed 100%
        1: 1325:        DOCTEST_APPROX_PREFIX operator==(const T &lhs, const Approx &rhs) {
        1: 1326:            return operator==(static_cast<double>(lhs), rhs);
        1: 1326-block  0
        -: 1327:        }
        -: 1328:
        -: 1329:        DOCTEST_APPROX_PREFIX operator==(const Approx &lhs, const T &rhs) { return operator==(rhs, lhs); }
        -: 1330:
        -: 1331:        DOCTEST_APPROX_PREFIX operator!=(const T &lhs, const Approx &rhs) { return !operator==(lhs, rhs); }
        -: 1332:
function _ZN7doctestneIiEENSt3__19enable_ifIXsr3std16is_constructibleIdT_EE5valueEbE4typeERKNS_6ApproxERKS3_ called 1 returned 100% blocks executed 100%
        1: 1333:        DOCTEST_APPROX_PREFIX operator!=(const Approx &lhs, const T &rhs) { return !operator==(rhs, lhs); }
        1: 1333-block  0
        -: 1334:
        -: 1335:        DOCTEST_APPROX_PREFIX operator<=(const T &lhs, const Approx &rhs) {
        -: 1336:            return static_cast<double>(lhs) < rhs.m_value || lhs == rhs;
        -: 1337:        }
        -: 1338:
        -: 1339:        DOCTEST_APPROX_PREFIX operator<=(const Approx &lhs, const T &rhs) {
        -: 1340:            return lhs.m_value < static_cast<double>(rhs) || lhs == rhs;
        -: 1341:        }
        -: 1342:
        -: 1343:        DOCTEST_APPROX_PREFIX operator>=(const T &lhs, const Approx &rhs) {
        -: 1344:            return static_cast<double>(lhs) > rhs.m_value || lhs == rhs;
        -: 1345:        }
        -: 1346:
        -: 1347:        DOCTEST_APPROX_PREFIX operator>=(const Approx &lhs, const T &rhs) {
        -: 1348:            return lhs.m_value > static_cast<double>(rhs) || lhs == rhs;
        -: 1349:        }
        -: 1350:
        -: 1351:        DOCTEST_APPROX_PREFIX operator<(const T &lhs, const Approx &rhs) {
        -: 1352:            return static_cast<double>(lhs) < rhs.m_value && lhs != rhs;
        -: 1353:        }
        -: 1354:
        -: 1355:        DOCTEST_APPROX_PREFIX operator<(const Approx &lhs, const T &rhs) {
        -: 1356:            return lhs.m_value < static_cast<double>(rhs) && lhs != rhs;
        -: 1357:        }
        -: 1358:
        -: 1359:        DOCTEST_APPROX_PREFIX operator>(const T &lhs, const Approx &rhs) {
        -: 1360:            return static_cast<double>(lhs) > rhs.m_value && lhs != rhs;
        -: 1361:        }
        -: 1362:
        -: 1363:        DOCTEST_APPROX_PREFIX operator>(const Approx &lhs, const T &rhs) {
        -: 1364:            return lhs.m_value > static_cast<double>(rhs) && lhs != rhs;
        -: 1365:        }
        -: 1366:
        -: 1367:#undef DOCTEST_APPROX_PREFIX
        -: 1368:#endif // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS
        -: 1369:
        -: 1370:        // clang-format on
        -: 1371:
        -: 1372:        double m_epsilon;
        -: 1373:        double m_scale;
        -: 1374:        double m_value;
        -: 1375:    };
        -: 1376:
        -: 1377:    DOCTEST_INTERFACE String toString(const Approx &in);
        -: 1378:
        -: 1379:    DOCTEST_INTERFACE const ContextOptions *getContextOptions();
        -: 1380:
        -: 1381:    template<typename F>
        -: 1382:    struct DOCTEST_INTERFACE_DECL IsNaN {
        -: 1383:        F value;
        -: 1384:        bool flipped;
        -: 1385:
function _ZN7doctest5IsNaNIfEC2Efb called 0 returned 0% blocks executed 0%
function _ZN7doctest5IsNaNIfEC1Efb called 0 returned 0% blocks executed 0%
function _ZN7doctest5IsNaNIdEC2Edb called 0 returned 0% blocks executed 0%
function _ZN7doctest5IsNaNIdEC1Edb called 0 returned 0% blocks executed 0%
function _ZN7doctest5IsNaNIeEC2Eeb called 0 returned 0% blocks executed 0%
function _ZN7doctest5IsNaNIeEC1Eeb called 0 returned 0% blocks executed 0%
    #####: 1386:        IsNaN(F f, bool flip = false) : value(f), flipped(flip) {}
    $$$$$: 1386-block  0
    $$$$$: 1386-block  1
    $$$$$: 1386-block  2
    $$$$$: 1386-block  3
    $$$$$: 1386-block  4
    $$$$$: 1386-block  5
        -: 1387:
function _ZNK7doctest5IsNaNIfEntEv called 0 returned 0% blocks executed 0%
function _ZNK7doctest5IsNaNIdEntEv called 0 returned 0% blocks executed 0%
function _ZNK7doctest5IsNaNIeEntEv called 0 returned 0% blocks executed 0%
    #####: 1388:        IsNaN<F> operator!() const { return {value, !flipped}; }
    $$$$$: 1388-block  0
    $$$$$: 1388-block  1
    $$$$$: 1388-block  2
        -: 1389:
        -: 1390:        operator bool() const;
        -: 1391:    };
        -: 1392:
        -: 1393:#ifndef __MINGW32__
        -: 1394:    extern template
        -: 1395:    struct DOCTEST_INTERFACE_DECL IsNaN<float>;
        -: 1396:    extern template
        -: 1397:    struct DOCTEST_INTERFACE_DECL IsNaN<double>;
        -: 1398:    extern template
        -: 1399:    struct DOCTEST_INTERFACE_DECL IsNaN<long double>;
        -: 1400:#endif
        -: 1401:    DOCTEST_INTERFACE String toString(IsNaN<float> in);
        -: 1402:
        -: 1403:    DOCTEST_INTERFACE String toString(IsNaN<double> in);
        -: 1404:
        -: 1405:    DOCTEST_INTERFACE String toString(IsNaN<double long> in);
        -: 1406:
        -: 1407:#ifndef DOCTEST_CONFIG_DISABLE
        -: 1408:
        -: 1409:    namespace detail {
        -: 1410:        // clang-format off
        -: 1411:#ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1412:                                                                                                                                template<class T>               struct decay_array       { using type = T; };
        -: 1413:    template<class T, unsigned N>   struct decay_array<T[N]> { using type = T*; };
        -: 1414:    template<class T>               struct decay_array<T[]>  { using type = T*; };
        -: 1415:
        -: 1416:    template<class T>   struct not_char_pointer              { static DOCTEST_CONSTEXPR int value = 1; };
        -: 1417:    template<>          struct not_char_pointer<char*>       { static DOCTEST_CONSTEXPR int value = 0; };
        -: 1418:    template<>          struct not_char_pointer<const char*> { static DOCTEST_CONSTEXPR int value = 0; };
        -: 1419:
        -: 1420:    template<class T> struct can_use_op : public not_char_pointer<typename decay_array<T>::type> {};
        -: 1421:#endif // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1422:        // clang-format on
        -: 1423:
        -: 1424:        struct DOCTEST_INTERFACE TestFailureException {
        -: 1425:        };
        -: 1426:
        -: 1427:        DOCTEST_INTERFACE bool checkIfShouldThrow(assertType::Enum at);
        -: 1428:
        -: 1429:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 1430:
        -: 1431:        DOCTEST_NORETURN
        -: 1432:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 1433:        DOCTEST_INTERFACE void throwException();
        -: 1434:
        -: 1435:        struct DOCTEST_INTERFACE Subcase {
        -: 1436:            SubcaseSignature m_signature;
       64: 1437:            bool m_entered = false;
        -: 1438:
        -: 1439:            Subcase(const String &name, const char *file, int line);
        -: 1440:
        -: 1441:            Subcase(const Subcase &) = delete;
        -: 1442:
        -: 1443:            Subcase(Subcase &&) = delete;
        -: 1444:
        -: 1445:            Subcase &operator=(const Subcase &) = delete;
        -: 1446:
        -: 1447:            Subcase &operator=(Subcase &&) = delete;
        -: 1448:
        -: 1449:            ~Subcase();
        -: 1450:
        -: 1451:            operator bool() const;
        -: 1452:
        -: 1453:        private:
        -: 1454:            bool checkFilters();
        -: 1455:        };
        -: 1456:
        -: 1457:        template<typename L, typename R>
function _ZN7doctest6detail19stringifyBinaryExprIP5GraphDnEENS_6StringERKT_PKcRKT0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail19stringifyBinaryExprImiEENS_6StringERKT_PKcRKT0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail19stringifyBinaryExprINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEA2_cEENS_6StringERKT_PKcRKT0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail19stringifyBinaryExprIddEENS_6StringERKT_PKcRKT0_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail19stringifyBinaryExprINSt3__125__hash_map_const_iteratorINS2_21__hash_const_iteratorIPNS2_11__hash_nodeINS2_17__hash_value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5GraphEEPvEEEEEESK_EENS_6StringERKT_PKcRKT0_ called 0 returned 0% blocks executed 0%
    #####: 1458:        String stringifyBinaryExpr(const DOCTEST_REF_WRAP(L)lhs, const char *op,
        -: 1459:                                   const DOCTEST_REF_WRAP(R)rhs) {
    #####: 1460:            return (DOCTEST_STRINGIFY(lhs)) + op + (DOCTEST_STRINGIFY(rhs));
    $$$$$: 1460-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1460-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1460-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1460-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1460-block  4
    $$$$$: 1460-block  5
    $$$$$: 1460-block  6
    $$$$$: 1460-block  7
    $$$$$: 1460-block  8
    $$$$$: 1460-block  9
    $$$$$: 1460-block 10
branch  8 never executed
branch  9 never executed
    $$$$$: 1460-block 11
branch 10 never executed
branch 11 never executed
    $$$$$: 1460-block 12
branch 12 never executed
branch 13 never executed
    $$$$$: 1460-block 13
branch 14 never executed
branch 15 never executed
    $$$$$: 1460-block 14
    $$$$$: 1460-block 15
    $$$$$: 1460-block 16
    $$$$$: 1460-block 17
    $$$$$: 1460-block 18
    $$$$$: 1460-block 19
    $$$$$: 1460-block 20
branch 16 never executed
branch 17 never executed
    $$$$$: 1460-block 21
branch 18 never executed
branch 19 never executed
    $$$$$: 1460-block 22
branch 20 never executed
branch 21 never executed
    $$$$$: 1460-block 23
branch 22 never executed
branch 23 never executed
    $$$$$: 1460-block 24
    $$$$$: 1460-block 25
    $$$$$: 1460-block 26
    $$$$$: 1460-block 27
    $$$$$: 1460-block 28
    $$$$$: 1460-block 29
    $$$$$: 1460-block 30
branch 24 never executed
branch 25 never executed
    $$$$$: 1460-block 31
branch 26 never executed
branch 27 never executed
    $$$$$: 1460-block 32
branch 28 never executed
branch 29 never executed
    $$$$$: 1460-block 33
branch 30 never executed
branch 31 never executed
    $$$$$: 1460-block 34
    $$$$$: 1460-block 35
    $$$$$: 1460-block 36
    $$$$$: 1460-block 37
    $$$$$: 1460-block 38
    $$$$$: 1460-block 39
    $$$$$: 1460-block 40
branch 32 never executed
branch 33 never executed
    $$$$$: 1460-block 41
branch 34 never executed
branch 35 never executed
    $$$$$: 1460-block 42
branch 36 never executed
branch 37 never executed
    $$$$$: 1460-block 43
branch 38 never executed
branch 39 never executed
    $$$$$: 1460-block 44
    $$$$$: 1460-block 45
    $$$$$: 1460-block 46
    $$$$$: 1460-block 47
    $$$$$: 1460-block 48
    $$$$$: 1460-block 49
    #####: 1461:        }
    $$$$$: 1461-block  0
    $$$$$: 1461-block  1
    $$$$$: 1461-block  2
    $$$$$: 1461-block  3
    $$$$$: 1461-block  4
    $$$$$: 1461-block  5
    $$$$$: 1461-block  6
    $$$$$: 1461-block  7
    $$$$$: 1461-block  8
    $$$$$: 1461-block  9
    $$$$$: 1461-block 10
    $$$$$: 1461-block 11
    $$$$$: 1461-block 12
    $$$$$: 1461-block 13
    $$$$$: 1461-block 14
        -: 1462:
        -: 1463:#if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)
        -: 1464:        DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wunused-comparison")
        -: 1465:#endif
        -: 1466:
        -: 1467:// This will check if there is any way it could find a operator like member or friend and uses it.
        -: 1468:// If not it doesn't find the operator or if the operator at global scope is defined after
        -: 1469:// this template, the template won't be instantiated due to SFINAE. Once the template is not
        -: 1470:// instantiated it can look for global operator using normal conversions.
        -: 1471:#ifdef __NVCC__
        -: 1472:#define SFINAE_OP(ret,op) ret
        -: 1473:#else
        -: 1474:#define SFINAE_OP(ret, op) decltype((void)(doctest::detail::declval<L>() op doctest::detail::declval<R>()),ret{})
        -: 1475:#endif
        -: 1476:
        -: 1477:#define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op, op_str, op_macro)                              \
        -: 1478:    template <typename R>                                                                          \
        -: 1479:    DOCTEST_NOINLINE SFINAE_OP(Result,op) operator op(R&& rhs) {                                   \
        -: 1480:    bool res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \
        -: 1481:        if(m_at & assertType::is_false)                                                            \
        -: 1482:            res = !res;                                                                            \
        -: 1483:        if(!res || doctest::getContextOptions()->success)                                          \
        -: 1484:            return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \
        -: 1485:        return Result(res);                                                                        \
        -: 1486:    }
        -: 1487:
        -: 1488:        // more checks could be added - like in Catch:
        -: 1489:        // https://github.com/catchorg/Catch2/pull/1480/files
        -: 1490:        // https://github.com/catchorg/Catch2/pull/1481/files
        -: 1491:#define DOCTEST_FORBIT_EXPRESSION(rt, op)                                                          \
        -: 1492:    template <typename R>                                                                          \
        -: 1493:    rt& operator op(const R&) {                                                                    \
        -: 1494:        static_assert(deferred_false<R>::value,                                                    \
        -: 1495:                      "Expression Too Complex Please Rewrite As Binary Comparison!");              \
        -: 1496:        return *this;                                                                              \
        -: 1497:    }
        -: 1498:
function _ZN7doctest6detail6ResultD1Ev called 22 returned 100% blocks executed 100%
function _ZN7doctest6detail6ResultD2Ev called 22 returned 100% blocks executed 100%
        -: 1499:        struct DOCTEST_INTERFACE Result // NOLINT(*-member-init)
        -: 1500:        {
        -: 1501:            bool m_passed;
        -: 1502:            String m_decomp;
        -: 1503:
        -: 1504:            Result() = default; // TODO: Why do we need this? (To remove NOLINT)
        -: 1505:            Result(bool passed, const String &decomposition = String());
        -: 1506:
        -: 1507:            // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence
        -: 1508:            DOCTEST_FORBIT_EXPRESSION(Result, &)
        -: 1509:
        -: 1510:            DOCTEST_FORBIT_EXPRESSION(Result, ^)
        -: 1511:
        -: 1512:            DOCTEST_FORBIT_EXPRESSION(Result, |)
        -: 1513:
        -: 1514:            DOCTEST_FORBIT_EXPRESSION(Result, &&)
        -: 1515:
        -: 1516:            DOCTEST_FORBIT_EXPRESSION(Result, ||)
        -: 1517:
        -: 1518:            DOCTEST_FORBIT_EXPRESSION(Result, ==)
        -: 1519:
        -: 1520:            DOCTEST_FORBIT_EXPRESSION(Result, !=)
        -: 1521:
        -: 1522:            DOCTEST_FORBIT_EXPRESSION(Result, <)
        -: 1523:
        -: 1524:            DOCTEST_FORBIT_EXPRESSION(Result, >)
        -: 1525:
        -: 1526:            DOCTEST_FORBIT_EXPRESSION(Result, <=)
        -: 1527:
        -: 1528:            DOCTEST_FORBIT_EXPRESSION(Result, >=)
        -: 1529:
        -: 1530:            DOCTEST_FORBIT_EXPRESSION(Result, =)
        -: 1531:
        -: 1532:            DOCTEST_FORBIT_EXPRESSION(Result, +=)
        -: 1533:
        -: 1534:            DOCTEST_FORBIT_EXPRESSION(Result, -=)
        -: 1535:
        -: 1536:            DOCTEST_FORBIT_EXPRESSION(Result, *=)
        -: 1537:
        -: 1538:            DOCTEST_FORBIT_EXPRESSION(Result, /=)
        -: 1539:
        -: 1540:            DOCTEST_FORBIT_EXPRESSION(Result, %=)
        -: 1541:
        -: 1542:            DOCTEST_FORBIT_EXPRESSION(Result, <<=)
        -: 1543:
        -: 1544:            DOCTEST_FORBIT_EXPRESSION(Result, >>=)
        -: 1545:
        -: 1546:            DOCTEST_FORBIT_EXPRESSION(Result, &=)
        -: 1547:
        -: 1548:            DOCTEST_FORBIT_EXPRESSION(Result, ^=)
        -: 1549:
        -: 1550:            DOCTEST_FORBIT_EXPRESSION(Result, |=)
        -: 1551:        };
        -: 1552:
        -: 1553:#ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION
        -: 1554:
        -: 1555:        DOCTEST_CLANG_SUPPRESS_WARNING_PUSH
        -: 1556:        DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-conversion")
        -: 1557:        DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-compare")
        -: 1558:        //DOCTEST_CLANG_SUPPRESS_WARNING("-Wdouble-promotion")
        -: 1559:        //DOCTEST_CLANG_SUPPRESS_WARNING("-Wconversion")
        -: 1560:        //DOCTEST_CLANG_SUPPRESS_WARNING("-Wfloat-equal")
        -: 1561:
        -: 1562:        DOCTEST_GCC_SUPPRESS_WARNING_PUSH
        -: 1563:        DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")
        -: 1564:        DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-compare")
        -: 1565:        //DOCTEST_GCC_SUPPRESS_WARNING("-Wdouble-promotion")
        -: 1566:        //DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")
        -: 1567:        //DOCTEST_GCC_SUPPRESS_WARNING("-Wfloat-equal")
        -: 1568:
        -: 1569:        DOCTEST_MSVC_SUPPRESS_WARNING_PUSH
        -: 1570:        // https://stackoverflow.com/questions/39479163 what's the difference between 4018 and 4389
        -: 1571:        DOCTEST_MSVC_SUPPRESS_WARNING(4388) // signed/unsigned mismatch
        -: 1572:        DOCTEST_MSVC_SUPPRESS_WARNING(4389) // 'operator' : signed/unsigned mismatch
        -: 1573:        DOCTEST_MSVC_SUPPRESS_WARNING(4018) // 'expression' : signed/unsigned mismatch
        -: 1574:        //DOCTEST_MSVC_SUPPRESS_WARNING(4805) // 'operation' : unsafe mix of type 'type' and type 'type' in operation
        -: 1575:
        -: 1576:#endif // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION
        -: 1577:
        -: 1578:        // clang-format off
        -: 1579:#ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1580:#define DOCTEST_COMPARISON_RETURN_TYPE bool
        -: 1581:#else // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1582:                                                                                                                                #define DOCTEST_COMPARISON_RETURN_TYPE typename types::enable_if<can_use_op<L>::value || can_use_op<R>::value, bool>::type
        -: 1583:    inline bool eq(const char* lhs, const char* rhs) { return String(lhs) == String(rhs); }
        -: 1584:    inline bool ne(const char* lhs, const char* rhs) { return String(lhs) != String(rhs); }
        -: 1585:    inline bool lt(const char* lhs, const char* rhs) { return String(lhs) <  String(rhs); }
        -: 1586:    inline bool gt(const char* lhs, const char* rhs) { return String(lhs) >  String(rhs); }
        -: 1587:    inline bool le(const char* lhs, const char* rhs) { return String(lhs) <= String(rhs); }
        -: 1588:    inline bool ge(const char* lhs, const char* rhs) { return String(lhs) >= String(rhs); }
        -: 1589:#endif // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1590:        // clang-format on
        -: 1591:
        -: 1592:#define DOCTEST_RELATIONAL_OP(name, op)                                                            \
        -: 1593:    template <typename L, typename R>                                                              \
        -: 1594:    DOCTEST_COMPARISON_RETURN_TYPE name(const DOCTEST_REF_WRAP(L) lhs,                             \
        -: 1595:                                        const DOCTEST_REF_WRAP(R) rhs) {                           \
        -: 1596:        return lhs op rhs;                                                                         \
        -: 1597:    }
        -: 1598:
        -: 1599:        DOCTEST_RELATIONAL_OP(eq, ==)
        -: 1600:
        -: 1601:        DOCTEST_RELATIONAL_OP(ne, !=)
        -: 1602:
        -: 1603:        DOCTEST_RELATIONAL_OP(lt, <)
        -: 1604:
        -: 1605:        DOCTEST_RELATIONAL_OP(gt, >)
        -: 1606:
        -: 1607:        DOCTEST_RELATIONAL_OP(le, <=)
        -: 1608:
        -: 1609:        DOCTEST_RELATIONAL_OP(ge, >=)
        -: 1610:
        -: 1611:#ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1612:#define DOCTEST_CMP_EQ(l, r) l == r
        -: 1613:#define DOCTEST_CMP_NE(l, r) l != r
        -: 1614:#define DOCTEST_CMP_GT(l, r) l > r
        -: 1615:#define DOCTEST_CMP_LT(l, r) l < r
        -: 1616:#define DOCTEST_CMP_GE(l, r) l >= r
        -: 1617:#define DOCTEST_CMP_LE(l, r) l <= r
        -: 1618:#else // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1619:                                                                                                                                #define DOCTEST_CMP_EQ(l, r) eq(l, r)
        -: 1620:#define DOCTEST_CMP_NE(l, r) ne(l, r)
        -: 1621:#define DOCTEST_CMP_GT(l, r) gt(l, r)
        -: 1622:#define DOCTEST_CMP_LT(l, r) lt(l, r)
        -: 1623:#define DOCTEST_CMP_GE(l, r) ge(l, r)
        -: 1624:#define DOCTEST_CMP_LE(l, r) le(l, r)
        -: 1625:#endif // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 1626:
        -: 1627:        template<typename L>
        -: 1628:        // cppcheck-suppress copyCtorAndEqOperator
        -: 1629:        struct Expression_lhs {
        -: 1630:            L lhs;
        -: 1631:            assertType::Enum m_at;
        -: 1632:
function _ZN7doctest6detail14Expression_lhsIbEC1EObNS_10assertType4EnumE called 6 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIbEC2EObNS_10assertType4EnumE called 6 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIRP5GraphEC1ES4_NS_10assertType4EnumE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIRP5GraphEC2ES4_NS_10assertType4EnumE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsImEC1EOmNS_10assertType4EnumE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsImEC2EOmNS_10assertType4EnumE called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC1ESA_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEC2ESA_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIRKdEC1ES3_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIRKdEC2ES3_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIP5GraphEC1EOS3_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsIP5GraphEC2EOS3_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsINSt3__125__hash_map_const_iteratorINS2_21__hash_const_iteratorIPNS2_11__hash_nodeINS2_17__hash_value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5GraphEEPvEEEEEEEC1EOSK_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail14Expression_lhsINSt3__125__hash_map_const_iteratorINS2_21__hash_const_iteratorIPNS2_11__hash_nodeINS2_17__hash_value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5GraphEEPvEEEEEEEC2EOSK_NS_10assertType4EnumE called 2 returned 100% blocks executed 100%
       44: 1633:            explicit Expression_lhs(L &&in, assertType::Enum at)
       44: 1634:                    : lhs(static_cast<L &&>(in)), m_at(at) {}
        6: 1634-block  0
        6: 1634-block  1
        4: 1634-block  2
        4: 1634-block  3
        4: 1634-block  4
        4: 1634-block  5
        2: 1634-block  6
        2: 1634-block  7
        2: 1634-block  8
        2: 1634-block  9
        2: 1634-block 10
        2: 1634-block 11
        2: 1634-block 12
        2: 1634-block 13
        -: 1635:
function _ZN7doctest6detail14Expression_lhsIbEcvNS0_6ResultEEv called 6 returned 100% blocks executed 58%
        6: 1636:            DOCTEST_NOINLINE operator Result() {
        -: 1637:// this is needed only for MSVC 2015
        -: 1638:                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) // 'int': forcing value to bool
        6: 1639:                bool res = static_cast<bool>(lhs);
        -: 1640:                DOCTEST_MSVC_SUPPRESS_WARNING_POP
        6: 1641:                if (m_at & assertType::is_false) { //!OCLINT bitwise operator in conditional
        6: 1641-block  0
branch  0 taken 5
branch  1 taken 1
        1: 1642:                    res = !res;
        1: 1643:                }
        1: 1643-block  0
        -: 1644:
        6: 1645:                if (!res || getContextOptions()->success) {
        6: 1645-block  0
branch  0 taken 6
branch  1 taken 0
        6: 1645-block  1
branch  2 taken 0
branch  3 taken 6
    #####: 1646:                    return {res, (DOCTEST_STRINGIFY(lhs))};
    $$$$$: 1646-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1646-block  1
    $$$$$: 1646-block  2
    $$$$$: 1646-block  3
        -: 1647:                }
        6: 1648:                return {res};
        6: 1648-block  0
branch  0 taken 6
branch  1 taken 0
        6: 1648-block  1
    $$$$$: 1648-block  2
        6: 1649:            }
        6: 1649-block  0
        -: 1650:
        -: 1651:            /* This is required for user-defined conversions from Expression_lhs to L */
        -: 1652:            operator L() const { return lhs; }
        -: 1653:
        -: 1654:            // clang-format off
function _ZN7doctest6detail14Expression_lhsImEeqIiEEDTcmcvveqclL_ZNS0_7declvalImEEOT_vEEclsr7doctest6detailE7declvalIS5_EEtlNS0_6ResultEEES6_ called 4 returned 100% blocks executed 50%
function _ZN7doctest6detail14Expression_lhsIRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEeqIRA2_KcEEDTcmcvveqclL_ZNS0_7declvalISA_EEOT_vEEclsr7doctest6detailE7declvalISH_EEtlNS0_6ResultEEESI_ called 2 returned 100% blocks executed 50%
function _ZN7doctest6detail14Expression_lhsIRKdEeqIdEEDTcmcvveqclL_ZNS0_7declvalIS3_EEOT_vEEclsr7doctest6detailE7declvalIS7_EEtlNS0_6ResultEEES8_ called 2 returned 100% blocks executed 50%
function _ZN7doctest6detail14Expression_lhsIP5GraphEeqIDnEEDTcmcvveqclL_ZNS0_7declvalIS3_EEOT_vEEclsr7doctest6detailE7declvalIS7_EEtlNS0_6ResultEEES8_ called 1 returned 100% blocks executed 50%
        9: 1655:            DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(==, " == ",
        4: 1655-block  0
branch  0 taken 4
branch  1 taken 0
    $$$$$: 1655-block  1
        4: 1655-block  2
branch  2 taken 4
branch  3 taken 0
        4: 1655-block  3
branch  4 taken 0
branch  5 taken 4
    $$$$$: 1655-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 1655-block  5
    $$$$$: 1655-block  6
        4: 1655-block  7
branch  8 taken 4
branch  9 taken 0
        4: 1655-block  8
    $$$$$: 1655-block  9
        4: 1655-block 10
    $$$$$: 1655-block 11
        2: 1655-block 12
branch 10 taken 2
branch 11 taken 0
    $$$$$: 1655-block 13
        2: 1655-block 14
branch 12 taken 2
branch 13 taken 0
        2: 1655-block 15
branch 14 taken 0
branch 15 taken 2
    $$$$$: 1655-block 16
branch 16 never executed
branch 17 never executed
    $$$$$: 1655-block 17
    $$$$$: 1655-block 18
        2: 1655-block 19
branch 18 taken 2
branch 19 taken 0
        2: 1655-block 20
    $$$$$: 1655-block 21
        2: 1655-block 22
    $$$$$: 1655-block 23
        2: 1655-block 24
branch 20 taken 2
branch 21 taken 0
    $$$$$: 1655-block 25
        2: 1655-block 26
branch 22 taken 2
branch 23 taken 0
        2: 1655-block 27
branch 24 taken 0
branch 25 taken 2
    $$$$$: 1655-block 28
branch 26 never executed
branch 27 never executed
    $$$$$: 1655-block 29
    $$$$$: 1655-block 30
        2: 1655-block 31
branch 28 taken 2
branch 29 taken 0
        2: 1655-block 32
    $$$$$: 1655-block 33
        2: 1655-block 34
    $$$$$: 1655-block 35
        1: 1655-block 36
branch 30 taken 1
branch 31 taken 0
    $$$$$: 1655-block 37
        1: 1655-block 38
branch 32 taken 1
branch 33 taken 0
        1: 1655-block 39
branch 34 taken 0
branch 35 taken 1
    $$$$$: 1655-block 40
branch 36 never executed
branch 37 never executed
    $$$$$: 1655-block 41
    $$$$$: 1655-block 42
        1: 1655-block 43
branch 38 taken 1
branch 39 taken 0
        1: 1655-block 44
    $$$$$: 1655-block 45
        1: 1655-block 46
    $$$$$: 1655-block 47
        -: 1656:                                                    DOCTEST_CMP_EQ) //!OCLINT bitwise operator in conditional
function _ZN7doctest6detail14Expression_lhsIRP5GraphEneIDnEEDTcmcvvneclL_ZNS0_7declvalIS4_EEOT_vEEclsr7doctest6detailE7declvalIS8_EEtlNS0_6ResultEEES9_ called 4 returned 100% blocks executed 50%
function _ZN7doctest6detail14Expression_lhsIP5GraphEneIDnEEDTcmcvvneclL_ZNS0_7declvalIS3_EEOT_vEEclsr7doctest6detailE7declvalIS7_EEtlNS0_6ResultEEES8_ called 1 returned 100% blocks executed 50%
function _ZN7doctest6detail14Expression_lhsINSt3__125__hash_map_const_iteratorINS2_21__hash_const_iteratorIPNS2_11__hash_nodeINS2_17__hash_value_typeINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEP5GraphEEPvEEEEEEEneISK_EEDTcmcvvneclL_ZNS0_7declvalISK_EEOT_vEEclsr7doctest6detailE7declvalISO_EEtlNS0_6ResultEEESP_ called 2 returned 100% blocks executed 50%
        7: 1657:            DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(!=, " != ",
        4: 1657-block  0
branch  0 taken 4
branch  1 taken 0
    $$$$$: 1657-block  1
        4: 1657-block  2
branch  2 taken 4
branch  3 taken 0
        4: 1657-block  3
branch  4 taken 0
branch  5 taken 4
    $$$$$: 1657-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 1657-block  5
    $$$$$: 1657-block  6
        4: 1657-block  7
branch  8 taken 4
branch  9 taken 0
        4: 1657-block  8
    $$$$$: 1657-block  9
        4: 1657-block 10
    $$$$$: 1657-block 11
        1: 1657-block 12
branch 10 taken 1
branch 11 taken 0
    $$$$$: 1657-block 13
        1: 1657-block 14
branch 12 taken 1
branch 13 taken 0
        1: 1657-block 15
branch 14 taken 0
branch 15 taken 1
    $$$$$: 1657-block 16
branch 16 never executed
branch 17 never executed
    $$$$$: 1657-block 17
    $$$$$: 1657-block 18
        1: 1657-block 19
branch 18 taken 1
branch 19 taken 0
        1: 1657-block 20
    $$$$$: 1657-block 21
        1: 1657-block 22
    $$$$$: 1657-block 23
        2: 1657-block 24
branch 20 taken 2
branch 21 taken 0
    $$$$$: 1657-block 25
        2: 1657-block 26
branch 22 taken 2
branch 23 taken 0
        2: 1657-block 27
branch 24 taken 0
branch 25 taken 2
    $$$$$: 1657-block 28
branch 26 never executed
branch 27 never executed
    $$$$$: 1657-block 29
    $$$$$: 1657-block 30
        2: 1657-block 31
branch 28 taken 2
branch 29 taken 0
        2: 1657-block 32
    $$$$$: 1657-block 33
        2: 1657-block 34
    $$$$$: 1657-block 35
        -: 1658:                                                    DOCTEST_CMP_NE) //!OCLINT bitwise operator in conditional
        -: 1659:            DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>, " >  ", DOCTEST_CMP_GT) //!OCLINT bitwise operator in conditional
        -: 1660:            DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<, " <  ", DOCTEST_CMP_LT) //!OCLINT bitwise operator in conditional
        -: 1661:            DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>=, " >= ",
        -: 1662:                                                    DOCTEST_CMP_GE) //!OCLINT bitwise operator in conditional
        -: 1663:            DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<=, " <= ",
        -: 1664:                                                    DOCTEST_CMP_LE) //!OCLINT bitwise operator in conditional
        -: 1665:            // clang-format on
        -: 1666:
        -: 1667:            // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence
        -: 1668:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &)
        -: 1669:
        -: 1670:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^)
        -: 1671:
        -: 1672:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |)
        -: 1673:
        -: 1674:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &&)
        -: 1675:
        -: 1676:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ||)
        -: 1677:
        -: 1678:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, =)
        -: 1679:
        -: 1680:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, +=)
        -: 1681:
        -: 1682:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, -=)
        -: 1683:
        -: 1684:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, *=)
        -: 1685:
        -: 1686:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, /=)
        -: 1687:
        -: 1688:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, %=)
        -: 1689:
        -: 1690:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<=)
        -: 1691:
        -: 1692:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>=)
        -: 1693:
        -: 1694:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &=)
        -: 1695:
        -: 1696:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^=)
        -: 1697:
        -: 1698:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |=)
        -: 1699:            // these 2 are unfortunate because they should be allowed - they have higher precedence over the comparisons, but the
        -: 1700:            // ExpressionDecomposer class uses the left shift operator to capture the left operand of the binary expression...
        -: 1701:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<)
        -: 1702:
        -: 1703:            DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>)
        -: 1704:        };
        -: 1705:
        -: 1706:#ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION
        -: 1707:
        -: 1708:        DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 1709:        DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 1710:        DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 1711:
        -: 1712:#endif // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION
        -: 1713:
        -: 1714:#if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)
        -: 1715:        DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 1716:#endif
        -: 1717:
        -: 1718:        struct DOCTEST_INTERFACE ExpressionDecomposer {
        -: 1719:            assertType::Enum m_at;
        -: 1720:
        -: 1721:            ExpressionDecomposer(assertType::Enum at);
        -: 1722:
        -: 1723:            // The right operator for capturing expressions is "<=" instead of "<<" (based on the operator precedence table)
        -: 1724:            // but then there will be warnings from GCC about "-Wparentheses" and since "_Pragma()" is problematic this will stay for now...
        -: 1725:            // https://github.com/catchorg/Catch2/issues/870
        -: 1726:            // https://github.com/catchorg/Catch2/issues/565
        -: 1727:            template<typename L>
function _ZN7doctest6detail20ExpressionDecomposerlsIbEENS0_14Expression_lhsIT_EEOS4_ called 6 returned 100% blocks executed 100%
function _ZN7doctest6detail20ExpressionDecomposerlsIRP5GraphEENS0_14Expression_lhsIT_EEOS7_ called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail20ExpressionDecomposerlsImEENS0_14Expression_lhsIT_EEOS4_ called 4 returned 100% blocks executed 100%
function _ZN7doctest6detail20ExpressionDecomposerlsIP5GraphEENS0_14Expression_lhsIT_EEOS6_ called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail20ExpressionDecomposerlsINSt3__125__hash_map_const_iteratorINS3_21__hash_const_iteratorIPNS3_11__hash_nodeINS3_17__hash_value_typeINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEP5GraphEEPvEEEEEEEENS0_14Expression_lhsIT_EEOSN_ called 2 returned 100% blocks executed 100%
       18: 1728:            Expression_lhs<L> operator<<(L &&operand) {
       18: 1729:                return Expression_lhs<L>(static_cast<L &&>(operand), m_at);
        6: 1729-block  0
        4: 1729-block  1
        4: 1729-block  2
        2: 1729-block  3
        2: 1729-block  4
        -: 1730:            }
        -: 1731:
        -: 1732:            template<typename L, typename types::enable_if<!doctest::detail::types::is_rvalue_reference<L>::value, void>::type * = nullptr>
function _ZN7doctest6detail20ExpressionDecomposerlsINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEELPv0EEENS0_14Expression_lhsIRKT_EESE_ called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail20ExpressionDecomposerlsIdLPv0EEENS0_14Expression_lhsIRKT_EES7_ called 2 returned 100% blocks executed 100%
        4: 1733:            Expression_lhs<const L &> operator<<(const L &operand) {
        4: 1734:                return Expression_lhs<const L &>(operand, m_at);
        2: 1734-block  0
        2: 1734-block  1
        -: 1735:            }
        -: 1736:        };
        -: 1737:
function _ZN7doctest6detail9TestSuiteC1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest6detail9TestSuiteC2Ev called 1 returned 100% blocks executed 100%
        1: 1738:        struct DOCTEST_INTERFACE TestSuite {
        1: 1738-block  0
        1: 1739:            const char *m_test_suite = nullptr;
        1: 1740:            const char *m_description = nullptr;
        1: 1741:            bool m_skip = false;
        1: 1742:            bool m_no_breaks = false;
        1: 1743:            bool m_no_output = false;
        1: 1744:            bool m_may_fail = false;
        1: 1745:            bool m_should_fail = false;
        1: 1746:            int m_expected_failures = 0;
        1: 1747:            double m_timeout = 0;
        -: 1748:
        -: 1749:            TestSuite &operator*(const char *in);
        -: 1750:
        -: 1751:            template<typename T>
        -: 1752:            TestSuite &operator*(const T &in) {
        -: 1753:                in.fill(*this);
        -: 1754:                return *this;
        -: 1755:            }
        -: 1756:        };
        -: 1757:
        -: 1758:        using funcType = void (*)();
        -: 1759:
        -: 1760:        struct DOCTEST_INTERFACE TestCase : public TestCaseData {
        -: 1761:            funcType m_test; // a function pointer to the test case
        -: 1762:
        -: 1763:            String m_type; // for templated test cases - gets appended to the real name
        -: 1764:            int m_template_id; // an ID used to distinguish between the different versions of a templated test case
        -: 1765:            String m_full_name; // contains the name (only for templated test cases!) + the template type
        -: 1766:
        -: 1767:            TestCase(funcType test, const char *file, unsigned line, const TestSuite &test_suite,
        -: 1768:                     const String &type = String(), int template_id = -1);
        -: 1769:
        -: 1770:            TestCase(const TestCase &other);
        -: 1771:
        -: 1772:            TestCase(TestCase &&) = delete;
        -: 1773:
        -: 1774:            DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) // hides a non-virtual function
        -: 1775:            TestCase &operator=(const TestCase &other);
        -: 1776:
        -: 1777:            DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 1778:
        -: 1779:            TestCase &operator=(TestCase &&) = delete;
        -: 1780:
        -: 1781:            TestCase &operator*(const char *in);
        -: 1782:
        -: 1783:            template<typename T>
        -: 1784:            TestCase &operator*(const T &in) {
        -: 1785:                in.fill(*this);
        -: 1786:                return *this;
        -: 1787:            }
        -: 1788:
        -: 1789:            bool operator<(const TestCase &other) const;
        -: 1790:
function _ZN7doctest6detail8TestCaseD1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest6detail8TestCaseD2Ev called 1 returned 100% blocks executed 100%
        2: 1791:            ~TestCase() = default;
        1: 1791-block  0
        1: 1791-block  1
        -: 1792:        };
        -: 1793:
        -: 1794:        // forward declarations of functions used by the macros
        -: 1795:        DOCTEST_INTERFACE int regTest(const TestCase &tc);
        -: 1796:
        -: 1797:        DOCTEST_INTERFACE int setTestSuite(const TestSuite &ts);
        -: 1798:
        -: 1799:        DOCTEST_INTERFACE bool isDebuggerActive();
        -: 1800:
        -: 1801:        template<typename T>
        -: 1802:        int instantiationHelper(const T &) { return 0; }
        -: 1803:
        -: 1804:        namespace binaryAssertComparison {
        -: 1805:            enum Enum {
        -: 1806:                eq = 0,
        -: 1807:                ne,
        -: 1808:                gt,
        -: 1809:                lt,
        -: 1810:                ge,
        -: 1811:                le
        -: 1812:            };
        -: 1813:        } // namespace binaryAssertComparison
        -: 1814:
        -: 1815:        // clang-format off
        -: 1816:        template<int, class L, class R>
        -: 1817:        struct RelationalComparator {
        -: 1818:            bool operator()(const DOCTEST_REF_WRAP(L), const DOCTEST_REF_WRAP(R)) const { return false; }
        -: 1819:        };
        -: 1820:
        -: 1821:#define DOCTEST_BINARY_RELATIONAL_OP(n, op) \
        -: 1822:    template <class L, class R> struct RelationalComparator<n, L, R> { bool operator()(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) const { return op(lhs, rhs); } };
        -: 1823:        // clang-format on
        -: 1824:
        -: 1825:        DOCTEST_BINARY_RELATIONAL_OP(0, doctest::detail::eq)
        -: 1826:
        -: 1827:        DOCTEST_BINARY_RELATIONAL_OP(1, doctest::detail::ne)
        -: 1828:
        -: 1829:        DOCTEST_BINARY_RELATIONAL_OP(2, doctest::detail::gt)
        -: 1830:
        -: 1831:        DOCTEST_BINARY_RELATIONAL_OP(3, doctest::detail::lt)
        -: 1832:
        -: 1833:        DOCTEST_BINARY_RELATIONAL_OP(4, doctest::detail::ge)
        -: 1834:
        -: 1835:        DOCTEST_BINARY_RELATIONAL_OP(5, doctest::detail::le)
        -: 1836:
function _ZN7doctest6detail13ResultBuilderD1Ev called 23 returned 100% blocks executed 100%
function _ZN7doctest6detail13ResultBuilderD2Ev called 23 returned 100% blocks executed 100%
        -: 1837:        struct DOCTEST_INTERFACE ResultBuilder : public AssertData {
        -: 1838:            ResultBuilder(assertType::Enum at, const char *file, int line, const char *expr,
        -: 1839:                          const char *exception_type = "", const String &exception_string = "");
        -: 1840:
        -: 1841:            ResultBuilder(assertType::Enum at, const char *file, int line, const char *expr,
        -: 1842:                          const char *exception_type, const Contains &exception_string);
        -: 1843:
        -: 1844:            void setResult(const Result &res);
        -: 1845:
        -: 1846:            template<int comparison, typename L, typename R>
        -: 1847:            DOCTEST_NOINLINE bool binary_assert(const DOCTEST_REF_WRAP(L)lhs,
        -: 1848:                                                const DOCTEST_REF_WRAP(R)rhs) {
        -: 1849:                m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);
        -: 1850:                if (m_failed || getContextOptions()->success) {
        -: 1851:                    m_decomp = stringifyBinaryExpr(lhs, ", ", rhs);
        -: 1852:                }
        -: 1853:                return !m_failed;
        -: 1854:            }
        -: 1855:
        -: 1856:            template<typename L>
        -: 1857:            DOCTEST_NOINLINE bool unary_assert(const DOCTEST_REF_WRAP(L)val) {
        -: 1858:                m_failed = !val;
        -: 1859:
        -: 1860:                if (m_at & assertType::is_false) { //!OCLINT bitwise operator in conditional
        -: 1861:                    m_failed = !m_failed;
        -: 1862:                }
        -: 1863:
        -: 1864:                if (m_failed || getContextOptions()->success) {
        -: 1865:                    m_decomp = (DOCTEST_STRINGIFY(val));
        -: 1866:                }
        -: 1867:
        -: 1868:                return !m_failed;
        -: 1869:            }
        -: 1870:
        -: 1871:            void translateException();
        -: 1872:
        -: 1873:            bool log();
        -: 1874:
        -: 1875:            void react() const;
        -: 1876:        };
        -: 1877:
        -: 1878:        namespace assertAction {
        -: 1879:            enum Enum {
        -: 1880:                nothing = 0,
        -: 1881:                dbgbreak = 1,
        -: 1882:                shouldthrow = 2
        -: 1883:            };
        -: 1884:        } // namespace assertAction
        -: 1885:
        -: 1886:        DOCTEST_INTERFACE void failed_out_of_a_testing_context(const AssertData &ad);
        -: 1887:
        -: 1888:        DOCTEST_INTERFACE bool decomp_assert(assertType::Enum at, const char *file, int line,
        -: 1889:                                             const char *expr, const Result &result);
        -: 1890:
        -: 1891:#define DOCTEST_ASSERT_OUT_OF_TESTS(decomp)                                                        \
        -: 1892:    do {                                                                                           \
        -: 1893:        if(!is_running_in_test) {                                                                  \
        -: 1894:            if(failed) {                                                                           \
        -: 1895:                ResultBuilder rb(at, file, line, expr);                                            \
        -: 1896:                rb.m_failed = failed;                                                              \
        -: 1897:                rb.m_decomp = decomp;                                                              \
        -: 1898:                failed_out_of_a_testing_context(rb);                                               \
        -: 1899:                if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \
        -: 1900:                    DOCTEST_BREAK_INTO_DEBUGGER();                                                 \
        -: 1901:                if(checkIfShouldThrow(at))                                                         \
        -: 1902:                    throwException();                                                              \
        -: 1903:            }                                                                                      \
        -: 1904:            return !failed;                                                                        \
        -: 1905:        }                                                                                          \
        -: 1906:    } while(false)
        -: 1907:
        -: 1908:#define DOCTEST_ASSERT_IN_TESTS(decomp)                                                            \
        -: 1909:    ResultBuilder rb(at, file, line, expr);                                                        \
        -: 1910:    rb.m_failed = failed;                                                                          \
        -: 1911:    if(rb.m_failed || getContextOptions()->success)                                                \
        -: 1912:        rb.m_decomp = decomp;                                                                      \
        -: 1913:    if(rb.log())                                                                                   \
        -: 1914:        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \
        -: 1915:    if(rb.m_failed && checkIfShouldThrow(at))                                                      \
        -: 1916:    throwException()
        -: 1917:
        -: 1918:        template<int comparison, typename L, typename R>
        -: 1919:        DOCTEST_NOINLINE bool binary_assert(assertType::Enum at, const char *file, int line,
        -: 1920:                                            const char *expr, const DOCTEST_REF_WRAP(L)lhs,
        -: 1921:                                            const DOCTEST_REF_WRAP(R)rhs) {
        -: 1922:            bool failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);
        -: 1923:
        -: 1924:            // ###################################################################################
        -: 1925:            // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT
        -: 1926:            // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED
        -: 1927:            // ###################################################################################
        -: 1928:            DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs, ", ", rhs));
        -: 1929:            DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs, ", ", rhs));
        -: 1930:            return !failed;
        -: 1931:        }
        -: 1932:
        -: 1933:        template<typename L>
        -: 1934:        DOCTEST_NOINLINE bool unary_assert(assertType::Enum at, const char *file, int line,
        -: 1935:                                           const char *expr, const DOCTEST_REF_WRAP(L)val) {
        -: 1936:            bool failed = !val;
        -: 1937:
        -: 1938:            if (at & assertType::is_false) //!OCLINT bitwise operator in conditional
        -: 1939:                failed = !failed;
        -: 1940:
        -: 1941:            // ###################################################################################
        -: 1942:            // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT
        -: 1943:            // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED
        -: 1944:            // ###################################################################################
        -: 1945:            DOCTEST_ASSERT_OUT_OF_TESTS((DOCTEST_STRINGIFY(val)));
        -: 1946:            DOCTEST_ASSERT_IN_TESTS((DOCTEST_STRINGIFY(val)));
        -: 1947:            return !failed;
        -: 1948:        }
        -: 1949:
        -: 1950:        struct DOCTEST_INTERFACE IExceptionTranslator {
        -: 1951:            DOCTEST_DECLARE_INTERFACE(IExceptionTranslator)
        -: 1952:
        -: 1953:            virtual bool translate(String &) const = 0;
        -: 1954:        };
        -: 1955:
        -: 1956:        template<typename T>
        -: 1957:        class ExceptionTranslator : public IExceptionTranslator //!OCLINT destructor of virtual class
        -: 1958:        {
        -: 1959:        public:
        -: 1960:            explicit ExceptionTranslator(String (*translateFunction)(T))
        -: 1961:                    : m_translateFunction(translateFunction) {}
        -: 1962:
        -: 1963:            bool translate(String &res) const override {
        -: 1964:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 1965:                try {
        -: 1966:                    throw; // lgtm [cpp/rethrow-no-exception]
        -: 1967:                    // cppcheck-suppress catchExceptionByValue
        -: 1968:                } catch (const T &ex) {
        -: 1969:                    res = m_translateFunction(ex); //!OCLINT parameter reassignment
        -: 1970:                    return true;
        -: 1971:                } catch (...) {}         //!OCLINT -  empty catch statement
        -: 1972:#endif                              // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 1973:                static_cast<void>(res); // to silence -Wunused-parameter
        -: 1974:                return false;
        -: 1975:            }
        -: 1976:
        -: 1977:        private:
        -: 1978:            String (*m_translateFunction)(T);
        -: 1979:        };
        -: 1980:
        -: 1981:        DOCTEST_INTERFACE void registerExceptionTranslatorImpl(const IExceptionTranslator *et);
        -: 1982:
        -: 1983:        // ContextScope base class used to allow implementing methods of ContextScope
        -: 1984:        // that don't depend on the template parameter in doctest.cpp.
        -: 1985:        struct DOCTEST_INTERFACE ContextScopeBase : public IContextScope {
        -: 1986:            ContextScopeBase(const ContextScopeBase &) = delete;
        -: 1987:
        -: 1988:            ContextScopeBase &operator=(const ContextScopeBase &) = delete;
        -: 1989:
        -: 1990:            ContextScopeBase &operator=(ContextScopeBase &&) = delete;
        -: 1991:
function _ZN7doctest6detail16ContextScopeBaseD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail16ContextScopeBaseD0Ev called 0 returned 0% blocks executed 0%
    #####: 1992:            ~ContextScopeBase() override = default;
    $$$$$: 1992-block  0
    $$$$$: 1992-block  1
        -: 1993:
        -: 1994:        protected:
        -: 1995:            ContextScopeBase();
        -: 1996:
        -: 1997:            ContextScopeBase(ContextScopeBase &&other) noexcept;
        -: 1998:
        -: 1999:            void destroy();
        -: 2000:
    #####: 2001:            bool need_to_destroy{true};
        -: 2002:        };
        -: 2003:
        -: 2004:        template<typename L>
        -: 2005:        class ContextScope : public ContextScopeBase {
        -: 2006:            L lambda_;
        -: 2007:
        -: 2008:        public:
        -: 2009:            explicit ContextScope(const L &lambda) : lambda_(lambda) {}
        -: 2010:
        -: 2011:            explicit ContextScope(L &&lambda) : lambda_(static_cast<L &&>(lambda)) {}
        -: 2012:
        -: 2013:            ContextScope(const ContextScope &) = delete;
        -: 2014:
        -: 2015:            ContextScope(ContextScope &&) noexcept = default;
        -: 2016:
        -: 2017:            ContextScope &operator=(const ContextScope &) = delete;
        -: 2018:
        -: 2019:            ContextScope &operator=(ContextScope &&) = delete;
        -: 2020:
        -: 2021:            void stringify(std::ostream *s) const override { lambda_(s); }
        -: 2022:
        -: 2023:            ~ContextScope() override {
        -: 2024:                if (need_to_destroy) {
        -: 2025:                    destroy();
        -: 2026:                }
        -: 2027:            }
        -: 2028:        };
        -: 2029:
        -: 2030:        struct DOCTEST_INTERFACE MessageBuilder : public MessageData {
        -: 2031:            std::ostream *m_stream;
    #####: 2032:            bool logged = false;
        -: 2033:
        -: 2034:            MessageBuilder(const char *file, int line, assertType::Enum severity);
        -: 2035:
        -: 2036:            MessageBuilder(const MessageBuilder &) = delete;
        -: 2037:
        -: 2038:            MessageBuilder(MessageBuilder &&) = delete;
        -: 2039:
        -: 2040:            MessageBuilder &operator=(const MessageBuilder &) = delete;
        -: 2041:
        -: 2042:            MessageBuilder &operator=(MessageBuilder &&) = delete;
        -: 2043:
        -: 2044:            ~MessageBuilder();
        -: 2045:
        -: 2046:            // the preferred way of chaining parameters for stringification
        -: 2047:            DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)
        -: 2048:
        -: 2049:            template<typename T>
        -: 2050:            MessageBuilder &operator,(const T &in) {
        -: 2051:                *m_stream << (DOCTEST_STRINGIFY(in));
        -: 2052:                return *this;
        -: 2053:            }
        -: 2054:
        -: 2055:            DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 2056:
        -: 2057:            // kept here just for backwards-compatibility - the comma operator should be preferred now
        -: 2058:            template<typename T>
        -: 2059:            MessageBuilder &operator<<(const T &in) { return this->operator,(in); }
        -: 2060:
        -: 2061:            // the `,` operator has the lowest operator precedence - if `<<` is used by the user then
        -: 2062:            // the `,` operator will be called last which is not what we want and thus the `*` operator
        -: 2063:            // is used first (has higher operator precedence compared to `<<`) so that we guarantee that
        -: 2064:            // an operator of the MessageBuilder class is called first before the rest of the parameters
        -: 2065:            template<typename T>
        -: 2066:            MessageBuilder &operator*(const T &in) { return this->operator,(in); }
        -: 2067:
        -: 2068:            bool log();
        -: 2069:
        -: 2070:            void react();
        -: 2071:        };
        -: 2072:
        -: 2073:        template<typename L>
        -: 2074:        ContextScope<L> MakeContextScope(const L &lambda) {
        -: 2075:            return ContextScope<L>(lambda);
        -: 2076:        }
        -: 2077:    } // namespace detail
        -: 2078:
        -: 2079:#define DOCTEST_DEFINE_DECORATOR(name, type, def)                                                  \
        -: 2080:    struct name                                                                                    \
        -: 2081:    {                                                                                              \
        -: 2082:        type data;                                                                                 \
        -: 2083:        name(type in = def)                                                                        \
        -: 2084:                : data(in) {}                                                                      \
        -: 2085:        void fill(detail::TestCase& state) const { state.DOCTEST_CAT(m_, name) = data; }           \
        -: 2086:        void fill(detail::TestSuite& state) const { state.DOCTEST_CAT(m_, name) = data; }          \
        -: 2087:    }
        -: 2088:
        -: 2089:    DOCTEST_DEFINE_DECORATOR(test_suite, const char*, "");
        -: 2090:
        -: 2091:    DOCTEST_DEFINE_DECORATOR(description, const char*, "");
        -: 2092:
        -: 2093:    DOCTEST_DEFINE_DECORATOR(skip, bool, true);
        -: 2094:
        -: 2095:    DOCTEST_DEFINE_DECORATOR(no_breaks, bool, true);
        -: 2096:
        -: 2097:    DOCTEST_DEFINE_DECORATOR(no_output, bool, true);
        -: 2098:
        -: 2099:    DOCTEST_DEFINE_DECORATOR(timeout, double, 0);
        -: 2100:
        -: 2101:    DOCTEST_DEFINE_DECORATOR(may_fail, bool, true);
        -: 2102:
        -: 2103:    DOCTEST_DEFINE_DECORATOR(should_fail, bool, true);
        -: 2104:
        -: 2105:    DOCTEST_DEFINE_DECORATOR(expected_failures, int, 0);
        -: 2106:
        -: 2107:    template<typename T>
        -: 2108:    int registerExceptionTranslator(String (*translateFunction)(T)) {
        -: 2109:        DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wexit-time-destructors")
        -: 2110:        static detail::ExceptionTranslator<T> exceptionTranslator(translateFunction);
        -: 2111:        DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 2112:        detail::registerExceptionTranslatorImpl(&exceptionTranslator);
        -: 2113:        return 0;
        -: 2114:    }
        -: 2115:
        -: 2116:} // namespace doctest
        -: 2117:
        -: 2118:// in a separate namespace outside of doctest because the DOCTEST_TEST_SUITE macro
        -: 2119:// introduces an anonymous namespace in which getCurrentTestSuite gets overridden
        -: 2120:namespace doctest_detail_test_suite_ns {
        -: 2121:    DOCTEST_INTERFACE doctest::detail::TestSuite &getCurrentTestSuite();
        -: 2122:} // namespace doctest_detail_test_suite_ns
        -: 2123:
        -: 2124:namespace doctest {
        -: 2125:#else  // DOCTEST_CONFIG_DISABLE
        -: 2126:                                                                                                                            template <typename T>
        -: 2127:int registerExceptionTranslator(String (*)(T)) {
        -: 2128:    return 0;
        -: 2129:}
        -: 2130:#endif // DOCTEST_CONFIG_DISABLE
        -: 2131:
        -: 2132:    namespace detail {
        -: 2133:        using assert_handler = void (*)(const AssertData &);
        -: 2134:        struct ContextState;
        -: 2135:    } // namespace detail
        -: 2136:
        -: 2137:    class DOCTEST_INTERFACE Context {
        -: 2138:        detail::ContextState *p;
        -: 2139:
        -: 2140:        void parseArgs(int argc, const char *const *argv, bool withDefaults = false);
        -: 2141:
        -: 2142:    public:
        -: 2143:        explicit Context(int argc = 0, const char *const *argv = nullptr);
        -: 2144:
        -: 2145:        Context(const Context &) = delete;
        -: 2146:
        -: 2147:        Context(Context &&) = delete;
        -: 2148:
        -: 2149:        Context &operator=(const Context &) = delete;
        -: 2150:
        -: 2151:        Context &operator=(Context &&) = delete;
        -: 2152:
        -: 2153:        ~Context(); // NOLINT(performance-trivially-destructible)
        -: 2154:
        -: 2155:        void applyCommandLine(int argc, const char *const *argv);
        -: 2156:
        -: 2157:        void addFilter(const char *filter, const char *value);
        -: 2158:
        -: 2159:        void clearFilters();
        -: 2160:
        -: 2161:        void setOption(const char *option, bool value);
        -: 2162:
        -: 2163:        void setOption(const char *option, int value);
        -: 2164:
        -: 2165:        void setOption(const char *option, const char *value);
        -: 2166:
        -: 2167:        bool shouldExit();
        -: 2168:
        -: 2169:        void setAsDefaultForAssertsOutOfTestCases();
        -: 2170:
        -: 2171:        void setAssertHandler(detail::assert_handler ah);
        -: 2172:
        -: 2173:        void setCout(std::ostream *out);
        -: 2174:
        -: 2175:        int run();
        -: 2176:    };
        -: 2177:
        -: 2178:    namespace TestCaseFailureReason {
        -: 2179:        enum Enum {
        -: 2180:            None = 0,
        -: 2181:            AssertFailure = 1,   // an assertion has failed in the test case
        -: 2182:            Exception = 2,   // test case threw an exception
        -: 2183:            Crash = 4,   // a crash...
        -: 2184:            TooManyFailedAsserts = 8,   // the abort-after option
        -: 2185:            Timeout = 16,  // see the timeout decorator
        -: 2186:            ShouldHaveFailedButDidnt = 32,  // see the should_fail decorator
        -: 2187:            ShouldHaveFailedAndDid = 64,  // see the should_fail decorator
        -: 2188:            DidntFailExactlyNumTimes = 128, // see the expected_failures decorator
        -: 2189:            FailedExactlyNumTimes = 256, // see the expected_failures decorator
        -: 2190:            CouldHaveFailedAndDid = 512  // see the may_fail decorator
        -: 2191:        };
        -: 2192:    } // namespace TestCaseFailureReason
        -: 2193:
        -: 2194:    struct DOCTEST_INTERFACE CurrentTestCaseStats {
        -: 2195:        int numAssertsCurrentTest;
        -: 2196:        int numAssertsFailedCurrentTest;
        -: 2197:        double seconds;
        -: 2198:        int failure_flags; // use TestCaseFailureReason::Enum
        -: 2199:        bool testCaseSuccess;
        -: 2200:    };
        -: 2201:
function _ZN7doctest17TestCaseExceptionD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest17TestCaseExceptionD2Ev called 0 returned 0% blocks executed 0%
        -: 2202:    struct DOCTEST_INTERFACE TestCaseException {
        -: 2203:        String error_string;
        -: 2204:        bool is_crash;
        -: 2205:    };
        -: 2206:
        -: 2207:    struct DOCTEST_INTERFACE TestRunStats {
        -: 2208:        unsigned numTestCases;
        -: 2209:        unsigned numTestCasesPassingFilters;
        -: 2210:        unsigned numTestSuitesPassingFilters;
        -: 2211:        unsigned numTestCasesFailed;
        -: 2212:        int numAsserts;
        -: 2213:        int numAssertsFailed;
        -: 2214:    };
        -: 2215:
function _ZN7doctest9QueryDataC1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest9QueryDataC2Ev called 0 returned 0% blocks executed 0%
    #####: 2216:    struct QueryData {
    $$$$$: 2216-block  0
    #####: 2217:        const TestRunStats *run_stats = nullptr;
    #####: 2218:        const TestCaseData **data = nullptr;
    #####: 2219:        unsigned num_data = 0;
        -: 2220:    };
        -: 2221:
        -: 2222:    struct DOCTEST_INTERFACE IReporter {
        -: 2223:        // The constructor has to accept "const ContextOptions&" as a single argument
        -: 2224:        // which has most of the options for the run + a pointer to the stdout stream
        -: 2225:        // Reporter(const ContextOptions& in)
        -: 2226:
        -: 2227:        // called when a query should be reported (listing test cases, printing the version, etc.)
        -: 2228:        virtual void report_query(const QueryData &) = 0;
        -: 2229:
        -: 2230:        // called when the whole test run starts
        -: 2231:        virtual void test_run_start() = 0;
        -: 2232:
        -: 2233:        // called when the whole test run ends (caching a pointer to the input doesn't make sense here)
        -: 2234:        virtual void test_run_end(const TestRunStats &) = 0;
        -: 2235:
        -: 2236:        // called when a test case is started (safe to cache a pointer to the input)
        -: 2237:        virtual void test_case_start(const TestCaseData &) = 0;
        -: 2238:
        -: 2239:        // called when a test case is reentered because of unfinished subcases (safe to cache a pointer to the input)
        -: 2240:        virtual void test_case_reenter(const TestCaseData &) = 0;
        -: 2241:
        -: 2242:        // called when a test case has ended
        -: 2243:        virtual void test_case_end(const CurrentTestCaseStats &) = 0;
        -: 2244:
        -: 2245:        // called when an exception is thrown from the test case (or it crashes)
        -: 2246:        virtual void test_case_exception(const TestCaseException &) = 0;
        -: 2247:
        -: 2248:        // called whenever a subcase is entered (don't cache pointers to the input)
        -: 2249:        virtual void subcase_start(const SubcaseSignature &) = 0;
        -: 2250:
        -: 2251:        // called whenever a subcase is exited (don't cache pointers to the input)
        -: 2252:        virtual void subcase_end() = 0;
        -: 2253:
        -: 2254:        // called for each assert (don't cache pointers to the input)
        -: 2255:        virtual void log_assert(const AssertData &) = 0;
        -: 2256:
        -: 2257:        // called for each message (don't cache pointers to the input)
        -: 2258:        virtual void log_message(const MessageData &) = 0;
        -: 2259:
        -: 2260:        // called when a test case is skipped either because it doesn't pass the filters, has a skip decorator
        -: 2261:        // or isn't in the execution range (between first and last) (safe to cache a pointer to the input)
        -: 2262:        virtual void test_case_skipped(const TestCaseData &) = 0;
        -: 2263:
function _ZN7doctest9IReporterC2Ev called 1 returned 100% blocks executed 100%
        1: 2264:        DOCTEST_DECLARE_INTERFACE(IReporter)
        1: 2264-block  0
        -: 2265:
        -: 2266:        // can obtain all currently active contexts and stringify them if one wishes to do so
        -: 2267:        static int get_num_active_contexts();
        -: 2268:
        -: 2269:        static const IContextScope *const *get_active_contexts();
        -: 2270:
        -: 2271:        // can iterate through contexts which have been stringified automatically in their destructors when an exception has been thrown
        -: 2272:        static int get_num_stringified_contexts();
        -: 2273:
        -: 2274:        static const String *get_stringified_contexts();
        -: 2275:    };
        -: 2276:
        -: 2277:    namespace detail {
        -: 2278:        using reporterCreatorFunc = IReporter *(*)(const ContextOptions &);
        -: 2279:
        -: 2280:        DOCTEST_INTERFACE void registerReporterImpl(const char *name, int prio, reporterCreatorFunc c, bool isReporter);
        -: 2281:
        -: 2282:        template<typename Reporter>
function _ZN7doctest6detail15reporterCreatorINS_12_GLOBAL__N_111XmlReporterEEEPNS_9IReporterERKNS_14ContextOptionsE called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail15reporterCreatorINS_12_GLOBAL__N_113JUnitReporterEEEPNS_9IReporterERKNS_14ContextOptionsE called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail15reporterCreatorINS_12_GLOBAL__N_115ConsoleReporterEEEPNS_9IReporterERKNS_14ContextOptionsE called 1 returned 100% blocks executed 50%
        1: 2283:        IReporter *reporterCreator(const ContextOptions &o) {
        1: 2284:            return new Reporter(o);
    $$$$$: 2284-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 2284-block  1
    $$$$$: 2284-block  2
    $$$$$: 2284-block  3
    $$$$$: 2284-block  4
branch  2 never executed
branch  3 never executed
    $$$$$: 2284-block  5
    $$$$$: 2284-block  6
    $$$$$: 2284-block  7
        1: 2284-block  8
branch  4 taken 1
branch  5 taken 0
        1: 2284-block  9
    $$$$$: 2284-block 10
    $$$$$: 2284-block 11
    #####: 2285:        }
        -: 2286:    } // namespace detail
        -: 2287:
        -: 2288:    template<typename Reporter>
function _ZN7doctest16registerReporterINS_12_GLOBAL__N_111XmlReporterEEEiPKcib called 1 returned 100% blocks executed 100%
function _ZN7doctest16registerReporterINS_12_GLOBAL__N_113JUnitReporterEEEiPKcib called 1 returned 100% blocks executed 100%
function _ZN7doctest16registerReporterINS_12_GLOBAL__N_115ConsoleReporterEEEiPKcib called 1 returned 100% blocks executed 100%
        3: 2289:    int registerReporter(const char *name, int priority, bool isReporter) {
        3: 2290:        detail::registerReporterImpl(name, priority, detail::reporterCreator<Reporter>, isReporter);
        3: 2291:        return 0;
        1: 2291-block  0
        1: 2291-block  1
        1: 2291-block  2
        -: 2292:    }
        -: 2293:} // namespace doctest
        -: 2294:
        -: 2295:#ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES
        -: 2296:#define DOCTEST_FUNC_EMPTY [] { return false; }()
        -: 2297:#else
        -: 2298:#define DOCTEST_FUNC_EMPTY (void)0
        -: 2299:#endif
        -: 2300:
        -: 2301:// if registering is not disabled
        -: 2302:#ifndef DOCTEST_CONFIG_DISABLE
        -: 2303:
        -: 2304:#ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES
        -: 2305:                                                                                                                        #define DOCTEST_FUNC_SCOPE_BEGIN [&]
        -: 2306:#define DOCTEST_FUNC_SCOPE_END ()
        -: 2307:#define DOCTEST_FUNC_SCOPE_RET(v) return v
        -: 2308:#else
        -: 2309:#define DOCTEST_FUNC_SCOPE_BEGIN do
        -: 2310:#define DOCTEST_FUNC_SCOPE_END while(false)
        -: 2311:#define DOCTEST_FUNC_SCOPE_RET(v) (void)0
        -: 2312:#endif
        -: 2313:
        -: 2314:// common code in asserts - for convenience
        -: 2315:#define DOCTEST_ASSERT_LOG_REACT_RETURN(b)                                                         \
        -: 2316:    if(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \
        -: 2317:    b.react();                                                                                     \
        -: 2318:    DOCTEST_FUNC_SCOPE_RET(!b.m_failed)
        -: 2319:
        -: 2320:#ifdef DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS
        -: 2321:#define DOCTEST_WRAP_IN_TRY(x) x;
        -: 2322:#else // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS
        -: 2323:#define DOCTEST_WRAP_IN_TRY(x)                                                                     \
        -: 2324:    try {                                                                                          \
        -: 2325:        x;                                                                                         \
        -: 2326:    } catch(...) { DOCTEST_RB.translateException(); }
        -: 2327:#endif // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS
        -: 2328:
        -: 2329:#ifdef DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS
        -: 2330:                                                                                                                        #define DOCTEST_CAST_TO_VOID(...)                                                                  \
        -: 2331:    DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                       \
        -: 2332:    static_cast<void>(__VA_ARGS__);                                                                \
        -: 2333:    DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 2334:#else // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS
        -: 2335:#define DOCTEST_CAST_TO_VOID(...) __VA_ARGS__;
        -: 2336:#endif // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS
        -: 2337:
        -: 2338:// registers the test by initializing a dummy var with a function
        -: 2339:#define DOCTEST_REGISTER_FUNCTION(global_prefix, f, decorators)                                    \
        -: 2340:    global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), /* NOLINT */    \
        -: 2341:            doctest::detail::regTest(                                                              \
        -: 2342:                    doctest::detail::TestCase(                                                     \
        -: 2343:                            f, __FILE__, __LINE__,                                                 \
        -: 2344:                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \
        -: 2345:                    decorators))
        -: 2346:
        -: 2347:#define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, decorators)                                     \
        -: 2348:    namespace { /* NOLINT */                                                                       \
        -: 2349:        struct der : public base                                                                   \
        -: 2350:        {                                                                                          \
        -: 2351:            void f();                                                                              \
        -: 2352:        };                                                                                         \
        -: 2353:        static DOCTEST_INLINE_NOINLINE void func() {                                               \
        -: 2354:            der v;                                                                                 \
        -: 2355:            v.f();                                                                                 \
        -: 2356:        }                                                                                          \
        -: 2357:        DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \
        -: 2358:    }                                                                                              \
        -: 2359:    DOCTEST_INLINE_NOINLINE void der::f() // NOLINT(misc-definitions-in-headers)
        -: 2360:
        -: 2361:#define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, decorators)                                        \
        -: 2362:    static void f();                                                                               \
        -: 2363:    DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \
        -: 2364:    static void f()
        -: 2365:
        -: 2366:#define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f, proxy, decorators)                        \
        -: 2367:    static doctest::detail::funcType proxy() { return f; }                                         \
        -: 2368:    DOCTEST_REGISTER_FUNCTION(inline, proxy(), decorators)                                         \
        -: 2369:    static void f()
        -: 2370:
        -: 2371:// for registering tests
        -: 2372:#define DOCTEST_TEST_CASE(decorators)                                                              \
        -: 2373:    DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)
        -: 2374:
        -: 2375:// for registering tests in classes - requires C++17 for inline variables!
        -: 2376:#if DOCTEST_CPLUSPLUS >= 201703L
        -: 2377:#define DOCTEST_TEST_CASE_CLASS(decorators)                                                        \
        -: 2378:    DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),           \
        -: 2379:                                                  DOCTEST_ANONYMOUS(DOCTEST_ANON_PROXY_),          \
        -: 2380:                                                  decorators)
        -: 2381:#else // DOCTEST_TEST_CASE_CLASS
        -: 2382:                                                                                                                        #define DOCTEST_TEST_CASE_CLASS(...)                                                               \
        -: 2383:    TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER
        -: 2384:#endif // DOCTEST_TEST_CASE_CLASS
        -: 2385:
        -: 2386:// for registering tests with a fixture
        -: 2387:#define DOCTEST_TEST_CASE_FIXTURE(c, decorators)                                                   \
        -: 2388:    DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \
        -: 2389:                              DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)
        -: 2390:
        -: 2391:// for converting types to strings without the <typeinfo> header and demangling
        -: 2392:#define DOCTEST_TYPE_TO_STRING_AS(str, ...)                                                        \
        -: 2393:    namespace doctest {                                                                            \
        -: 2394:        template <>                                                                                \
        -: 2395:        inline String toString<__VA_ARGS__>() {                                                    \
        -: 2396:            return str;                                                                            \
        -: 2397:        }                                                                                          \
        -: 2398:    }                                                                                              \
        -: 2399:    static_assert(true, "")
        -: 2400:
        -: 2401:#define DOCTEST_TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING_AS(#__VA_ARGS__, __VA_ARGS__)
        -: 2402:
        -: 2403:#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, iter, func)                                 \
        -: 2404:    template <typename T>                                                                          \
        -: 2405:    static void func();                                                                            \
        -: 2406:    namespace { /* NOLINT */                                                                       \
        -: 2407:        template <typename Tuple>                                                                  \
        -: 2408:        struct iter;                                                                               \
        -: 2409:        template <typename Type, typename... Rest>                                                 \
        -: 2410:        struct iter<std::tuple<Type, Rest...>>                                                     \
        -: 2411:        {                                                                                          \
        -: 2412:            iter(const char* file, unsigned line, int index) {                                     \
        -: 2413:                doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \
        -: 2414:                                            doctest_detail_test_suite_ns::getCurrentTestSuite(),   \
        -: 2415:                                            doctest::toString<Type>(),                             \
        -: 2416:                                            int(line) * 1000 + index)                              \
        -: 2417:                                         * dec);                                                   \
        -: 2418:                iter<std::tuple<Rest...>>(file, line, index + 1);                                  \
        -: 2419:            }                                                                                      \
        -: 2420:        };                                                                                         \
        -: 2421:        template <>                                                                                \
        -: 2422:        struct iter<std::tuple<>>                                                                  \
        -: 2423:        {                                                                                          \
        -: 2424:            iter(const char*, unsigned, int) {}                                                    \
        -: 2425:        };                                                                                         \
        -: 2426:    }                                                                                              \
        -: 2427:    template <typename T>                                                                          \
        -: 2428:    static void func()
        -: 2429:
        -: 2430:#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec, T, id)                                              \
        -: 2431:    DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(id, ITERATOR),                      \
        -: 2432:                                           DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))
        -: 2433:
        -: 2434:#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, anon, ...)                                 \
        -: 2435:    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */ \
        -: 2436:        doctest::detail::instantiationHelper(                                                      \
        -: 2437:            DOCTEST_CAT(id, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))
        -: 2438:
        -: 2439:#define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...)                                                 \
        -: 2440:    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \
        -: 2441:    static_assert(true, "")
        -: 2442:
        -: 2443:#define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...)                                                  \
        -: 2444:    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \
        -: 2445:    static_assert(true, "")
        -: 2446:
        -: 2447:#define DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, anon, ...)                                         \
        -: 2448:    DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \
        -: 2449:    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \
        -: 2450:    template <typename T>                                                                          \
        -: 2451:    static void anon()
        -: 2452:
        -: 2453:#define DOCTEST_TEST_CASE_TEMPLATE(dec, T, ...)                                                    \
        -: 2454:    DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__)
        -: 2455:
        -: 2456:// for subcases
        -: 2457:#define DOCTEST_SUBCASE(name)                                                                      \
        -: 2458:    if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \
        -: 2459:               doctest::detail::Subcase(name, __FILE__, __LINE__))
        -: 2460:
        -: 2461:// for grouping tests in test suites by using code blocks
        -: 2462:#define DOCTEST_TEST_SUITE_IMPL(decorators, ns_name)                                               \
        -: 2463:    namespace ns_name { namespace doctest_detail_test_suite_ns {                                   \
        -: 2464:            static DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept {   \
        -: 2465:                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \
        -: 2466:                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wexit-time-destructors")                \
        -: 2467:                DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wmissing-field-initializers")             \
        -: 2468:                static doctest::detail::TestSuite data{};                                          \
        -: 2469:                static bool                       inited = false;                                  \
        -: 2470:                DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \
        -: 2471:                DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \
        -: 2472:                DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \
        -: 2473:                if(!inited) {                                                                      \
        -: 2474:                    data* decorators;                                                              \
        -: 2475:                    inited = true;                                                                 \
        -: 2476:                }                                                                                  \
        -: 2477:                return data;                                                                       \
        -: 2478:            }                                                                                      \
        -: 2479:        }                                                                                          \
        -: 2480:    }                                                                                              \
        -: 2481:    namespace ns_name
        -: 2482:
        -: 2483:#define DOCTEST_TEST_SUITE(decorators)                                                             \
        -: 2484:    DOCTEST_TEST_SUITE_IMPL(decorators, DOCTEST_ANONYMOUS(DOCTEST_ANON_SUITE_))
        -: 2485:
        -: 2486:// for starting a testsuite block
        -: 2487:#define DOCTEST_TEST_SUITE_BEGIN(decorators)                                                       \
        -: 2488:    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), /* NOLINT(cert-err58-cpp) */  \
        -: 2489:            doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \
        -: 2490:    static_assert(true, "")
        -: 2491:
        -: 2492:// for ending a testsuite block
        -: 2493:#define DOCTEST_TEST_SUITE_END                                                                     \
        -: 2494:    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), /* NOLINT(cert-err58-cpp) */  \
        -: 2495:            doctest::detail::setTestSuite(doctest::detail::TestSuite() * ""))                      \
        -: 2496:    using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int
        -: 2497:
        -: 2498:// for registering exception translators
        -: 2499:#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName, signature)                      \
        -: 2500:    inline doctest::String translatorName(signature);                                              \
        -: 2501:    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), /* NOLINT(cert-err58-cpp) */ \
        -: 2502:            doctest::registerExceptionTranslator(translatorName))                                  \
        -: 2503:    doctest::String translatorName(signature)
        -: 2504:
        -: 2505:#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \
        -: 2506:    DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \
        -: 2507:                                               signature)
        -: 2508:
        -: 2509:// for registering reporters
        -: 2510:#define DOCTEST_REGISTER_REPORTER(name, priority, reporter)                                        \
        -: 2511:    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), /* NOLINT(cert-err58-cpp) */ \
        -: 2512:            doctest::registerReporter<reporter>(name, priority, true))                             \
        -: 2513:    static_assert(true, "")
        -: 2514:
        -: 2515:// for registering listeners
        -: 2516:#define DOCTEST_REGISTER_LISTENER(name, priority, reporter)                                        \
        -: 2517:    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), /* NOLINT(cert-err58-cpp) */ \
        -: 2518:            doctest::registerReporter<reporter>(name, priority, false))                            \
        -: 2519:    static_assert(true, "")
        -: 2520:
        -: 2521:// clang-format off
        -: 2522:// for logging - disabling formatting because it's important to have these on 2 separate lines - see PR #557
        -: 2523:#define DOCTEST_INFO(...)                                                                          \
        -: 2524:    DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \
        -: 2525:                      DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \
        -: 2526:                      __VA_ARGS__)
        -: 2527:// clang-format on
        -: 2528:
        -: 2529:#define DOCTEST_INFO_IMPL(mb_name, s_name, ...)                                       \
        -: 2530:    auto DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \
        -: 2531:        [&](std::ostream* s_name) {                                                                \
        -: 2532:        doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \
        -: 2533:        mb_name.m_stream = s_name;                                                                 \
        -: 2534:        mb_name * __VA_ARGS__;                                                                     \
        -: 2535:    })
        -: 2536:
        -: 2537:#define DOCTEST_CAPTURE(x) DOCTEST_INFO(#x " := ", x)
        -: 2538:
        -: 2539:#define DOCTEST_ADD_AT_IMPL(type, file, line, mb, ...)                                             \
        -: 2540:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2541:        doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \
        -: 2542:        mb * __VA_ARGS__;                                                                          \
        -: 2543:        if(mb.log())                                                                               \
        -: 2544:            DOCTEST_BREAK_INTO_DEBUGGER();                                                         \
        -: 2545:        mb.react();                                                                                \
        -: 2546:    } DOCTEST_FUNC_SCOPE_END
        -: 2547:
        -: 2548:// clang-format off
        -: 2549:#define DOCTEST_ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_warn, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)
        -: 2550:#define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_check, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)
        -: 2551:#define DOCTEST_ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_require, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)
        -: 2552:// clang-format on
        -: 2553:
        -: 2554:#define DOCTEST_MESSAGE(...) DOCTEST_ADD_MESSAGE_AT(__FILE__, __LINE__, __VA_ARGS__)
        -: 2555:#define DOCTEST_FAIL_CHECK(...) DOCTEST_ADD_FAIL_CHECK_AT(__FILE__, __LINE__, __VA_ARGS__)
        -: 2556:#define DOCTEST_FAIL(...) DOCTEST_ADD_FAIL_AT(__FILE__, __LINE__, __VA_ARGS__)
        -: 2557:
        -: 2558:#define DOCTEST_TO_LVALUE(...) __VA_ARGS__ // Not removed to keep backwards compatibility.
        -: 2559:
        -: 2560:#ifndef DOCTEST_CONFIG_SUPER_FAST_ASSERTS
        -: 2561:
        -: 2562:#define DOCTEST_ASSERT_IMPLEMENT_2(assert_type, ...)                                               \
        -: 2563:    DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \
        -: 2564:    /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */                                  \
        -: 2565:    doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \
        -: 2566:                                               __LINE__, #__VA_ARGS__);                            \
        -: 2567:    DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \
        -: 2568:            doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \
        -: 2569:            << __VA_ARGS__)) /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */         \
        -: 2570:    DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \
        -: 2571:    DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 2572:
        -: 2573:#define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \
        -: 2574:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2575:        DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \
        -: 2576:    } DOCTEST_FUNC_SCOPE_END // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)
        -: 2577:
        -: 2578:#define DOCTEST_BINARY_ASSERT(assert_type, comp, ...)                                              \
        -: 2579:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2580:        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \
        -: 2581:                                                   __LINE__, #__VA_ARGS__);                        \
        -: 2582:        DOCTEST_WRAP_IN_TRY(                                                                       \
        -: 2583:                DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \
        -: 2584:                        __VA_ARGS__))                                                              \
        -: 2585:        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \
        -: 2586:    } DOCTEST_FUNC_SCOPE_END
        -: 2587:
        -: 2588:#define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \
        -: 2589:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2590:        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \
        -: 2591:                                                   __LINE__, #__VA_ARGS__);                        \
        -: 2592:        DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \
        -: 2593:        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \
        -: 2594:    } DOCTEST_FUNC_SCOPE_END
        -: 2595:
        -: 2596:#else // DOCTEST_CONFIG_SUPER_FAST_ASSERTS
        -: 2597:
        -: 2598:                                                                                                                        // necessary for <ASSERT>_MESSAGE
        -: 2599:#define DOCTEST_ASSERT_IMPLEMENT_2 DOCTEST_ASSERT_IMPLEMENT_1
        -: 2600:
        -: 2601:#define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \
        -: 2602:    DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \
        -: 2603:    doctest::detail::decomp_assert(                                                                \
        -: 2604:            doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__,                    \
        -: 2605:            doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \
        -: 2606:                    << __VA_ARGS__) DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 2607:
        -: 2608:#define DOCTEST_BINARY_ASSERT(assert_type, comparison, ...)                                        \
        -: 2609:    doctest::detail::binary_assert<doctest::detail::binaryAssertComparison::comparison>(           \
        -: 2610:            doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__, __VA_ARGS__)
        -: 2611:
        -: 2612:#define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \
        -: 2613:    doctest::detail::unary_assert(doctest::assertType::assert_type, __FILE__, __LINE__,            \
        -: 2614:                                  #__VA_ARGS__, __VA_ARGS__)
        -: 2615:
        -: 2616:#endif // DOCTEST_CONFIG_SUPER_FAST_ASSERTS
        -: 2617:
        -: 2618:#define DOCTEST_WARN(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN, __VA_ARGS__)
        -: 2619:#define DOCTEST_CHECK(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK, __VA_ARGS__)
        -: 2620:#define DOCTEST_REQUIRE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE, __VA_ARGS__)
        -: 2621:#define DOCTEST_WARN_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE, __VA_ARGS__)
        -: 2622:#define DOCTEST_CHECK_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE, __VA_ARGS__)
        -: 2623:#define DOCTEST_REQUIRE_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE, __VA_ARGS__)
        -: 2624:
        -: 2625:// clang-format off
        -: 2626:#define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN, cond); } DOCTEST_FUNC_SCOPE_END
        -: 2627:#define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK, cond); } DOCTEST_FUNC_SCOPE_END
        -: 2628:#define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE, cond); } DOCTEST_FUNC_SCOPE_END
        -: 2629:#define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE, cond); } DOCTEST_FUNC_SCOPE_END
        -: 2630:#define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE, cond); } DOCTEST_FUNC_SCOPE_END
        -: 2631:#define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE, cond); } DOCTEST_FUNC_SCOPE_END
        -: 2632:// clang-format on
        -: 2633:
        -: 2634:#define DOCTEST_WARN_EQ(...) DOCTEST_BINARY_ASSERT(DT_WARN_EQ, eq, __VA_ARGS__)
        -: 2635:#define DOCTEST_CHECK_EQ(...) DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)
        -: 2636:#define DOCTEST_REQUIRE_EQ(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ, eq, __VA_ARGS__)
        -: 2637:#define DOCTEST_WARN_NE(...) DOCTEST_BINARY_ASSERT(DT_WARN_NE, ne, __VA_ARGS__)
        -: 2638:#define DOCTEST_CHECK_NE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_NE, ne, __VA_ARGS__)
        -: 2639:#define DOCTEST_REQUIRE_NE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE, ne, __VA_ARGS__)
        -: 2640:#define DOCTEST_WARN_GT(...) DOCTEST_BINARY_ASSERT(DT_WARN_GT, gt, __VA_ARGS__)
        -: 2641:#define DOCTEST_CHECK_GT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GT, gt, __VA_ARGS__)
        -: 2642:#define DOCTEST_REQUIRE_GT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT, gt, __VA_ARGS__)
        -: 2643:#define DOCTEST_WARN_LT(...) DOCTEST_BINARY_ASSERT(DT_WARN_LT, lt, __VA_ARGS__)
        -: 2644:#define DOCTEST_CHECK_LT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LT, lt, __VA_ARGS__)
        -: 2645:#define DOCTEST_REQUIRE_LT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT, lt, __VA_ARGS__)
        -: 2646:#define DOCTEST_WARN_GE(...) DOCTEST_BINARY_ASSERT(DT_WARN_GE, ge, __VA_ARGS__)
        -: 2647:#define DOCTEST_CHECK_GE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GE, ge, __VA_ARGS__)
        -: 2648:#define DOCTEST_REQUIRE_GE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE, ge, __VA_ARGS__)
        -: 2649:#define DOCTEST_WARN_LE(...) DOCTEST_BINARY_ASSERT(DT_WARN_LE, le, __VA_ARGS__)
        -: 2650:#define DOCTEST_CHECK_LE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LE, le, __VA_ARGS__)
        -: 2651:#define DOCTEST_REQUIRE_LE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE, le, __VA_ARGS__)
        -: 2652:
        -: 2653:#define DOCTEST_WARN_UNARY(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY, __VA_ARGS__)
        -: 2654:#define DOCTEST_CHECK_UNARY(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY, __VA_ARGS__)
        -: 2655:#define DOCTEST_REQUIRE_UNARY(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY, __VA_ARGS__)
        -: 2656:#define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE, __VA_ARGS__)
        -: 2657:#define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE, __VA_ARGS__)
        -: 2658:#define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)
        -: 2659:
        -: 2660:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2661:
        -: 2662:#define DOCTEST_ASSERT_THROWS_AS(expr, assert_type, message, ...)                                  \
        -: 2663:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2664:        if(!doctest::getContextOptions()->no_throw) {                                              \
        -: 2665:            doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \
        -: 2666:                                                       __LINE__, #expr, #__VA_ARGS__, message);    \
        -: 2667:            try {                                                                                  \
        -: 2668:                DOCTEST_CAST_TO_VOID(expr)                                                         \
        -: 2669:            } catch(const typename doctest::detail::types::remove_const<                           \
        -: 2670:                    typename doctest::detail::types::remove_reference<__VA_ARGS__>::type>::type&) {\
        -: 2671:                DOCTEST_RB.translateException();                                                   \
        -: 2672:                DOCTEST_RB.m_threw_as = true;                                                      \
        -: 2673:            } catch(...) { DOCTEST_RB.translateException(); }                                      \
        -: 2674:            DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \
        -: 2675:        } else { /* NOLINT(*-else-after-return) */                                                 \
        -: 2676:            DOCTEST_FUNC_SCOPE_RET(false);                                                         \
        -: 2677:        }                                                                                          \
        -: 2678:    } DOCTEST_FUNC_SCOPE_END
        -: 2679:
        -: 2680:#define DOCTEST_ASSERT_THROWS_WITH(expr, expr_str, assert_type, ...)                               \
        -: 2681:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2682:        if(!doctest::getContextOptions()->no_throw) {                                              \
        -: 2683:            doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \
        -: 2684:                                                       __LINE__, expr_str, "", __VA_ARGS__);       \
        -: 2685:            try {                                                                                  \
        -: 2686:                DOCTEST_CAST_TO_VOID(expr)                                                         \
        -: 2687:            } catch(...) { DOCTEST_RB.translateException(); }                                      \
        -: 2688:            DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \
        -: 2689:        } else { /* NOLINT(*-else-after-return) */                                                 \
        -: 2690:           DOCTEST_FUNC_SCOPE_RET(false);                                                          \
        -: 2691:        }                                                                                          \
        -: 2692:    } DOCTEST_FUNC_SCOPE_END
        -: 2693:
        -: 2694:#define DOCTEST_ASSERT_NOTHROW(assert_type, ...)                                                   \
        -: 2695:    DOCTEST_FUNC_SCOPE_BEGIN {                                                                     \
        -: 2696:        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \
        -: 2697:                                                   __LINE__, #__VA_ARGS__);                        \
        -: 2698:        try {                                                                                      \
        -: 2699:            DOCTEST_CAST_TO_VOID(__VA_ARGS__)                                                      \
        -: 2700:        } catch(...) { DOCTEST_RB.translateException(); }                                          \
        -: 2701:        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \
        -: 2702:    } DOCTEST_FUNC_SCOPE_END
        -: 2703:
        -: 2704:// clang-format off
        -: 2705:#define DOCTEST_WARN_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, "")
        -: 2706:#define DOCTEST_CHECK_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, "")
        -: 2707:#define DOCTEST_REQUIRE_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, "")
        -: 2708:
        -: 2709:#define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_AS, "", __VA_ARGS__)
        -: 2710:#define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_AS, "", __VA_ARGS__)
        -: 2711:#define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_AS, "", __VA_ARGS__)
        -: 2712:
        -: 2713:#define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)
        -: 2714:#define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)
        -: 2715:#define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)
        -: 2716:
        -: 2717:#define DOCTEST_WARN_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)
        -: 2718:#define DOCTEST_CHECK_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)
        -: 2719:#define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)
        -: 2720:
        -: 2721:#define DOCTEST_WARN_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW, __VA_ARGS__)
        -: 2722:#define DOCTEST_CHECK_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW, __VA_ARGS__)
        -: 2723:#define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW, __VA_ARGS__)
        -: 2724:
        -: 2725:#define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS(expr); } DOCTEST_FUNC_SCOPE_END
        -: 2726:#define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS(expr); } DOCTEST_FUNC_SCOPE_END
        -: 2727:#define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS(expr); } DOCTEST_FUNC_SCOPE_END
        -: 2728:#define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_AS(expr, ex); } DOCTEST_FUNC_SCOPE_END
        -: 2729:#define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_AS(expr, ex); } DOCTEST_FUNC_SCOPE_END
        -: 2730:#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_AS(expr, ex); } DOCTEST_FUNC_SCOPE_END
        -: 2731:#define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH(expr, with); } DOCTEST_FUNC_SCOPE_END
        -: 2732:#define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH(expr, with); } DOCTEST_FUNC_SCOPE_END
        -: 2733:#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH(expr, with); } DOCTEST_FUNC_SCOPE_END
        -: 2734:#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex); } DOCTEST_FUNC_SCOPE_END
        -: 2735:#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex); } DOCTEST_FUNC_SCOPE_END
        -: 2736:#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex); } DOCTEST_FUNC_SCOPE_END
        -: 2737:#define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_NOTHROW(expr); } DOCTEST_FUNC_SCOPE_END
        -: 2738:#define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_NOTHROW(expr); } DOCTEST_FUNC_SCOPE_END
        -: 2739:#define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN { DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_NOTHROW(expr); } DOCTEST_FUNC_SCOPE_END
        -: 2740:// clang-format on
        -: 2741:
        -: 2742:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2743:
        -: 2744:// =================================================================================================
        -: 2745:// == WHAT FOLLOWS IS VERSIONS OF THE MACROS THAT DO NOT DO ANY REGISTERING!                      ==
        -: 2746:// == THIS CAN BE ENABLED BY DEFINING DOCTEST_CONFIG_DISABLE GLOBALLY!                            ==
        -: 2747:// =================================================================================================
        -: 2748:#else // DOCTEST_CONFIG_DISABLE
        -: 2749:
        -: 2750:                                                                                                                        #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, name)                                           \
        -: 2751:    namespace /* NOLINT */ {                                                                       \
        -: 2752:        template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                           \
        -: 2753:        struct der : public base                                                                   \
        -: 2754:        { void f(); };                                                                             \
        -: 2755:    }                                                                                              \
        -: 2756:    template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \
        -: 2757:    inline void der<DOCTEST_UNUSED_TEMPLATE_TYPE>::f()
        -: 2758:
        -: 2759:#define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, name)                                              \
        -: 2760:    template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \
        -: 2761:    static inline void f()
        -: 2762:
        -: 2763:// for registering tests
        -: 2764:#define DOCTEST_TEST_CASE(name)                                                                    \
        -: 2765:    DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)
        -: 2766:
        -: 2767:// for registering tests in classes
        -: 2768:#define DOCTEST_TEST_CASE_CLASS(name)                                                              \
        -: 2769:    DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)
        -: 2770:
        -: 2771:// for registering tests with a fixture
        -: 2772:#define DOCTEST_TEST_CASE_FIXTURE(x, name)                                                         \
        -: 2773:    DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), x,                           \
        -: 2774:                              DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)
        -: 2775:
        -: 2776:// for converting types to strings without the <typeinfo> header and demangling
        -: 2777:#define DOCTEST_TYPE_TO_STRING_AS(str, ...) static_assert(true, "")
        -: 2778:#define DOCTEST_TYPE_TO_STRING(...) static_assert(true, "")
        -: 2779:
        -: 2780:// for typed tests
        -: 2781:#define DOCTEST_TEST_CASE_TEMPLATE(name, type, ...)                                                \
        -: 2782:    template <typename type>                                                                       \
        -: 2783:    inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()
        -: 2784:
        -: 2785:#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, type, id)                                          \
        -: 2786:    template <typename type>                                                                       \
        -: 2787:    inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()
        -: 2788:
        -: 2789:#define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...) static_assert(true, "")
        -: 2790:#define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...) static_assert(true, "")
        -: 2791:
        -: 2792:// for subcases
        -: 2793:#define DOCTEST_SUBCASE(name)
        -: 2794:
        -: 2795:// for a testsuite block
        -: 2796:#define DOCTEST_TEST_SUITE(name) namespace // NOLINT
        -: 2797:
        -: 2798:// for starting a testsuite block
        -: 2799:#define DOCTEST_TEST_SUITE_BEGIN(name) static_assert(true, "")
        -: 2800:
        -: 2801:// for ending a testsuite block
        -: 2802:#define DOCTEST_TEST_SUITE_END using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int
        -: 2803:
        -: 2804:#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \
        -: 2805:    template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \
        -: 2806:    static inline doctest::String DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_)(signature)
        -: 2807:
        -: 2808:#define DOCTEST_REGISTER_REPORTER(name, priority, reporter)
        -: 2809:#define DOCTEST_REGISTER_LISTENER(name, priority, reporter)
        -: 2810:
        -: 2811:#define DOCTEST_INFO(...) (static_cast<void>(0))
        -: 2812:#define DOCTEST_CAPTURE(x) (static_cast<void>(0))
        -: 2813:#define DOCTEST_ADD_MESSAGE_AT(file, line, ...) (static_cast<void>(0))
        -: 2814:#define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) (static_cast<void>(0))
        -: 2815:#define DOCTEST_ADD_FAIL_AT(file, line, ...) (static_cast<void>(0))
        -: 2816:#define DOCTEST_MESSAGE(...) (static_cast<void>(0))
        -: 2817:#define DOCTEST_FAIL_CHECK(...) (static_cast<void>(0))
        -: 2818:#define DOCTEST_FAIL(...) (static_cast<void>(0))
        -: 2819:
        -: 2820:#if defined(DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED)                                    \
        -: 2821: && defined(DOCTEST_CONFIG_ASSERTS_RETURN_VALUES)
        -: 2822:
        -: 2823:#define DOCTEST_WARN(...) [&] { return __VA_ARGS__; }()
        -: 2824:#define DOCTEST_CHECK(...) [&] { return __VA_ARGS__; }()
        -: 2825:#define DOCTEST_REQUIRE(...) [&] { return __VA_ARGS__; }()
        -: 2826:#define DOCTEST_WARN_FALSE(...) [&] { return !(__VA_ARGS__); }()
        -: 2827:#define DOCTEST_CHECK_FALSE(...) [&] { return !(__VA_ARGS__); }()
        -: 2828:#define DOCTEST_REQUIRE_FALSE(...) [&] { return !(__VA_ARGS__); }()
        -: 2829:
        -: 2830:#define DOCTEST_WARN_MESSAGE(cond, ...) [&] { return cond; }()
        -: 2831:#define DOCTEST_CHECK_MESSAGE(cond, ...) [&] { return cond; }()
        -: 2832:#define DOCTEST_REQUIRE_MESSAGE(cond, ...) [&] { return cond; }()
        -: 2833:#define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) [&] { return !(cond); }()
        -: 2834:#define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) [&] { return !(cond); }()
        -: 2835:#define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) [&] { return !(cond); }()
        -: 2836:
        -: 2837:namespace doctest {
        -: 2838:namespace detail {
        -: 2839:#define DOCTEST_RELATIONAL_OP(name, op)                                                            \
        -: 2840:    template <typename L, typename R>                                                              \
        -: 2841:    bool name(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) { return lhs op rhs; }
        -: 2842:
        -: 2843:    DOCTEST_RELATIONAL_OP(eq, ==)
        -: 2844:    DOCTEST_RELATIONAL_OP(ne, !=)
        -: 2845:    DOCTEST_RELATIONAL_OP(lt, <)
        -: 2846:    DOCTEST_RELATIONAL_OP(gt, >)
        -: 2847:    DOCTEST_RELATIONAL_OP(le, <=)
        -: 2848:    DOCTEST_RELATIONAL_OP(ge, >=)
        -: 2849:} // namespace detail
        -: 2850:} // namespace doctest
        -: 2851:
        -: 2852:#define DOCTEST_WARN_EQ(...) [&] { return doctest::detail::eq(__VA_ARGS__); }()
        -: 2853:#define DOCTEST_CHECK_EQ(...) [&] { return doctest::detail::eq(__VA_ARGS__); }()
        -: 2854:#define DOCTEST_REQUIRE_EQ(...) [&] { return doctest::detail::eq(__VA_ARGS__); }()
        -: 2855:#define DOCTEST_WARN_NE(...) [&] { return doctest::detail::ne(__VA_ARGS__); }()
        -: 2856:#define DOCTEST_CHECK_NE(...) [&] { return doctest::detail::ne(__VA_ARGS__); }()
        -: 2857:#define DOCTEST_REQUIRE_NE(...) [&] { return doctest::detail::ne(__VA_ARGS__); }()
        -: 2858:#define DOCTEST_WARN_LT(...) [&] { return doctest::detail::lt(__VA_ARGS__); }()
        -: 2859:#define DOCTEST_CHECK_LT(...) [&] { return doctest::detail::lt(__VA_ARGS__); }()
        -: 2860:#define DOCTEST_REQUIRE_LT(...) [&] { return doctest::detail::lt(__VA_ARGS__); }()
        -: 2861:#define DOCTEST_WARN_GT(...) [&] { return doctest::detail::gt(__VA_ARGS__); }()
        -: 2862:#define DOCTEST_CHECK_GT(...) [&] { return doctest::detail::gt(__VA_ARGS__); }()
        -: 2863:#define DOCTEST_REQUIRE_GT(...) [&] { return doctest::detail::gt(__VA_ARGS__); }()
        -: 2864:#define DOCTEST_WARN_LE(...) [&] { return doctest::detail::le(__VA_ARGS__); }()
        -: 2865:#define DOCTEST_CHECK_LE(...) [&] { return doctest::detail::le(__VA_ARGS__); }()
        -: 2866:#define DOCTEST_REQUIRE_LE(...) [&] { return doctest::detail::le(__VA_ARGS__); }()
        -: 2867:#define DOCTEST_WARN_GE(...) [&] { return doctest::detail::ge(__VA_ARGS__); }()
        -: 2868:#define DOCTEST_CHECK_GE(...) [&] { return doctest::detail::ge(__VA_ARGS__); }()
        -: 2869:#define DOCTEST_REQUIRE_GE(...) [&] { return doctest::detail::ge(__VA_ARGS__); }()
        -: 2870:#define DOCTEST_WARN_UNARY(...) [&] { return __VA_ARGS__; }()
        -: 2871:#define DOCTEST_CHECK_UNARY(...) [&] { return __VA_ARGS__; }()
        -: 2872:#define DOCTEST_REQUIRE_UNARY(...) [&] { return __VA_ARGS__; }()
        -: 2873:#define DOCTEST_WARN_UNARY_FALSE(...) [&] { return !(__VA_ARGS__); }()
        -: 2874:#define DOCTEST_CHECK_UNARY_FALSE(...) [&] { return !(__VA_ARGS__); }()
        -: 2875:#define DOCTEST_REQUIRE_UNARY_FALSE(...) [&] { return !(__VA_ARGS__); }()
        -: 2876:
        -: 2877:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2878:
        -: 2879:#define DOCTEST_WARN_THROWS_WITH(expr, with, ...) [] { static_assert(false, "Exception translation is not available when doctest is disabled."); return false; }()
        -: 2880:#define DOCTEST_CHECK_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2881:#define DOCTEST_REQUIRE_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2882:#define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2883:#define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2884:#define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2885:
        -: 2886:#define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2887:#define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2888:#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2889:#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2890:#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2891:#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)
        -: 2892:
        -: 2893:#define DOCTEST_WARN_THROWS(...) [&] { try { __VA_ARGS__; return false; } catch (...) { return true; } }()
        -: 2894:#define DOCTEST_CHECK_THROWS(...) [&] { try { __VA_ARGS__; return false; } catch (...) { return true; } }()
        -: 2895:#define DOCTEST_REQUIRE_THROWS(...) [&] { try { __VA_ARGS__; return false; } catch (...) { return true; } }()
        -: 2896:#define DOCTEST_WARN_THROWS_AS(expr, ...) [&] { try { expr; } catch (__VA_ARGS__) { return true; } catch (...) { } return false; }()
        -: 2897:#define DOCTEST_CHECK_THROWS_AS(expr, ...) [&] { try { expr; } catch (__VA_ARGS__) { return true; } catch (...) { } return false; }()
        -: 2898:#define DOCTEST_REQUIRE_THROWS_AS(expr, ...) [&] { try { expr; } catch (__VA_ARGS__) { return true; } catch (...) { } return false; }()
        -: 2899:#define DOCTEST_WARN_NOTHROW(...) [&] { try { __VA_ARGS__; return true; } catch (...) { return false; } }()
        -: 2900:#define DOCTEST_CHECK_NOTHROW(...) [&] { try { __VA_ARGS__; return true; } catch (...) { return false; } }()
        -: 2901:#define DOCTEST_REQUIRE_NOTHROW(...) [&] { try { __VA_ARGS__; return true; } catch (...) { return false; } }()
        -: 2902:
        -: 2903:#define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) [&] { try { __VA_ARGS__; return false; } catch (...) { return true; } }()
        -: 2904:#define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) [&] { try { __VA_ARGS__; return false; } catch (...) { return true; } }()
        -: 2905:#define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) [&] { try { __VA_ARGS__; return false; } catch (...) { return true; } }()
        -: 2906:#define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) [&] { try { expr; } catch (__VA_ARGS__) { return true; } catch (...) { } return false; }()
        -: 2907:#define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) [&] { try { expr; } catch (__VA_ARGS__) { return true; } catch (...) { } return false; }()
        -: 2908:#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) [&] { try { expr; } catch (__VA_ARGS__) { return true; } catch (...) { } return false; }()
        -: 2909:#define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) [&] { try { __VA_ARGS__; return true; } catch (...) { return false; } }()
        -: 2910:#define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) [&] { try { __VA_ARGS__; return true; } catch (...) { return false; } }()
        -: 2911:#define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) [&] { try { __VA_ARGS__; return true; } catch (...) { return false; } }()
        -: 2912:
        -: 2913:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2914:
        -: 2915:#else // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED
        -: 2916:
        -: 2917:#define DOCTEST_WARN(...) DOCTEST_FUNC_EMPTY
        -: 2918:#define DOCTEST_CHECK(...) DOCTEST_FUNC_EMPTY
        -: 2919:#define DOCTEST_REQUIRE(...) DOCTEST_FUNC_EMPTY
        -: 2920:#define DOCTEST_WARN_FALSE(...) DOCTEST_FUNC_EMPTY
        -: 2921:#define DOCTEST_CHECK_FALSE(...) DOCTEST_FUNC_EMPTY
        -: 2922:#define DOCTEST_REQUIRE_FALSE(...) DOCTEST_FUNC_EMPTY
        -: 2923:
        -: 2924:#define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY
        -: 2925:#define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY
        -: 2926:#define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY
        -: 2927:#define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY
        -: 2928:#define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY
        -: 2929:#define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY
        -: 2930:
        -: 2931:#define DOCTEST_WARN_EQ(...) DOCTEST_FUNC_EMPTY
        -: 2932:#define DOCTEST_CHECK_EQ(...) DOCTEST_FUNC_EMPTY
        -: 2933:#define DOCTEST_REQUIRE_EQ(...) DOCTEST_FUNC_EMPTY
        -: 2934:#define DOCTEST_WARN_NE(...) DOCTEST_FUNC_EMPTY
        -: 2935:#define DOCTEST_CHECK_NE(...) DOCTEST_FUNC_EMPTY
        -: 2936:#define DOCTEST_REQUIRE_NE(...) DOCTEST_FUNC_EMPTY
        -: 2937:#define DOCTEST_WARN_GT(...) DOCTEST_FUNC_EMPTY
        -: 2938:#define DOCTEST_CHECK_GT(...) DOCTEST_FUNC_EMPTY
        -: 2939:#define DOCTEST_REQUIRE_GT(...) DOCTEST_FUNC_EMPTY
        -: 2940:#define DOCTEST_WARN_LT(...) DOCTEST_FUNC_EMPTY
        -: 2941:#define DOCTEST_CHECK_LT(...) DOCTEST_FUNC_EMPTY
        -: 2942:#define DOCTEST_REQUIRE_LT(...) DOCTEST_FUNC_EMPTY
        -: 2943:#define DOCTEST_WARN_GE(...) DOCTEST_FUNC_EMPTY
        -: 2944:#define DOCTEST_CHECK_GE(...) DOCTEST_FUNC_EMPTY
        -: 2945:#define DOCTEST_REQUIRE_GE(...) DOCTEST_FUNC_EMPTY
        -: 2946:#define DOCTEST_WARN_LE(...) DOCTEST_FUNC_EMPTY
        -: 2947:#define DOCTEST_CHECK_LE(...) DOCTEST_FUNC_EMPTY
        -: 2948:#define DOCTEST_REQUIRE_LE(...) DOCTEST_FUNC_EMPTY
        -: 2949:
        -: 2950:#define DOCTEST_WARN_UNARY(...) DOCTEST_FUNC_EMPTY
        -: 2951:#define DOCTEST_CHECK_UNARY(...) DOCTEST_FUNC_EMPTY
        -: 2952:#define DOCTEST_REQUIRE_UNARY(...) DOCTEST_FUNC_EMPTY
        -: 2953:#define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY
        -: 2954:#define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY
        -: 2955:#define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY
        -: 2956:
        -: 2957:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2958:
        -: 2959:#define DOCTEST_WARN_THROWS(...) DOCTEST_FUNC_EMPTY
        -: 2960:#define DOCTEST_CHECK_THROWS(...) DOCTEST_FUNC_EMPTY
        -: 2961:#define DOCTEST_REQUIRE_THROWS(...) DOCTEST_FUNC_EMPTY
        -: 2962:#define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2963:#define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2964:#define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2965:#define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2966:#define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2967:#define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2968:#define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY
        -: 2969:#define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY
        -: 2970:#define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY
        -: 2971:#define DOCTEST_WARN_NOTHROW(...) DOCTEST_FUNC_EMPTY
        -: 2972:#define DOCTEST_CHECK_NOTHROW(...) DOCTEST_FUNC_EMPTY
        -: 2973:#define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_FUNC_EMPTY
        -: 2974:
        -: 2975:#define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2976:#define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2977:#define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2978:#define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY
        -: 2979:#define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY
        -: 2980:#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY
        -: 2981:#define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY
        -: 2982:#define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY
        -: 2983:#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY
        -: 2984:#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY
        -: 2985:#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY
        -: 2986:#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY
        -: 2987:#define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2988:#define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2989:#define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY
        -: 2990:
        -: 2991:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2992:
        -: 2993:#endif // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED
        -: 2994:
        -: 2995:#endif // DOCTEST_CONFIG_DISABLE
        -: 2996:
        -: 2997:#ifdef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 2998:
        -: 2999:                                                                                                                        #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS
        -: 3000:#define DOCTEST_EXCEPTION_EMPTY_FUNC DOCTEST_FUNC_EMPTY
        -: 3001:#else // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS
        -: 3002:#define DOCTEST_EXCEPTION_EMPTY_FUNC [] { static_assert(false, "Exceptions are disabled! " \
        -: 3003:    "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."); return false; }()
        -: 3004:
        -: 3005:#undef DOCTEST_REQUIRE
        -: 3006:#undef DOCTEST_REQUIRE_FALSE
        -: 3007:#undef DOCTEST_REQUIRE_MESSAGE
        -: 3008:#undef DOCTEST_REQUIRE_FALSE_MESSAGE
        -: 3009:#undef DOCTEST_REQUIRE_EQ
        -: 3010:#undef DOCTEST_REQUIRE_NE
        -: 3011:#undef DOCTEST_REQUIRE_GT
        -: 3012:#undef DOCTEST_REQUIRE_LT
        -: 3013:#undef DOCTEST_REQUIRE_GE
        -: 3014:#undef DOCTEST_REQUIRE_LE
        -: 3015:#undef DOCTEST_REQUIRE_UNARY
        -: 3016:#undef DOCTEST_REQUIRE_UNARY_FALSE
        -: 3017:
        -: 3018:#define DOCTEST_REQUIRE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3019:#define DOCTEST_REQUIRE_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3020:#define DOCTEST_REQUIRE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3021:#define DOCTEST_REQUIRE_FALSE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3022:#define DOCTEST_REQUIRE_EQ DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3023:#define DOCTEST_REQUIRE_NE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3024:#define DOCTEST_REQUIRE_GT DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3025:#define DOCTEST_REQUIRE_LT DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3026:#define DOCTEST_REQUIRE_GE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3027:#define DOCTEST_REQUIRE_LE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3028:#define DOCTEST_REQUIRE_UNARY DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3029:#define DOCTEST_REQUIRE_UNARY_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3030:
        -: 3031:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS
        -: 3032:
        -: 3033:#define DOCTEST_WARN_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3034:#define DOCTEST_CHECK_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3035:#define DOCTEST_REQUIRE_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3036:#define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3037:#define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3038:#define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3039:#define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3040:#define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3041:#define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3042:#define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3043:#define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3044:#define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3045:#define DOCTEST_WARN_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3046:#define DOCTEST_CHECK_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3047:#define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3048:
        -: 3049:#define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3050:#define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3051:#define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3052:#define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3053:#define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3054:#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3055:#define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3056:#define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3057:#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3058:#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3059:#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3060:#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3061:#define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3062:#define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3063:#define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC
        -: 3064:
        -: 3065:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 3066:
        -: 3067:// clang-format off
        -: 3068:// KEPT FOR BACKWARDS COMPATIBILITY - FORWARDING TO THE RIGHT MACROS
        -: 3069:#define DOCTEST_FAST_WARN_EQ             DOCTEST_WARN_EQ
        -: 3070:#define DOCTEST_FAST_CHECK_EQ            DOCTEST_CHECK_EQ
        -: 3071:#define DOCTEST_FAST_REQUIRE_EQ          DOCTEST_REQUIRE_EQ
        -: 3072:#define DOCTEST_FAST_WARN_NE             DOCTEST_WARN_NE
        -: 3073:#define DOCTEST_FAST_CHECK_NE            DOCTEST_CHECK_NE
        -: 3074:#define DOCTEST_FAST_REQUIRE_NE          DOCTEST_REQUIRE_NE
        -: 3075:#define DOCTEST_FAST_WARN_GT             DOCTEST_WARN_GT
        -: 3076:#define DOCTEST_FAST_CHECK_GT            DOCTEST_CHECK_GT
        -: 3077:#define DOCTEST_FAST_REQUIRE_GT          DOCTEST_REQUIRE_GT
        -: 3078:#define DOCTEST_FAST_WARN_LT             DOCTEST_WARN_LT
        -: 3079:#define DOCTEST_FAST_CHECK_LT            DOCTEST_CHECK_LT
        -: 3080:#define DOCTEST_FAST_REQUIRE_LT          DOCTEST_REQUIRE_LT
        -: 3081:#define DOCTEST_FAST_WARN_GE             DOCTEST_WARN_GE
        -: 3082:#define DOCTEST_FAST_CHECK_GE            DOCTEST_CHECK_GE
        -: 3083:#define DOCTEST_FAST_REQUIRE_GE          DOCTEST_REQUIRE_GE
        -: 3084:#define DOCTEST_FAST_WARN_LE             DOCTEST_WARN_LE
        -: 3085:#define DOCTEST_FAST_CHECK_LE            DOCTEST_CHECK_LE
        -: 3086:#define DOCTEST_FAST_REQUIRE_LE          DOCTEST_REQUIRE_LE
        -: 3087:
        -: 3088:#define DOCTEST_FAST_WARN_UNARY          DOCTEST_WARN_UNARY
        -: 3089:#define DOCTEST_FAST_CHECK_UNARY         DOCTEST_CHECK_UNARY
        -: 3090:#define DOCTEST_FAST_REQUIRE_UNARY       DOCTEST_REQUIRE_UNARY
        -: 3091:#define DOCTEST_FAST_WARN_UNARY_FALSE    DOCTEST_WARN_UNARY_FALSE
        -: 3092:#define DOCTEST_FAST_CHECK_UNARY_FALSE   DOCTEST_CHECK_UNARY_FALSE
        -: 3093:#define DOCTEST_FAST_REQUIRE_UNARY_FALSE DOCTEST_REQUIRE_UNARY_FALSE
        -: 3094:
        -: 3095:#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,__VA_ARGS__)
        -: 3096:// clang-format on
        -: 3097:
        -: 3098:// BDD style macros
        -: 3099:// clang-format off
        -: 3100:#define DOCTEST_SCENARIO(name) DOCTEST_TEST_CASE("  Scenario: " name)
        -: 3101:#define DOCTEST_SCENARIO_CLASS(name) DOCTEST_TEST_CASE_CLASS("  Scenario: " name)
        -: 3102:#define DOCTEST_SCENARIO_TEMPLATE(name, T, ...)  DOCTEST_TEST_CASE_TEMPLATE("  Scenario: " name, T, __VA_ARGS__)
        -: 3103:#define DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE("  Scenario: " name, T, id)
        -: 3104:
        -: 3105:#define DOCTEST_GIVEN(name)     DOCTEST_SUBCASE("   Given: " name)
        -: 3106:#define DOCTEST_WHEN(name)      DOCTEST_SUBCASE("    When: " name)
        -: 3107:#define DOCTEST_AND_WHEN(name)  DOCTEST_SUBCASE("And when: " name)
        -: 3108:#define DOCTEST_THEN(name)      DOCTEST_SUBCASE("    Then: " name)
        -: 3109:#define DOCTEST_AND_THEN(name)  DOCTEST_SUBCASE("     And: " name)
        -: 3110:// clang-format on
        -: 3111:
        -: 3112:// == SHORT VERSIONS OF THE MACROS
        -: 3113:#ifndef DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES
        -: 3114:
        -: 3115:#define TEST_CASE(name) DOCTEST_TEST_CASE(name)
        -: 3116:#define TEST_CASE_CLASS(name) DOCTEST_TEST_CASE_CLASS(name)
        -: 3117:#define TEST_CASE_FIXTURE(x, name) DOCTEST_TEST_CASE_FIXTURE(x, name)
        -: 3118:#define TYPE_TO_STRING_AS(str, ...) DOCTEST_TYPE_TO_STRING_AS(str, __VA_ARGS__)
        -: 3119:#define TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING(__VA_ARGS__)
        -: 3120:#define TEST_CASE_TEMPLATE(name, T, ...) DOCTEST_TEST_CASE_TEMPLATE(name, T, __VA_ARGS__)
        -: 3121:#define TEST_CASE_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, T, id)
        -: 3122:#define TEST_CASE_TEMPLATE_INVOKE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, __VA_ARGS__)
        -: 3123:#define TEST_CASE_TEMPLATE_APPLY(id, ...) DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, __VA_ARGS__)
        -: 3124:#define SUBCASE(name) DOCTEST_SUBCASE(name)
        -: 3125:#define TEST_SUITE(decorators) DOCTEST_TEST_SUITE(decorators)
        -: 3126:#define TEST_SUITE_BEGIN(name) DOCTEST_TEST_SUITE_BEGIN(name)
        -: 3127:#define TEST_SUITE_END DOCTEST_TEST_SUITE_END
        -: 3128:#define REGISTER_EXCEPTION_TRANSLATOR(signature) DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)
        -: 3129:#define REGISTER_REPORTER(name, priority, reporter) DOCTEST_REGISTER_REPORTER(name, priority, reporter)
        -: 3130:#define REGISTER_LISTENER(name, priority, reporter) DOCTEST_REGISTER_LISTENER(name, priority, reporter)
        -: 3131:#define INFO(...) DOCTEST_INFO(__VA_ARGS__)
        -: 3132:#define CAPTURE(x) DOCTEST_CAPTURE(x)
        -: 3133:#define ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_MESSAGE_AT(file, line, __VA_ARGS__)
        -: 3134:#define ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_FAIL_CHECK_AT(file, line, __VA_ARGS__)
        -: 3135:#define ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_FAIL_AT(file, line, __VA_ARGS__)
        -: 3136:#define MESSAGE(...) DOCTEST_MESSAGE(__VA_ARGS__)
        -: 3137:#define FAIL_CHECK(...) DOCTEST_FAIL_CHECK(__VA_ARGS__)
        -: 3138:#define FAIL(...) DOCTEST_FAIL(__VA_ARGS__)
        -: 3139:#define TO_LVALUE(...) DOCTEST_TO_LVALUE(__VA_ARGS__)
        -: 3140:
        -: 3141:#define WARN(...) DOCTEST_WARN(__VA_ARGS__)
        -: 3142:#define WARN_FALSE(...) DOCTEST_WARN_FALSE(__VA_ARGS__)
        -: 3143:#define WARN_THROWS(...) DOCTEST_WARN_THROWS(__VA_ARGS__)
        -: 3144:#define WARN_THROWS_AS(expr, ...) DOCTEST_WARN_THROWS_AS(expr, __VA_ARGS__)
        -: 3145:#define WARN_THROWS_WITH(expr, ...) DOCTEST_WARN_THROWS_WITH(expr, __VA_ARGS__)
        -: 3146:#define WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_WARN_THROWS_WITH_AS(expr, with, __VA_ARGS__)
        -: 3147:#define WARN_NOTHROW(...) DOCTEST_WARN_NOTHROW(__VA_ARGS__)
        -: 3148:#define CHECK(...) DOCTEST_CHECK(__VA_ARGS__)
        -: 3149:#define CHECK_FALSE(...) DOCTEST_CHECK_FALSE(__VA_ARGS__)
        -: 3150:#define CHECK_THROWS(...) DOCTEST_CHECK_THROWS(__VA_ARGS__)
        -: 3151:#define CHECK_THROWS_AS(expr, ...) DOCTEST_CHECK_THROWS_AS(expr, __VA_ARGS__)
        -: 3152:#define CHECK_THROWS_WITH(expr, ...) DOCTEST_CHECK_THROWS_WITH(expr, __VA_ARGS__)
        -: 3153:#define CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_AS(expr, with, __VA_ARGS__)
        -: 3154:#define CHECK_NOTHROW(...) DOCTEST_CHECK_NOTHROW(__VA_ARGS__)
        -: 3155:#define REQUIRE(...) DOCTEST_REQUIRE(__VA_ARGS__)
        -: 3156:#define REQUIRE_FALSE(...) DOCTEST_REQUIRE_FALSE(__VA_ARGS__)
        -: 3157:#define REQUIRE_THROWS(...) DOCTEST_REQUIRE_THROWS(__VA_ARGS__)
        -: 3158:#define REQUIRE_THROWS_AS(expr, ...) DOCTEST_REQUIRE_THROWS_AS(expr, __VA_ARGS__)
        -: 3159:#define REQUIRE_THROWS_WITH(expr, ...) DOCTEST_REQUIRE_THROWS_WITH(expr, __VA_ARGS__)
        -: 3160:#define REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, __VA_ARGS__)
        -: 3161:#define REQUIRE_NOTHROW(...) DOCTEST_REQUIRE_NOTHROW(__VA_ARGS__)
        -: 3162:
        -: 3163:#define WARN_MESSAGE(cond, ...) DOCTEST_WARN_MESSAGE(cond, __VA_ARGS__)
        -: 3164:#define WARN_FALSE_MESSAGE(cond, ...) DOCTEST_WARN_FALSE_MESSAGE(cond, __VA_ARGS__)
        -: 3165:#define WARN_THROWS_MESSAGE(expr, ...) DOCTEST_WARN_THROWS_MESSAGE(expr, __VA_ARGS__)
        -: 3166:#define WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)
        -: 3167:#define WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)
        -: 3168:#define WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)
        -: 3169:#define WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_WARN_NOTHROW_MESSAGE(expr, __VA_ARGS__)
        -: 3170:#define CHECK_MESSAGE(cond, ...) DOCTEST_CHECK_MESSAGE(cond, __VA_ARGS__)
        -: 3171:#define CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_CHECK_FALSE_MESSAGE(cond, __VA_ARGS__)
        -: 3172:#define CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_CHECK_THROWS_MESSAGE(expr, __VA_ARGS__)
        -: 3173:#define CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)
        -: 3174:#define CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)
        -: 3175:#define CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)
        -: 3176:#define CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_CHECK_NOTHROW_MESSAGE(expr, __VA_ARGS__)
        -: 3177:#define REQUIRE_MESSAGE(cond, ...) DOCTEST_REQUIRE_MESSAGE(cond, __VA_ARGS__)
        -: 3178:#define REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_REQUIRE_FALSE_MESSAGE(cond, __VA_ARGS__)
        -: 3179:#define REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_REQUIRE_THROWS_MESSAGE(expr, __VA_ARGS__)
        -: 3180:#define REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)
        -: 3181:#define REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)
        -: 3182:#define REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)
        -: 3183:#define REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, __VA_ARGS__)
        -: 3184:
        -: 3185:#define SCENARIO(name) DOCTEST_SCENARIO(name)
        -: 3186:#define SCENARIO_CLASS(name) DOCTEST_SCENARIO_CLASS(name)
        -: 3187:#define SCENARIO_TEMPLATE(name, T, ...) DOCTEST_SCENARIO_TEMPLATE(name, T, __VA_ARGS__)
        -: 3188:#define SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id)
        -: 3189:#define GIVEN(name) DOCTEST_GIVEN(name)
        -: 3190:#define WHEN(name) DOCTEST_WHEN(name)
        -: 3191:#define AND_WHEN(name) DOCTEST_AND_WHEN(name)
        -: 3192:#define THEN(name) DOCTEST_THEN(name)
        -: 3193:#define AND_THEN(name) DOCTEST_AND_THEN(name)
        -: 3194:
        -: 3195:#define WARN_EQ(...) DOCTEST_WARN_EQ(__VA_ARGS__)
        -: 3196:#define CHECK_EQ(...) DOCTEST_CHECK_EQ(__VA_ARGS__)
        -: 3197:#define REQUIRE_EQ(...) DOCTEST_REQUIRE_EQ(__VA_ARGS__)
        -: 3198:#define WARN_NE(...) DOCTEST_WARN_NE(__VA_ARGS__)
        -: 3199:#define CHECK_NE(...) DOCTEST_CHECK_NE(__VA_ARGS__)
        -: 3200:#define REQUIRE_NE(...) DOCTEST_REQUIRE_NE(__VA_ARGS__)
        -: 3201:#define WARN_GT(...) DOCTEST_WARN_GT(__VA_ARGS__)
        -: 3202:#define CHECK_GT(...) DOCTEST_CHECK_GT(__VA_ARGS__)
        -: 3203:#define REQUIRE_GT(...) DOCTEST_REQUIRE_GT(__VA_ARGS__)
        -: 3204:#define WARN_LT(...) DOCTEST_WARN_LT(__VA_ARGS__)
        -: 3205:#define CHECK_LT(...) DOCTEST_CHECK_LT(__VA_ARGS__)
        -: 3206:#define REQUIRE_LT(...) DOCTEST_REQUIRE_LT(__VA_ARGS__)
        -: 3207:#define WARN_GE(...) DOCTEST_WARN_GE(__VA_ARGS__)
        -: 3208:#define CHECK_GE(...) DOCTEST_CHECK_GE(__VA_ARGS__)
        -: 3209:#define REQUIRE_GE(...) DOCTEST_REQUIRE_GE(__VA_ARGS__)
        -: 3210:#define WARN_LE(...) DOCTEST_WARN_LE(__VA_ARGS__)
        -: 3211:#define CHECK_LE(...) DOCTEST_CHECK_LE(__VA_ARGS__)
        -: 3212:#define REQUIRE_LE(...) DOCTEST_REQUIRE_LE(__VA_ARGS__)
        -: 3213:#define WARN_UNARY(...) DOCTEST_WARN_UNARY(__VA_ARGS__)
        -: 3214:#define CHECK_UNARY(...) DOCTEST_CHECK_UNARY(__VA_ARGS__)
        -: 3215:#define REQUIRE_UNARY(...) DOCTEST_REQUIRE_UNARY(__VA_ARGS__)
        -: 3216:#define WARN_UNARY_FALSE(...) DOCTEST_WARN_UNARY_FALSE(__VA_ARGS__)
        -: 3217:#define CHECK_UNARY_FALSE(...) DOCTEST_CHECK_UNARY_FALSE(__VA_ARGS__)
        -: 3218:#define REQUIRE_UNARY_FALSE(...) DOCTEST_REQUIRE_UNARY_FALSE(__VA_ARGS__)
        -: 3219:
        -: 3220:// KEPT FOR BACKWARDS COMPATIBILITY
        -: 3221:#define FAST_WARN_EQ(...) DOCTEST_FAST_WARN_EQ(__VA_ARGS__)
        -: 3222:#define FAST_CHECK_EQ(...) DOCTEST_FAST_CHECK_EQ(__VA_ARGS__)
        -: 3223:#define FAST_REQUIRE_EQ(...) DOCTEST_FAST_REQUIRE_EQ(__VA_ARGS__)
        -: 3224:#define FAST_WARN_NE(...) DOCTEST_FAST_WARN_NE(__VA_ARGS__)
        -: 3225:#define FAST_CHECK_NE(...) DOCTEST_FAST_CHECK_NE(__VA_ARGS__)
        -: 3226:#define FAST_REQUIRE_NE(...) DOCTEST_FAST_REQUIRE_NE(__VA_ARGS__)
        -: 3227:#define FAST_WARN_GT(...) DOCTEST_FAST_WARN_GT(__VA_ARGS__)
        -: 3228:#define FAST_CHECK_GT(...) DOCTEST_FAST_CHECK_GT(__VA_ARGS__)
        -: 3229:#define FAST_REQUIRE_GT(...) DOCTEST_FAST_REQUIRE_GT(__VA_ARGS__)
        -: 3230:#define FAST_WARN_LT(...) DOCTEST_FAST_WARN_LT(__VA_ARGS__)
        -: 3231:#define FAST_CHECK_LT(...) DOCTEST_FAST_CHECK_LT(__VA_ARGS__)
        -: 3232:#define FAST_REQUIRE_LT(...) DOCTEST_FAST_REQUIRE_LT(__VA_ARGS__)
        -: 3233:#define FAST_WARN_GE(...) DOCTEST_FAST_WARN_GE(__VA_ARGS__)
        -: 3234:#define FAST_CHECK_GE(...) DOCTEST_FAST_CHECK_GE(__VA_ARGS__)
        -: 3235:#define FAST_REQUIRE_GE(...) DOCTEST_FAST_REQUIRE_GE(__VA_ARGS__)
        -: 3236:#define FAST_WARN_LE(...) DOCTEST_FAST_WARN_LE(__VA_ARGS__)
        -: 3237:#define FAST_CHECK_LE(...) DOCTEST_FAST_CHECK_LE(__VA_ARGS__)
        -: 3238:#define FAST_REQUIRE_LE(...) DOCTEST_FAST_REQUIRE_LE(__VA_ARGS__)
        -: 3239:
        -: 3240:#define FAST_WARN_UNARY(...) DOCTEST_FAST_WARN_UNARY(__VA_ARGS__)
        -: 3241:#define FAST_CHECK_UNARY(...) DOCTEST_FAST_CHECK_UNARY(__VA_ARGS__)
        -: 3242:#define FAST_REQUIRE_UNARY(...) DOCTEST_FAST_REQUIRE_UNARY(__VA_ARGS__)
        -: 3243:#define FAST_WARN_UNARY_FALSE(...) DOCTEST_FAST_WARN_UNARY_FALSE(__VA_ARGS__)
        -: 3244:#define FAST_CHECK_UNARY_FALSE(...) DOCTEST_FAST_CHECK_UNARY_FALSE(__VA_ARGS__)
        -: 3245:#define FAST_REQUIRE_UNARY_FALSE(...) DOCTEST_FAST_REQUIRE_UNARY_FALSE(__VA_ARGS__)
        -: 3246:
        -: 3247:#define TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, __VA_ARGS__)
        -: 3248:
        -: 3249:#endif // DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES
        -: 3250:
        -: 3251:#ifndef DOCTEST_CONFIG_DISABLE
        -: 3252:
        -: 3253:// this is here to clear the 'current test suite' for the current translation unit - at the top
        -: 3254:DOCTEST_TEST_SUITE_END();
        -: 3255:
        -: 3256:#endif // DOCTEST_CONFIG_DISABLE
        -: 3257:
        -: 3258:DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 3259:DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 3260:DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 3261:
        -: 3262:DOCTEST_SUPPRESS_COMMON_WARNINGS_POP
        -: 3263:
        -: 3264:#endif // DOCTEST_LIBRARY_INCLUDED
        -: 3265:
        -: 3266:#ifndef DOCTEST_SINGLE_HEADER
        -: 3267:#define DOCTEST_SINGLE_HEADER
        -: 3268:#endif // DOCTEST_SINGLE_HEADER
        -: 3269:
        -: 3270:#if defined(DOCTEST_CONFIG_IMPLEMENT) || !defined(DOCTEST_SINGLE_HEADER)
        -: 3271:
        -: 3272:#ifndef DOCTEST_SINGLE_HEADER
        -: 3273:#include "doctest_fwd.h"
        -: 3274:#endif // DOCTEST_SINGLE_HEADER
        -: 3275:
        -: 3276:DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wunused-macros")
        -: 3277:
        -: 3278:#ifndef DOCTEST_LIBRARY_IMPLEMENTATION
        -: 3279:#define DOCTEST_LIBRARY_IMPLEMENTATION
        -: 3280:
        -: 3281:DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 3282:
        -: 3283:DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH
        -: 3284:
        -: 3285:DOCTEST_CLANG_SUPPRESS_WARNING_PUSH
        -: 3286:DOCTEST_CLANG_SUPPRESS_WARNING("-Wglobal-constructors")
        -: 3287:DOCTEST_CLANG_SUPPRESS_WARNING("-Wexit-time-destructors")
        -: 3288:DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-conversion")
        -: 3289:DOCTEST_CLANG_SUPPRESS_WARNING("-Wshorten-64-to-32")
        -: 3290:DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-variable-declarations")
        -: 3291:DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch")
        -: 3292:DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch-enum")
        -: 3293:DOCTEST_CLANG_SUPPRESS_WARNING("-Wcovered-switch-default")
        -: 3294:DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-noreturn")
        -: 3295:DOCTEST_CLANG_SUPPRESS_WARNING("-Wdisabled-macro-expansion")
        -: 3296:DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-braces")
        -: 3297:DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-field-initializers")
        -: 3298:DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-member-function")
        -: 3299:DOCTEST_CLANG_SUPPRESS_WARNING("-Wnonportable-system-include-path")
        -: 3300:
        -: 3301:DOCTEST_GCC_SUPPRESS_WARNING_PUSH
        -: 3302:DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")
        -: 3303:DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")
        -: 3304:DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-field-initializers")
        -: 3305:DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-braces")
        -: 3306:DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch")
        -: 3307:DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-enum")
        -: 3308:DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-default")
        -: 3309:DOCTEST_GCC_SUPPRESS_WARNING("-Wunsafe-loop-optimizations")
        -: 3310:DOCTEST_GCC_SUPPRESS_WARNING("-Wold-style-cast")
        -: 3311:DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-function")
        -: 3312:DOCTEST_GCC_SUPPRESS_WARNING("-Wmultiple-inheritance")
        -: 3313:DOCTEST_GCC_SUPPRESS_WARNING("-Wsuggest-attribute")
        -: 3314:
        -: 3315:DOCTEST_MSVC_SUPPRESS_WARNING_PUSH
        -: 3316:DOCTEST_MSVC_SUPPRESS_WARNING(4267) // 'var' : conversion from 'x' to 'y', possible loss of data
        -: 3317:DOCTEST_MSVC_SUPPRESS_WARNING(4530) // C++ exception handler used, but unwind semantics not enabled
        -: 3318:DOCTEST_MSVC_SUPPRESS_WARNING(4577) // 'noexcept' used with no exception handling mode specified
        -: 3319:DOCTEST_MSVC_SUPPRESS_WARNING(4774) // format string expected in argument is not a string literal
        -: 3320:DOCTEST_MSVC_SUPPRESS_WARNING(4365) // conversion from 'int' to 'unsigned', signed/unsigned mismatch
        -: 3321:DOCTEST_MSVC_SUPPRESS_WARNING(5039) // pointer to potentially throwing function passed to extern C
        -: 3322:DOCTEST_MSVC_SUPPRESS_WARNING(4800) // forcing value to bool 'true' or 'false' (performance warning)
        -: 3323:DOCTEST_MSVC_SUPPRESS_WARNING(5245) // unreferenced function with internal linkage has been removed
        -: 3324:
        -: 3325:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN
        -: 3326:
        -: 3327:// required includes - will go only in one translation unit!
        -: 3328:#include <ctime>
        -: 3329:#include <cmath>
        -: 3330:#include <climits>
        -: 3331:// borland (Embarcadero) compiler requires math.h and not cmath - https://github.com/doctest/doctest/pull/37
        -: 3332:#ifdef __BORLANDC__
        -: 3333:#include <math.h>
        -: 3334:#endif // __BORLANDC__
        -: 3335:
        -: 3336:#include <new>
        -: 3337:#include <cstdio>
        -: 3338:#include <cstdlib>
        -: 3339:#include <cstring>
        -: 3340:#include <limits>
        -: 3341:#include <utility>
        -: 3342:#include <fstream>
        -: 3343:#include <sstream>
        -: 3344:
        -: 3345:#ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 3346:
        -: 3347:#include <iostream>
        -: 3348:
        -: 3349:#endif // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 3350:
        -: 3351:#include <algorithm>
        -: 3352:#include <iomanip>
        -: 3353:#include <vector>
        -: 3354:
        -: 3355:#ifndef DOCTEST_CONFIG_NO_MULTITHREADING
        -: 3356:
        -: 3357:#include <atomic>
        -: 3358:#include <mutex>
        -: 3359:
        -: 3360:#define DOCTEST_DECLARE_MUTEX(name) std::mutex name;
        -: 3361:#define DOCTEST_DECLARE_STATIC_MUTEX(name) static DOCTEST_DECLARE_MUTEX(name)
        -: 3362:#define DOCTEST_LOCK_MUTEX(name) std::lock_guard<std::mutex> DOCTEST_ANONYMOUS(DOCTEST_ANON_LOCK_)(name);
        -: 3363:#else // DOCTEST_CONFIG_NO_MULTITHREADING
        -: 3364:                                                                                                                        #define DOCTEST_DECLARE_MUTEX(name)
        -: 3365:#define DOCTEST_DECLARE_STATIC_MUTEX(name)
        -: 3366:#define DOCTEST_LOCK_MUTEX(name)
        -: 3367:#endif // DOCTEST_CONFIG_NO_MULTITHREADING
        -: 3368:
        -: 3369:#include <set>
        -: 3370:#include <map>
        -: 3371:#include <unordered_set>
        -: 3372:#include <exception>
        -: 3373:#include <stdexcept>
        -: 3374:#include <csignal>
        -: 3375:#include <cfloat>
        -: 3376:#include <cctype>
        -: 3377:#include <cstdint>
        -: 3378:#include <string>
        -: 3379:
        -: 3380:#ifdef DOCTEST_PLATFORM_MAC
        -: 3381:                                                                                                                        #include <sys/types.h>
        -: 3382:#include <unistd.h>
        -: 3383:#include <sys/sysctl.h>
        -: 3384:#endif // DOCTEST_PLATFORM_MAC
        -: 3385:
        -: 3386:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 3387:
        -: 3388:                                                                                                                        // defines for a leaner windows.h
        -: 3389:#ifndef WIN32_LEAN_AND_MEAN
        -: 3390:#define WIN32_LEAN_AND_MEAN
        -: 3391:#define DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN
        -: 3392:#endif // WIN32_LEAN_AND_MEAN
        -: 3393:#ifndef NOMINMAX
        -: 3394:#define NOMINMAX
        -: 3395:#define DOCTEST_UNDEF_NOMINMAX
        -: 3396:#endif // NOMINMAX
        -: 3397:
        -: 3398:// not sure what AfxWin.h is for - here I do what Catch does
        -: 3399:#ifdef __AFXDLL
        -: 3400:#include <AfxWin.h>
        -: 3401:#else
        -: 3402:#include <windows.h>
        -: 3403:#endif
        -: 3404:#include <io.h>
        -: 3405:
        -: 3406:#else // DOCTEST_PLATFORM_WINDOWS
        -: 3407:
        -: 3408:#include <sys/time.h>
        -: 3409:#include <unistd.h>
        -: 3410:
        -: 3411:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 3412:
        -: 3413:// this is a fix for https://github.com/doctest/doctest/issues/348
        -: 3414:// https://mail.gnome.org/archives/xml/2012-January/msg00000.html
        -: 3415:#if !defined(HAVE_UNISTD_H) && !defined(STDOUT_FILENO)
        -: 3416:#define STDOUT_FILENO fileno(stdout)
        -: 3417:#endif // HAVE_UNISTD_H
        -: 3418:
        -: 3419:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END
        -: 3420:
        -: 3421:// counts the number of elements in a C array
        -: 3422:#define DOCTEST_COUNTOF(x) (sizeof(x) / sizeof(x[0]))
        -: 3423:
        -: 3424:#ifdef DOCTEST_CONFIG_DISABLE
        -: 3425:#define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_disabled
        -: 3426:#else // DOCTEST_CONFIG_DISABLE
        -: 3427:#define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_not_disabled
        -: 3428:#endif // DOCTEST_CONFIG_DISABLE
        -: 3429:
        -: 3430:#ifndef DOCTEST_CONFIG_OPTIONS_PREFIX
        -: 3431:#define DOCTEST_CONFIG_OPTIONS_PREFIX "dt-"
        -: 3432:#endif
        -: 3433:
        -: 3434:#ifndef DOCTEST_THREAD_LOCAL
        -: 3435:#if defined(DOCTEST_CONFIG_NO_MULTITHREADING) || DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))
        -: 3436:#define DOCTEST_THREAD_LOCAL
        -: 3437:#else // DOCTEST_MSVC
        -: 3438:#define DOCTEST_THREAD_LOCAL thread_local
        -: 3439:#endif // DOCTEST_MSVC
        -: 3440:#endif // DOCTEST_THREAD_LOCAL
        -: 3441:
        -: 3442:#ifndef DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES
        -: 3443:#define DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES 32
        -: 3444:#endif
        -: 3445:
        -: 3446:#ifndef DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE
        -: 3447:#define DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE 64
        -: 3448:#endif
        -: 3449:
        -: 3450:#ifdef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS
        -: 3451:#define DOCTEST_OPTIONS_PREFIX_DISPLAY DOCTEST_CONFIG_OPTIONS_PREFIX
        -: 3452:#else
        -: 3453:#define DOCTEST_OPTIONS_PREFIX_DISPLAY ""
        -: 3454:#endif
        -: 3455:
        -: 3456:#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
        -: 3457:#define DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS
        -: 3458:#endif
        -: 3459:
        -: 3460:#ifndef DOCTEST_CDECL
        -: 3461:#define DOCTEST_CDECL __cdecl
        -: 3462:#endif
        -: 3463:
        -: 3464:namespace doctest {
        -: 3465:
        -: 3466:    bool is_running_in_test = false;
        -: 3467:
        -: 3468:    namespace {
        -: 3469:        using namespace detail;
        -: 3470:
        -: 3471:        template<typename Ex>
function _ZN7doctest12_GLOBAL__N_115throw_exceptionISt11logic_errorEEvRKT_ called 0 returned 0% blocks executed 0%
    #####: 3472:        DOCTEST_NORETURN void throw_exception(Ex const &e) {
        -: 3473:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
    #####: 3474:            throw e;
    $$$$$: 3474-block  0
        -: 3475:#else  // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 3476:                                                                                                                                    #ifdef DOCTEST_CONFIG_HANDLE_EXCEPTION
        -: 3477:        DOCTEST_CONFIG_HANDLE_EXCEPTION(e);
        -: 3478:#else // DOCTEST_CONFIG_HANDLE_EXCEPTION
        -: 3479:#ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 3480:        std::cerr << "doctest will terminate because it needed to throw an exception.\n"
        -: 3481:                  << "The message was: " << e.what() << '\n';
        -: 3482:#endif // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 3483:#endif // DOCTEST_CONFIG_HANDLE_EXCEPTION
        -: 3484:        std::terminate();
        -: 3485:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 3486:        }
        -: 3487:
        -: 3488:#ifndef DOCTEST_INTERNAL_ERROR
        -: 3489:#define DOCTEST_INTERNAL_ERROR(msg)                                                                \
        -: 3490:    throw_exception(std::logic_error(                                                              \
        -: 3491:            __FILE__ ":" DOCTEST_TOSTR(__LINE__) ": Internal doctest error: " msg))
        -: 3492:#endif // DOCTEST_INTERNAL_ERROR
        -: 3493:
        -: 3494:        // case insensitive strcmp
function _ZN7doctest12_GLOBAL__N_17stricmpEPKcS2_ called 1 returned 100% blocks executed 100%
        1: 3495:        int stricmp(const char *a, const char *b) {
        5: 3496:            for (;; a++, b++) {
        1: 3496-block  0
        4: 3496-block  1
        5: 3497:                const int d = tolower(*a) - tolower(*b);
        5: 3498:                if (d != 0 || !*a)
        5: 3498-block  0
branch  0 taken 5
branch  1 taken 0
        5: 3498-block  1
branch  2 taken 4
branch  3 taken 1
        1: 3499:                    return d;
        1: 3499-block  0
        4: 3500:            }
        4: 3500-block  0
        -: 3501:        }
        -: 3502:
        -: 3503:        struct Endianness {
        -: 3504:            enum Arch {
        -: 3505:                Big,
        -: 3506:                Little
        -: 3507:            };
        -: 3508:
        -: 3509:            static Arch which() {
        -: 3510:                int x = 1;
        -: 3511:                // casting any data pointer to char* is allowed
        -: 3512:                auto ptr = reinterpret_cast<char *>(&x);
        -: 3513:                if (*ptr)
        -: 3514:                    return Little;
        -: 3515:                return Big;
        -: 3516:            }
        -: 3517:        };
        -: 3518:    } // namespace
        -: 3519:
        -: 3520:    namespace detail {
function _ZN7doctest6detail3$_0C1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail3$_0D1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail3$_0C2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail3$_0D2Ev called 0 returned 0% blocks executed 0%
    #####: 3521:        DOCTEST_THREAD_LOCAL class {
    $$$$$: 3521-block  0
    $$$$$: 3521-block  1
    $$$$$: 3521-block  2
        -: 3522:            std::vector<std::streampos> stack;
        -: 3523:            std::stringstream ss;
        -: 3524:
        -: 3525:        public:
function _ZN7doctest6detail3$_04pushEv called 0 returned 0% blocks executed 0%
    #####: 3526:            std::ostream *push() {
    #####: 3527:                stack.push_back(ss.tellp());
    #####: 3528:                return &ss;
    $$$$$: 3528-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3528-block  1
    $$$$$: 3528-block  2
        -: 3529:            }
        -: 3530:
function _ZN7doctest6detail3$_03popEv called 0 returned 0% blocks executed 0%
    #####: 3531:            String pop() {
    #####: 3532:                if (stack.empty())
    $$$$$: 3532-block  0
branch  0 never executed
branch  1 never executed
    #####: 3533:                    DOCTEST_INTERNAL_ERROR("TLSS was empty when trying to pop!");
    $$$$$: 3533-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3533-block  1
    $$$$$: 3533-block  2
    $$$$$: 3533-block  3
        -: 3534:
    #####: 3535:                std::streampos pos = stack.back();
    #####: 3536:                stack.pop_back();
    #####: 3537:                unsigned sz = static_cast<unsigned>(ss.tellp() - pos);
    #####: 3538:                ss.rdbuf()->pubseekpos(pos, std::ios::in | std::ios::out);
    #####: 3539:                return String(ss, sz);
    $$$$$: 3539-block  0
    #####: 3540:            }
        -: 3541:        } g_oss;
        -: 3542:
function _ZN7doctest6detail8tlssPushEv called 0 returned 0% blocks executed 0%
    #####: 3543:        std::ostream *tlssPush() {
    #####: 3544:            return g_oss.push();
    $$$$$: 3544-block  0
        -: 3545:        }
        -: 3546:
function _ZN7doctest6detail7tlssPopEv called 0 returned 0% blocks executed 0%
    #####: 3547:        String tlssPop() {
    #####: 3548:            return g_oss.pop();
    $$$$$: 3548-block  0
        -: 3549:        }
        -: 3550:
        -: 3551:#ifndef DOCTEST_CONFIG_DISABLE
        -: 3552:
        -: 3553:        namespace timer_large_integer {
        -: 3554:
        -: 3555:#if defined(DOCTEST_PLATFORM_WINDOWS)
        -: 3556:            using type = ULONGLONG;
        -: 3557:#else // DOCTEST_PLATFORM_WINDOWS
        -: 3558:            using type = std::uint64_t;
        -: 3559:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 3560:        }
        -: 3561:
        -: 3562:        using ticks_t = timer_large_integer::type;
        -: 3563:
        -: 3564:#ifdef DOCTEST_CONFIG_GETCURRENTTICKS
        -: 3565:        ticks_t getCurrentTicks() { return DOCTEST_CONFIG_GETCURRENTTICKS(); }
        -: 3566:#elif defined(DOCTEST_PLATFORM_WINDOWS)
        -: 3567:                                                                                                                                ticks_t getCurrentTicks() {
        -: 3568:        static LARGE_INTEGER hz = { {0} }, hzo = { {0} };
        -: 3569:        if(!hz.QuadPart) {
        -: 3570:            QueryPerformanceFrequency(&hz);
        -: 3571:            QueryPerformanceCounter(&hzo);
        -: 3572:        }
        -: 3573:        LARGE_INTEGER t;
        -: 3574:        QueryPerformanceCounter(&t);
        -: 3575:        return ((t.QuadPart - hzo.QuadPart) * LONGLONG(1000000)) / hz.QuadPart;
        -: 3576:    }
        -: 3577:#else  // DOCTEST_PLATFORM_WINDOWS
        -: 3578:
function _ZN7doctest6detail15getCurrentTicksEv called 2 returned 100% blocks executed 100%
        2: 3579:        ticks_t getCurrentTicks() {
        -: 3580:            timeval t;
        2: 3581:            gettimeofday(&t, nullptr);
        2: 3582:            return static_cast<ticks_t>(t.tv_sec) * 1000000 + static_cast<ticks_t>(t.tv_usec);
        2: 3582-block  0
        -: 3583:        }
        -: 3584:
        -: 3585:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 3586:
function _ZN7doctest6detail5TimerC1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest6detail5TimerC2Ev called 1 returned 100% blocks executed 100%
        1: 3587:        struct Timer {
        1: 3587-block  0
function _ZN7doctest6detail5Timer5startEv called 1 returned 100% blocks executed 100%
        1: 3588:            void start() { m_ticks = getCurrentTicks(); }
        1: 3588-block  0
        -: 3589:
        -: 3590:            unsigned int getElapsedMicroseconds() const {
        -: 3591:                return static_cast<unsigned int>(getCurrentTicks() - m_ticks);
        -: 3592:            }
        -: 3593:
        -: 3594:            //unsigned int getElapsedMilliseconds() const {
        -: 3595:            //    return static_cast<unsigned int>(getElapsedMicroseconds() / 1000);
        -: 3596:            //}
function _ZNK7doctest6detail5Timer17getElapsedSecondsEv called 1 returned 100% blocks executed 100%
        1: 3597:            double getElapsedSeconds() const { return static_cast<double>(getCurrentTicks() - m_ticks) / 1000000.0; }
        1: 3597-block  0
        -: 3598:
        -: 3599:        private:
        1: 3600:            ticks_t m_ticks = 0;
        -: 3601:        };
        -: 3602:
        -: 3603:#ifdef DOCTEST_CONFIG_NO_MULTITHREADING
        -: 3604:                                                                                                                                template <typename T>
        -: 3605:    using Atomic = T;
        -: 3606:#else // DOCTEST_CONFIG_NO_MULTITHREADING
        -: 3607:        template<typename T>
        -: 3608:        using Atomic = std::atomic<T>;
        -: 3609:#endif // DOCTEST_CONFIG_NO_MULTITHREADING
        -: 3610:
        -: 3611:#if defined(DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS) || defined(DOCTEST_CONFIG_NO_MULTITHREADING)
        -: 3612:                                                                                                                                template <typename T>
        -: 3613:    using MultiLaneAtomic = Atomic<T>;
        -: 3614:#else // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS
        -: 3615:
        -: 3616:        // Provides a multilane implementation of an atomic variable that supports add, sub, load,
        -: 3617:        // store. Instead of using a single atomic variable, this splits up into multiple ones,
        -: 3618:        // each sitting on a separate cache line. The goal is to provide a speedup when most
        -: 3619:        // operations are modifying. It achieves this with two properties:
        -: 3620:        //
        -: 3621:        // * Multiple atomics are used, so chance of congestion from the same atomic is reduced.
        -: 3622:        // * Each atomic sits on a separate cache line, so false sharing is reduced.
        -: 3623:        //
        -: 3624:        // The disadvantage is that there is a small overhead due to the use of TLS, and load/store
        -: 3625:        // is slower because all atomics have to be accessed.
        -: 3626:        template<typename T>
function _ZN7doctest6detail15MultiLaneAtomicIiEC1Ev called 2 returned 100% blocks executed 100%
function _ZN7doctest6detail15MultiLaneAtomicIiEC2Ev called 2 returned 100% blocks executed 75%
        2: 3627:        class MultiLaneAtomic {
        2: 3627-block  0
    $$$$$: 3627-block  1
        2: 3627-block  2
function _ZN7doctest6detail15MultiLaneAtomicIiE22CacheLineAlignedAtomicC1Ev called 64 returned 100% blocks executed 100%
function _ZN7doctest6detail15MultiLaneAtomicIiE22CacheLineAlignedAtomicC2Ev called 64 returned 100% blocks executed 100%
       64: 3628:            struct CacheLineAlignedAtomic {
       64: 3628-block  0
       64: 3629:                Atomic<T> atomic{};
        -: 3630:                char padding[DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE - sizeof(Atomic<T>)];
        -: 3631:            };
        -: 3632:            CacheLineAlignedAtomic m_atomics[DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES];
        -: 3633:
        -: 3634:            static_assert(sizeof(CacheLineAlignedAtomic) == DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE,
        -: 3635:                          "guarantee one atomic takes exactly one cache line");
        -: 3636:
        -: 3637:        public:
        -: 3638:            T operator++() DOCTEST_NOEXCEPT { return fetch_add(1) + 1; }
        -: 3639:
function _ZN7doctest6detail15MultiLaneAtomicIiEppEi called 23 returned 100% blocks executed 100%
       23: 3640:            T operator++(int) DOCTEST_NOEXCEPT { return fetch_add(1); }
       23: 3640-block  0
        -: 3641:
function _ZN7doctest6detail15MultiLaneAtomicIiE9fetch_addEiNSt3__112memory_orderE called 23 returned 100% blocks executed 100%
       23: 3642:            T fetch_add(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT {
       23: 3643:                return myAtomic().fetch_add(arg, order);
       23: 3643-block  0
        -: 3644:            }
        -: 3645:
        -: 3646:            T fetch_sub(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT {
        -: 3647:                return myAtomic().fetch_sub(arg, order);
        -: 3648:            }
        -: 3649:
function _ZNK7doctest6detail15MultiLaneAtomicIiEcviEv called 4 returned 100% blocks executed 100%
        4: 3650:            operator T() const DOCTEST_NOEXCEPT { return load(); }
        4: 3650-block  0
        -: 3651:
function _ZNK7doctest6detail15MultiLaneAtomicIiE4loadENSt3__112memory_orderE called 4 returned 100% blocks executed 100%
        4: 3652:            T load(std::memory_order order = std::memory_order_seq_cst) const DOCTEST_NOEXCEPT {
        4: 3653:                auto result = T();
      132: 3654:                for (auto const &c: m_atomics) {
        4: 3654-block  0
      132: 3654-block  1
branch  0 taken 128
branch  1 taken 4
      128: 3654-block  2
      128: 3654-block  3
      128: 3654-block  4
      128: 3655:                    result += c.atomic.load(order);
        -: 3656:                }
        4: 3657:                return result;
        4: 3657-block  0
        -: 3658:            }
        -: 3659:
function _ZN7doctest6detail15MultiLaneAtomicIiEaSEi called 2 returned 100% blocks executed 100%
        2: 3660:            T operator=(T desired) DOCTEST_NOEXCEPT { // lgtm [cpp/assignment-does-not-return-this]
        2: 3661:                store(desired);
        2: 3662:                return desired;
        2: 3662-block  0
        -: 3663:            }
        -: 3664:
function _ZN7doctest6detail15MultiLaneAtomicIiE5storeEiNSt3__112memory_orderE called 2 returned 100% blocks executed 100%
        2: 3665:            void store(T desired, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT {
        -: 3666:                // first value becomes desired", all others become 0.
       66: 3667:                for (auto &c: m_atomics) {
        2: 3667-block  0
       66: 3667-block  1
branch  0 taken 64
branch  1 taken 2
       64: 3667-block  2
       64: 3667-block  3
       64: 3667-block  4
       64: 3668:                    c.atomic.store(desired, order);
       64: 3669:                    desired = {};
        -: 3670:                }
        2: 3671:            }
        2: 3671-block  0
        -: 3672:
        -: 3673:        private:
        -: 3674:            // Each thread has a different atomic that it operates on. If more than NumLanes threads
        -: 3675:            // use this, some will use the same atomic. So performance will degrade a bit, but still
        -: 3676:            // everything will work.
        -: 3677:            //
        -: 3678:            // The logic here is a bit tricky. The call should be as fast as possible, so that there
        -: 3679:            // is minimal to no overhead in determining the correct atomic for the current thread.
        -: 3680:            //
        -: 3681:            // 1. A global static counter laneCounter counts continuously up.
        -: 3682:            // 2. Each successive thread will use modulo operation of that counter so it gets an atomic
        -: 3683:            //    assigned in a round-robin fashion.
        -: 3684:            // 3. This tlsLaneIdx is stored in the thread local data, so it is directly available with
        -: 3685:            //    little overhead.
function _ZN7doctest6detail15MultiLaneAtomicIiE8myAtomicEv called 23 returned 100% blocks executed 100%
       23: 3686:            Atomic<T> &myAtomic() DOCTEST_NOEXCEPT {
        -: 3687:                static Atomic <size_t> laneCounter;
       23: 3688:                DOCTEST_THREAD_LOCAL size_t tlsLaneIdx =
       23: 3688-block  0
branch  0 taken 22
branch  1 taken 1
        1: 3688-block  1
        1: 3689:                        laneCounter++ % DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES;
        -: 3690:
       23: 3691:                return m_atomics[tlsLaneIdx].atomic;
       23: 3691-block  0
        -: 3692:            }
        -: 3693:        };
        -: 3694:
        -: 3695:#endif // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS
        -: 3696:
        -: 3697:        // this holds both parameters from the command line and runtime data for tests
function _ZN7doctest6detail12ContextStateC1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest6detail12ContextStateD1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest6detail12ContextStateC2Ev called 1 returned 100% blocks executed 50%
function _ZN7doctest6detail12ContextStateD2Ev called 1 returned 100% blocks executed 100%
        2: 3698:        struct ContextState : ContextOptions, TestRunStats, CurrentTestCaseStats {
        1: 3698-block  0
        1: 3698-block  1
    $$$$$: 3698-block  2
    $$$$$: 3698-block  3
        -: 3699:            MultiLaneAtomic<int> numAssertsCurrentTest_atomic;
        -: 3700:            MultiLaneAtomic<int> numAssertsFailedCurrentTest_atomic;
        -: 3701:
        1: 3702:            std::vector<std::vector<String>> filters = decltype(filters)(9); // 9 different filters
        1: 3702-block  0
branch  0 taken 1
branch  1 taken 0
        -: 3703:
        -: 3704:            std::vector<IReporter *> reporters_currently_used;
        -: 3705:
        1: 3706:            assert_handler ah = nullptr;
        -: 3707:
        -: 3708:            Timer timer;
        -: 3709:
        -: 3710:            std::vector<String> stringifiedContexts; // logging from INFO() due to an exception
        -: 3711:
        -: 3712:            // stuff for subcases
        -: 3713:            bool reachedLeaf;
        -: 3714:            std::vector<SubcaseSignature> subcaseStack;
        -: 3715:            std::vector<SubcaseSignature> nextSubcaseStack;
        -: 3716:            std::unordered_set<unsigned long long> fullyTraversedSubcases;
        -: 3717:            size_t currentSubcaseDepth;
        -: 3718:            Atomic<bool> shouldLogCurrentException;
        -: 3719:
function _ZN7doctest6detail12ContextState12resetRunDataEv called 1 returned 100% blocks executed 100%
        1: 3720:            void resetRunData() {
        1: 3721:                numTestCases = 0;
        1: 3722:                numTestCasesPassingFilters = 0;
        1: 3723:                numTestSuitesPassingFilters = 0;
        1: 3724:                numTestCasesFailed = 0;
        1: 3725:                numAsserts = 0;
        1: 3726:                numAssertsFailed = 0;
        1: 3727:                numAssertsCurrentTest = 0;
        1: 3728:                numAssertsFailedCurrentTest = 0;
        1: 3729:            }
        1: 3729-block  0
        -: 3730:
function _ZN7doctest6detail12ContextState20finalizeTestCaseDataEv called 1 returned 100% blocks executed 48%
        1: 3731:            void finalizeTestCaseData() {
        1: 3732:                seconds = timer.getElapsedSeconds();
        -: 3733:
        -: 3734:                // update the non-atomic counters
        1: 3735:                numAsserts += numAssertsCurrentTest_atomic;
        1: 3736:                numAssertsFailed += numAssertsFailedCurrentTest_atomic;
        1: 3737:                numAssertsCurrentTest = numAssertsCurrentTest_atomic;
        1: 3738:                numAssertsFailedCurrentTest = numAssertsFailedCurrentTest_atomic;
        -: 3739:
        1: 3740:                if (numAssertsFailedCurrentTest)
        1: 3740-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 3741:                    failure_flags |= TestCaseFailureReason::AssertFailure;
    $$$$$: 3741-block  0
        -: 3742:
        1: 3743:                if (Approx(currentTest->m_timeout).epsilon(DBL_EPSILON) != 0 &&
        1: 3743-block  0
branch  0 taken 1
branch  1 taken 0
        1: 3743-block  1
branch  2 taken 1
branch  3 taken 0
    #####: 3744:                    Approx(seconds).epsilon(DBL_EPSILON) > currentTest->m_timeout)
    $$$$$: 3744-block  0
    #####: 3745:                    failure_flags |= TestCaseFailureReason::Timeout;
    $$$$$: 3745-block  0
        -: 3746:
        1: 3747:                if (currentTest->m_should_fail) {
        1: 3747-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 3748:                    if (failure_flags) {
    $$$$$: 3748-block  0
branch  0 never executed
branch  1 never executed
    #####: 3749:                        failure_flags |= TestCaseFailureReason::ShouldHaveFailedAndDid;
    #####: 3750:                    } else {
    $$$$$: 3750-block  0
    #####: 3751:                        failure_flags |= TestCaseFailureReason::ShouldHaveFailedButDidnt;
    $$$$$: 3751-block  0
        -: 3752:                    }
        1: 3753:                } else if (failure_flags && currentTest->m_may_fail) {
    $$$$$: 3753-block  0
        1: 3753-block  1
branch  0 taken 0
branch  1 taken 1
    $$$$$: 3753-block  2
branch  2 never executed
branch  3 never executed
    #####: 3754:                    failure_flags |= TestCaseFailureReason::CouldHaveFailedAndDid;
        1: 3755:                } else if (currentTest->m_expected_failures > 0) {
    $$$$$: 3755-block  0
        1: 3755-block  1
branch  0 taken 1
branch  1 taken 0
    #####: 3756:                    if (numAssertsFailedCurrentTest == currentTest->m_expected_failures) {
    $$$$$: 3756-block  0
branch  0 never executed
branch  1 never executed
    #####: 3757:                        failure_flags |= TestCaseFailureReason::FailedExactlyNumTimes;
    #####: 3758:                    } else {
    $$$$$: 3758-block  0
    #####: 3759:                        failure_flags |= TestCaseFailureReason::DidntFailExactlyNumTimes;
    $$$$$: 3759-block  0
        -: 3760:                    }
    #####: 3761:                }
    $$$$$: 3761-block  0
        -: 3762:
        2: 3763:                bool ok_to_fail = (TestCaseFailureReason::ShouldHaveFailedAndDid & failure_flags) ||
        1: 3763-block  0
branch  0 taken 1
branch  1 taken 0
        1: 3764:                                  (TestCaseFailureReason::CouldHaveFailedAndDid & failure_flags) ||
        1: 3764-block  0
branch  0 taken 0
branch  1 taken 1
        1: 3764-block  1
        1: 3765:                                  (TestCaseFailureReason::FailedExactlyNumTimes & failure_flags);
        -: 3766:
        -: 3767:                // if any subcase has failed - the whole test case has failed
        1: 3768:                testCaseSuccess = !(failure_flags && !ok_to_fail);
        1: 3768-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 3768-block  1
        1: 3769:                if (!testCaseSuccess)
        1: 3769-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 3770:                    numTestCasesFailed++;
    $$$$$: 3770-block  0
        1: 3771:            }
        1: 3771-block  0
        -: 3772:        };
        -: 3773:
        -: 3774:        ContextState *g_cs = nullptr;
        -: 3775:
        -: 3776:        // used to avoid locks for the debug output
        -: 3777:        // TODO: figure out if this is indeed necessary/correct - seems like either there still
        -: 3778:        // could be a race or that there wouldn't be a race even if using the context directly
        -: 3779:        DOCTEST_THREAD_LOCAL bool g_no_colors;
        -: 3780:
        -: 3781:#endif // DOCTEST_CONFIG_DISABLE
        -: 3782:    } // namespace detail
        -: 3783:
function _ZN7doctest6String8allocateEj called 104 returned 100% blocks executed 100%
      104: 3784:    char *String::allocate(size_type sz) {
      104: 3785:        if (sz <= last) {
      104: 3785-block  0
branch  0 taken 97
branch  1 taken 7
       97: 3786:            buf[sz] = '\0';
       97: 3787:            setLast(last - sz);
       97: 3788:            return buf;
       97: 3788-block  0
        -: 3789:        } else {
        7: 3790:            setOnHeap();
        7: 3791:            data.size = sz;
        7: 3792:            data.capacity = data.size + 1;
        7: 3793:            data.ptr = new char[data.capacity];
        7: 3794:            data.ptr[sz] = '\0';
        7: 3795:            return data.ptr;
        7: 3795-block  0
        -: 3796:        }
      104: 3797:    }
      104: 3797-block  0
        -: 3798:
function _ZN7doctest6String9setOnHeapEv called 8 returned 100% blocks executed 100%
        8: 3799:    void String::setOnHeap() noexcept { *reinterpret_cast<unsigned char *>(&buf[last]) = 128; }
        8: 3799-block  0
        -: 3800:
function _ZN7doctest6String7setLastEj called 380 returned 100% blocks executed 100%
      380: 3801:    void String::setLast(size_type in) noexcept { buf[last] = char(in); }
      380: 3801-block  0
        -: 3802:
function _ZN7doctest6String7setSizeEj called 0 returned 0% blocks executed 0%
    #####: 3803:    void String::setSize(size_type sz) noexcept {
    #####: 3804:        if (isOnStack()) {
    $$$$$: 3804-block  0
branch  0 never executed
branch  1 never executed
    #####: 3805:            buf[sz] = '\0';
    #####: 3806:            setLast(last - sz);
    #####: 3807:        } else {
    $$$$$: 3807-block  0
    #####: 3808:            data.ptr[sz] = '\0';
    #####: 3809:            data.size = sz;
    $$$$$: 3809-block  0
        -: 3810:        }
    #####: 3811:    }
    $$$$$: 3811-block  0
        -: 3812:
function _ZN7doctest6String4copyERKS0_ called 264 returned 100% blocks executed 100%
      264: 3813:    void String::copy(const String &other) {
      264: 3814:        if (other.isOnStack()) {
      264: 3814-block  0
branch  0 taken 260
branch  1 taken 4
      260: 3815:            memcpy(buf, other.buf, len);
      260: 3816:        } else {
      260: 3816-block  0
        4: 3817:            memcpy(allocate(other.data.size), other.data.ptr, other.data.size);
        4: 3817-block  0
        -: 3818:        }
      264: 3819:    }
      264: 3819-block  0
        -: 3820:
function _ZN7doctest6StringC2Ev called 275 returned 100% blocks executed 100%
function _ZN7doctest6StringC1Ev called 275 returned 100% blocks executed 100%
      550: 3821:    String::String() noexcept {
      275: 3822:        buf[0] = '\0';
      275: 3823:        setLast();
      550: 3824:    }
      275: 3824-block  0
      275: 3824-block  1
        -: 3825:
function _ZN7doctest6StringD2Ev called 535 returned 100% blocks executed 100%
function _ZN7doctest6StringD1Ev called 535 returned 100% blocks executed 100%
     1070: 3826:    String::~String() {
      535: 3827:        if (!isOnStack())
      535: 3827-block  0
branch  0 taken 529
branch  1 taken 6
        6: 3828:            delete[] data.ptr;
        6: 3828-block  0
branch  0 taken 6
branch  1 taken 0
        6: 3828-block  1
        6: 3828-block  2
     1070: 3829:    } // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)
      535: 3829-block  0
      535: 3829-block  1
        -: 3830:
function _ZN7doctest6StringC2EPKc called 0 returned 0% blocks executed 0%
function _ZN7doctest6StringC1EPKc called 100 returned 100% blocks executed 100%
      100: 3831:    String::String(const char *in)
      100: 3832:            : String(in, strlen(in)) {}
    $$$$$: 3832-block  0
      100: 3832-block  1
        -: 3833:
function _ZN7doctest6StringC2EPKcj called 100 returned 100% blocks executed 100%
function _ZN7doctest6StringC1EPKcj called 100 returned 100% blocks executed 100%
      200: 3834:    String::String(const char *in, size_type in_size) {
      100: 3835:        memcpy(allocate(in_size), in, in_size);
      200: 3836:    }
      100: 3836-block  0
      100: 3836-block  1
        -: 3837:
function _ZN7doctest6StringC2ERNSt3__113basic_istreamIcNS1_11char_traitsIcEEEEj called 0 returned 0% blocks executed 0%
function _ZN7doctest6StringC1ERNSt3__113basic_istreamIcNS1_11char_traitsIcEEEEj called 0 returned 0% blocks executed 0%
    #####: 3838:    String::String(std::istream &in, size_type in_size) {
    #####: 3839:        in.read(allocate(in_size), in_size);
    #####: 3840:    }
    $$$$$: 3840-block  0
    $$$$$: 3840-block  1
        -: 3841:
function _ZN7doctest6StringC2ERKS0_ called 162 returned 100% blocks executed 100%
function _ZN7doctest6StringC1ERKS0_ called 162 returned 100% blocks executed 100%
      324: 3842:    String::String(const String &other) { copy(other); }
      162: 3842-block  0
      162: 3842-block  1
        -: 3843:
function _ZN7doctest6StringaSERKS0_ called 102 returned 100% blocks executed 57%
      102: 3844:    String &String::operator=(const String &other) {
      102: 3845:        if (this != &other) {
      102: 3845-block  0
branch  0 taken 0
branch  1 taken 102
      102: 3846:            if (!isOnStack())
      102: 3846-block  0
branch  0 taken 102
branch  1 taken 0
    #####: 3847:                delete[] data.ptr;
    $$$$$: 3847-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3847-block  1
    $$$$$: 3847-block  2
        -: 3848:
      102: 3849:            copy(other);
      102: 3850:        }
      102: 3850-block  0
        -: 3851:
      102: 3852:        return *this;
      102: 3852-block  0
        -: 3853:    }
        -: 3854:
function _ZN7doctest6StringpLERKS0_ called 2 returned 100% blocks executed 78%
        2: 3855:    String &String::operator+=(const String &other) {
        2: 3856:        const size_type my_old_size = size();
        2: 3857:        const size_type other_size = other.size();
        2: 3858:        const size_type total_size = my_old_size + other_size;
        2: 3859:        if (isOnStack()) {
        2: 3859-block  0
branch  0 taken 1
branch  1 taken 1
        1: 3860:            if (total_size < len) {
        1: 3860-block  0
branch  0 taken 0
branch  1 taken 1
        -: 3861:                // append to the current stack space
    #####: 3862:                memcpy(buf + my_old_size, other.c_str(), other_size + 1);
        -: 3863:                // NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)
    #####: 3864:                setLast(last - total_size);
    #####: 3865:            } else {
    $$$$$: 3865-block  0
        -: 3866:                // alloc new chunk
        1: 3867:                char *temp = new char[total_size + 1];
        -: 3868:                // copy current data to new location before writing in the union
        1: 3869:                memcpy(temp, buf, my_old_size); // skip the +1 ('\0') for speed
        -: 3870:                // update data in union
        1: 3871:                setOnHeap();
        1: 3872:                data.size = total_size;
        1: 3873:                data.capacity = data.size + 1;
        1: 3874:                data.ptr = temp;
        -: 3875:                // transfer the rest of the data
        1: 3876:                memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);
        1: 3876-block  0
        -: 3877:            }
        1: 3878:        } else {
        1: 3878-block  0
        1: 3879:            if (data.capacity > total_size) {
        1: 3879-block  0
branch  0 taken 0
branch  1 taken 1
        -: 3880:                // append to the current heap block
    #####: 3881:                data.size = total_size;
    #####: 3882:                memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);
    #####: 3883:            } else {
    $$$$$: 3883-block  0
        -: 3884:                // resize
        1: 3885:                data.capacity *= 2;
        1: 3886:                if (data.capacity <= total_size)
        1: 3886-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 3887:                    data.capacity = total_size + 1;
    $$$$$: 3887-block  0
        -: 3888:                // alloc new chunk
        1: 3889:                char *temp = new char[data.capacity];
        -: 3890:                // copy current data to new location before releasing it
        1: 3891:                memcpy(temp, data.ptr, my_old_size); // skip the +1 ('\0') for speed
        -: 3892:                // release old chunk
        1: 3893:                delete[] data.ptr;
        1: 3893-block  0
branch  0 taken 0
branch  1 taken 1
        1: 3893-block  1
        -: 3894:                // update the rest of the union members
        1: 3895:                data.size = total_size;
        1: 3896:                data.ptr = temp;
        -: 3897:                // transfer the rest of the data
        1: 3898:                memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);
        1: 3898-block  0
        -: 3899:            }
        -: 3900:        }
        -: 3901:
        2: 3902:        return *this;
        2: 3902-block  0
        -: 3903:    }
        -: 3904:
function _ZN7doctest6StringC2EOS0_ called 4 returned 100% blocks executed 100%
function _ZN7doctest6StringC1EOS0_ called 4 returned 100% blocks executed 100%
        8: 3905:    String::String(String &&other) noexcept {
        4: 3906:        memcpy(buf, other.buf, len);
        4: 3907:        other.buf[0] = '\0';
        4: 3908:        other.setLast();
        8: 3909:    }
        4: 3909-block  0
        4: 3909-block  1
        -: 3910:
function _ZN7doctest6StringaSEOS0_ called 4 returned 100% blocks executed 100%
        4: 3911:    String &String::operator=(String &&other) noexcept {
        4: 3912:        if (this != &other) {
        4: 3912-block  0
branch  0 taken 0
branch  1 taken 4
        4: 3913:            if (!isOnStack())
        4: 3913-block  0
branch  0 taken 3
branch  1 taken 1
        1: 3914:                delete[] data.ptr;
        1: 3914-block  0
branch  0 taken 1
branch  1 taken 0
        1: 3914-block  1
        1: 3914-block  2
        4: 3915:            memcpy(buf, other.buf, len);
        4: 3916:            other.buf[0] = '\0';
        4: 3917:            other.setLast();
        4: 3918:        }
        4: 3918-block  0
        4: 3919:        return *this;
        4: 3919-block  0
        -: 3920:    }
        -: 3921:
function _ZNK7doctest6StringixEj called 0 returned 0% blocks executed 0%
    #####: 3922:    char String::operator[](size_type i) const {
    #####: 3923:        return const_cast<String *>(this)->operator[](i);
    $$$$$: 3923-block  0
        -: 3924:    }
        -: 3925:
function _ZN7doctest6StringixEj called 0 returned 0% blocks executed 0%
    #####: 3926:    char &String::operator[](size_type i) {
    #####: 3927:        if (isOnStack())
    $$$$$: 3927-block  0
branch  0 never executed
branch  1 never executed
    #####: 3928:            return reinterpret_cast<char *>(buf)[i];
    $$$$$: 3928-block  0
    #####: 3929:        return data.ptr[i];
    $$$$$: 3929-block  0
    #####: 3930:    }
    $$$$$: 3930-block  0
        -: 3931:
        -: 3932:    DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wmaybe-uninitialized")
        -: 3933:
function _ZNK7doctest6String4sizeEv called 28 returned 100% blocks executed 100%
       28: 3934:    String::size_type String::size() const {
       28: 3935:        if (isOnStack())
       28: 3935-block  0
branch  0 taken 25
branch  1 taken 3
       25: 3936:            return last - (size_type(buf[last]) & 31); // using "last" would work only if "len" is 32
       25: 3936-block  0
        3: 3937:        return data.size;
        3: 3937-block  0
       28: 3938:    }
       28: 3938-block  0
        -: 3939:
        -: 3940:    DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 3941:
function _ZNK7doctest6String8capacityEv called 0 returned 0% blocks executed 0%
    #####: 3942:    String::size_type String::capacity() const {
    #####: 3943:        if (isOnStack())
    $$$$$: 3943-block  0
branch  0 never executed
branch  1 never executed
    #####: 3944:            return len;
    $$$$$: 3944-block  0
    #####: 3945:        return data.capacity;
    $$$$$: 3945-block  0
    #####: 3946:    }
    $$$$$: 3946-block  0
        -: 3947:
function _ZNO7doctest6String6substrEjj called 0 returned 0% blocks executed 0%
    #####: 3948:    String String::substr(size_type pos, size_type cnt) &&{
    #####: 3949:        cnt = std::min(cnt, size() - 1 - pos);
    #####: 3950:        char *cptr = c_str();
    #####: 3951:        memmove(cptr, cptr + pos, cnt);
    #####: 3952:        setSize(cnt);
    #####: 3953:        return std::move(*this);
    $$$$$: 3953-block  0
        -: 3954:    }
        -: 3955:
function _ZNKR7doctest6String6substrEjj called 0 returned 0% blocks executed 0%
    #####: 3956:    String String::substr(size_type pos, size_type cnt) const &{
    #####: 3957:        cnt = std::min(cnt, size() - 1 - pos);
    #####: 3958:        return String{c_str() + pos, cnt};
    $$$$$: 3958-block  0
        -: 3959:    }
        -: 3960:
function _ZNK7doctest6String4findEcj called 0 returned 0% blocks executed 0%
    #####: 3961:    String::size_type String::find(char ch, size_type pos) const {
    #####: 3962:        const char *begin = c_str();
    #####: 3963:        const char *end = begin + size();
    #####: 3964:        const char *it = begin + pos;
    #####: 3965:        for (; it < end && *it != ch; it++);
    $$$$$: 3965-block  0
    $$$$$: 3965-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3965-block  2
    $$$$$: 3965-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3965-block  4
    $$$$$: 3965-block  5
    #####: 3966:        if (it < end) { return static_cast<size_type>(it - begin); }
    $$$$$: 3966-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3966-block  1
    #####: 3967:        else { return npos; }
    $$$$$: 3967-block  0
    #####: 3968:    }
    $$$$$: 3968-block  0
        -: 3969:
function _ZNK7doctest6String5rfindEcj called 0 returned 0% blocks executed 0%
    #####: 3970:    String::size_type String::rfind(char ch, size_type pos) const {
    #####: 3971:        const char *begin = c_str();
    #####: 3972:        const char *it = begin + std::min(pos, size() - 1);
    #####: 3973:        for (; it >= begin && *it != ch; it--);
    $$$$$: 3973-block  0
    $$$$$: 3973-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 3973-block  2
    $$$$$: 3973-block  3
branch  2 never executed
branch  3 never executed
    $$$$$: 3973-block  4
    $$$$$: 3973-block  5
    #####: 3974:        if (it >= begin) { return static_cast<size_type>(it - begin); }
    $$$$$: 3974-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3974-block  1
    #####: 3975:        else { return npos; }
    $$$$$: 3975-block  0
    #####: 3976:    }
    $$$$$: 3976-block  0
        -: 3977:
function _ZNK7doctest6String7compareEPKcb called 11 returned 100% blocks executed 100%
       11: 3978:    int String::compare(const char *other, bool no_case) const {
       11: 3979:        if (no_case)
       11: 3979-block  0
branch  0 taken 1
branch  1 taken 10
        1: 3980:            return doctest::stricmp(c_str(), other);
        1: 3980-block  0
       10: 3981:        return std::strcmp(c_str(), other);
       10: 3981-block  0
       11: 3982:    }
       11: 3982-block  0
        -: 3983:
function _ZNK7doctest6String7compareERKS0_b called 10 returned 100% blocks executed 100%
       10: 3984:    int String::compare(const String &other, bool no_case) const {
       10: 3985:        return compare(other.c_str(), no_case);
       10: 3985-block  0
        -: 3986:    }
        -: 3987:
function _ZN7doctestplERKNS_6StringES2_ called 2 returned 100% blocks executed 60%
        2: 3988:    String operator+(const String &lhs, const String &rhs) { return String(lhs) += rhs; }
        2: 3988-block  0
branch  0 taken 2
branch  1 taken 0
        2: 3988-block  1
branch  2 taken 2
branch  3 taken 0
        2: 3988-block  2
    $$$$$: 3988-block  3
    $$$$$: 3988-block  4
        -: 3989:
function _ZN7doctesteqERKNS_6StringES2_ called 7 returned 100% blocks executed 100%
        7: 3990:    bool operator==(const String &lhs, const String &rhs) { return lhs.compare(rhs) == 0; }
        7: 3990-block  0
        -: 3991:
function _ZN7doctestneERKNS_6StringES2_ called 0 returned 0% blocks executed 0%
    #####: 3992:    bool operator!=(const String &lhs, const String &rhs) { return lhs.compare(rhs) != 0; }
    $$$$$: 3992-block  0
        -: 3993:
function _ZN7doctestltERKNS_6StringES2_ called 3 returned 100% blocks executed 100%
        3: 3994:    bool operator<(const String &lhs, const String &rhs) { return lhs.compare(rhs) < 0; }
        3: 3994-block  0
        -: 3995:
function _ZN7doctestgtERKNS_6StringES2_ called 0 returned 0% blocks executed 0%
    #####: 3996:    bool operator>(const String &lhs, const String &rhs) { return lhs.compare(rhs) > 0; }
    $$$$$: 3996-block  0
        -: 3997:
function _ZN7doctestleERKNS_6StringES2_ called 0 returned 0% blocks executed 0%
    #####: 3998:    bool operator<=(const String &lhs, const String &rhs) { return (lhs != rhs) ? lhs.compare(rhs) < 0 : true; }
    $$$$$: 3998-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 3998-block  1
    $$$$$: 3998-block  2
    $$$$$: 3998-block  3
        -: 3999:
function _ZN7doctestgeERKNS_6StringES2_ called 0 returned 0% blocks executed 0%
    #####: 4000:    bool operator>=(const String &lhs, const String &rhs) { return (lhs != rhs) ? lhs.compare(rhs) > 0 : true; }
    $$$$$: 4000-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4000-block  1
    $$$$$: 4000-block  2
    $$$$$: 4000-block  3
        -: 4001:
function _ZN7doctestlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE called 0 returned 0% blocks executed 0%
    #####: 4002:    std::ostream &operator<<(std::ostream &s, const String &in) { return s << in.c_str(); }
    $$$$$: 4002-block  0
        -: 4003:
function _ZN7doctest8ContainsC2ERKNS_6StringE called 23 returned 100% blocks executed 100%
function _ZN7doctest8ContainsC1ERKNS_6StringE called 23 returned 100% blocks executed 100%
       46: 4004:    Contains::Contains(const String &str) : string(str) {}
       23: 4004-block  0
       23: 4004-block  1
        -: 4005:
function _ZNK7doctest8Contains9checkWithERKNS_6StringE called 0 returned 0% blocks executed 0%
    #####: 4006:    bool Contains::checkWith(const String &other) const {
    #####: 4007:        return strstr(other.c_str(), string.c_str()) != nullptr;
    $$$$$: 4007-block  0
        -: 4008:    }
        -: 4009:
function _ZN7doctest8toStringERKNS_8ContainsE called 0 returned 0% blocks executed 0%
    #####: 4010:    String toString(const Contains &in) {
    #####: 4011:        return "Contains( " + in.string + " )";
    $$$$$: 4011-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4011-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4011-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4011-block  3
    $$$$$: 4011-block  4
    $$$$$: 4011-block  5
    $$$$$: 4011-block  6
    $$$$$: 4011-block  7
    #####: 4012:    }
    $$$$$: 4012-block  0
    $$$$$: 4012-block  1
        -: 4013:
function _ZN7doctesteqERKNS_6StringERKNS_8ContainsE called 0 returned 0% blocks executed 0%
    #####: 4014:    bool operator==(const String &lhs, const Contains &rhs) { return rhs.checkWith(lhs); }
    $$$$$: 4014-block  0
        -: 4015:
function _ZN7doctesteqERKNS_8ContainsERKNS_6StringE called 0 returned 0% blocks executed 0%
    #####: 4016:    bool operator==(const Contains &lhs, const String &rhs) { return lhs.checkWith(rhs); }
    $$$$$: 4016-block  0
        -: 4017:
function _ZN7doctestneERKNS_6StringERKNS_8ContainsE called 0 returned 0% blocks executed 0%
    #####: 4018:    bool operator!=(const String &lhs, const Contains &rhs) { return !rhs.checkWith(lhs); }
    $$$$$: 4018-block  0
        -: 4019:
function _ZN7doctestneERKNS_8ContainsERKNS_6StringE called 0 returned 0% blocks executed 0%
    #####: 4020:    bool operator!=(const Contains &lhs, const String &rhs) { return !lhs.checkWith(rhs); }
    $$$$$: 4020-block  0
        -: 4021:
        -: 4022:    namespace {
        -: 4023:        void color_to_stream(std::ostream &, Color::Enum)DOCTEST_BRANCH_ON_DISABLED({}, ;)
        -: 4024:    } // namespace
        -: 4025:
        -: 4026:    namespace Color {
function _ZN7doctest5ColorlsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEENS0_4EnumE called 24 returned 100% blocks executed 100%
       24: 4027:        std::ostream &operator<<(std::ostream &s, Color::Enum code) {
       24: 4028:            color_to_stream(s, code);
       24: 4029:            return s;
       24: 4029-block  0
        -: 4030:        }
        -: 4031:    } // namespace Color
        -: 4032:
        -: 4033:// clang-format off
function _ZN7doctest12assertStringENS_10assertType4EnumE called 0 returned 0% blocks executed 0%
    #####: 4034:    const char *assertString(assertType::Enum at) {
        -: 4035:        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4061) // enum 'x' in switch of enum 'y' is not explicitly handled
        -: 4036:#define DOCTEST_GENERATE_ASSERT_TYPE_CASE(assert_type) case assertType::DT_ ## assert_type: return #assert_type
        -: 4037:#define DOCTEST_GENERATE_ASSERT_TYPE_CASES(assert_type) \
        -: 4038:        DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN_ ## assert_type); \
        -: 4039:        DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK_ ## assert_type); \
        -: 4040:        DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE_ ## assert_type)
    #####: 4041:        switch (at) {
    $$$$$: 4041-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
branch 29 never executed
branch 30 never executed
branch 31 never executed
branch 32 never executed
branch 33 never executed
branch 34 never executed
branch 35 never executed
branch 36 never executed
branch 37 never executed
branch 38 never executed
branch 39 never executed
branch 40 never executed
branch 41 never executed
branch 42 never executed
branch 43 never executed
branch 44 never executed
branch 45 never executed
    #####: 4042:            DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN);
    $$$$$: 4042-block  0
    #####: 4043:            DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK);
    $$$$$: 4043-block  0
    #####: 4044:            DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE);
    $$$$$: 4044-block  0
        -: 4045:
    #####: 4046:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(FALSE);
    $$$$$: 4046-block  0
    $$$$$: 4046-block  1
    $$$$$: 4046-block  2
        -: 4047:
    #####: 4048:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS);
    $$$$$: 4048-block  0
    $$$$$: 4048-block  1
    $$$$$: 4048-block  2
        -: 4049:
    #####: 4050:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_AS);
    $$$$$: 4050-block  0
    $$$$$: 4050-block  1
    $$$$$: 4050-block  2
        -: 4051:
    #####: 4052:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH);
    $$$$$: 4052-block  0
    $$$$$: 4052-block  1
    $$$$$: 4052-block  2
        -: 4053:
    #####: 4054:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH_AS);
    $$$$$: 4054-block  0
    $$$$$: 4054-block  1
    $$$$$: 4054-block  2
        -: 4055:
    #####: 4056:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(NOTHROW);
    $$$$$: 4056-block  0
    $$$$$: 4056-block  1
    $$$$$: 4056-block  2
        -: 4057:
    #####: 4058:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(EQ);
    $$$$$: 4058-block  0
    $$$$$: 4058-block  1
    $$$$$: 4058-block  2
    #####: 4059:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(NE);
    $$$$$: 4059-block  0
    $$$$$: 4059-block  1
    $$$$$: 4059-block  2
    #####: 4060:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(GT);
    $$$$$: 4060-block  0
    $$$$$: 4060-block  1
    $$$$$: 4060-block  2
    #####: 4061:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(LT);
    $$$$$: 4061-block  0
    $$$$$: 4061-block  1
    $$$$$: 4061-block  2
    #####: 4062:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(GE);
    $$$$$: 4062-block  0
    $$$$$: 4062-block  1
    $$$$$: 4062-block  2
    #####: 4063:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(LE);
    $$$$$: 4063-block  0
    $$$$$: 4063-block  1
    $$$$$: 4063-block  2
        -: 4064:
    #####: 4065:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY);
    $$$$$: 4065-block  0
    $$$$$: 4065-block  1
    $$$$$: 4065-block  2
    #####: 4066:            DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY_FALSE);
    $$$$$: 4066-block  0
    $$$$$: 4066-block  1
    $$$$$: 4066-block  2
        -: 4067:
        -: 4068:            default:
    #####: 4069:                DOCTEST_INTERNAL_ERROR("Tried stringifying invalid assert type!");
    $$$$$: 4069-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4069-block  1
    $$$$$: 4069-block  2
    $$$$$: 4069-block  3
        -: 4070:        }
        -: 4071:        DOCTEST_MSVC_SUPPRESS_WARNING_POP
    #####: 4072:    }
    $$$$$: 4072-block  0
        -: 4073:// clang-format on
        -: 4074:
function _ZN7doctest13failureStringENS_10assertType4EnumE called 0 returned 0% blocks executed 0%
    #####: 4075:    const char *failureString(assertType::Enum at) {
    #####: 4076:        if (at & assertType::is_warn) //!OCLINT bitwise operator in conditional
    $$$$$: 4076-block  0
branch  0 never executed
branch  1 never executed
    #####: 4077:            return "WARNING";
    $$$$$: 4077-block  0
    #####: 4078:        if (at & assertType::is_check) //!OCLINT bitwise operator in conditional
    $$$$$: 4078-block  0
branch  0 never executed
branch  1 never executed
    #####: 4079:            return "ERROR";
    $$$$$: 4079-block  0
    #####: 4080:        if (at & assertType::is_require) //!OCLINT bitwise operator in conditional
    $$$$$: 4080-block  0
branch  0 never executed
branch  1 never executed
    #####: 4081:            return "FATAL ERROR";
    $$$$$: 4081-block  0
    #####: 4082:        return "";
    $$$$$: 4082-block  0
    #####: 4083:    }
    $$$$$: 4083-block  0
        -: 4084:
        -: 4085:    DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wnull-dereference")
        -: 4086:    DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wnull-dereference")
        -: 4087:
        -: 4088:// depending on the current options this will remove the path of filenames
function _ZN7doctest20skipPathFromFilenameEPKc called 0 returned 0% blocks executed 0%
    #####: 4089:    const char *skipPathFromFilename(const char *file) {
        -: 4090:#ifndef DOCTEST_CONFIG_DISABLE
    #####: 4091:        if (getContextOptions()->no_path_in_filenames) {
    $$$$$: 4091-block  0
branch  0 never executed
branch  1 never executed
    #####: 4092:            auto back = std::strrchr(file, '\\');
    #####: 4093:            auto forward = std::strrchr(file, '/');
    #####: 4094:            if (back || forward) {
    $$$$$: 4094-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4094-block  1
branch  2 never executed
branch  3 never executed
    #####: 4095:                if (back > forward)
    $$$$$: 4095-block  0
branch  0 never executed
branch  1 never executed
    #####: 4096:                    forward = back;
    $$$$$: 4096-block  0
    #####: 4097:                return forward + 1;
    $$$$$: 4097-block  0
        -: 4098:            }
    #####: 4099:        }
    $$$$$: 4099-block  0
        -: 4100:#endif // DOCTEST_CONFIG_DISABLE
    #####: 4101:        return file;
    $$$$$: 4101-block  0
    #####: 4102:    }
    $$$$$: 4102-block  0
        -: 4103:
        -: 4104:    DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 4105:    DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 4106:
function _ZNK7doctest16SubcaseSignatureeqERKS0_ called 63 returned 100% blocks executed 100%
       63: 4107:    bool SubcaseSignature::operator==(const SubcaseSignature &other) const {
       70: 4108:        return m_line == other.m_line
       63: 4108-block  0
       63: 4109:               && std::strcmp(m_file, other.m_file) == 0
       63: 4109-block  0
branch  0 taken 7
branch  1 taken 56
        7: 4110:               && m_name == other.m_name;
        7: 4110-block  0
branch  0 taken 7
branch  1 taken 0
        7: 4110-block  1
        -: 4111:    }
        -: 4112:
function _ZNK7doctest16SubcaseSignatureltERKS0_ called 0 returned 0% blocks executed 0%
    #####: 4113:    bool SubcaseSignature::operator<(const SubcaseSignature &other) const {
    #####: 4114:        if (m_line != other.m_line)
    $$$$$: 4114-block  0
branch  0 never executed
branch  1 never executed
    #####: 4115:            return m_line < other.m_line;
    $$$$$: 4115-block  0
    #####: 4116:        if (std::strcmp(m_file, other.m_file) != 0)
    $$$$$: 4116-block  0
branch  0 never executed
branch  1 never executed
    #####: 4117:            return std::strcmp(m_file, other.m_file) < 0;
    $$$$$: 4117-block  0
    #####: 4118:        return m_name.compare(other.m_name) < 0;
    $$$$$: 4118-block  0
    #####: 4119:    }
    $$$$$: 4119-block  0
        -: 4120:
function _ZN7doctest13IContextScopeD2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest13IContextScopeD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest13IContextScopeD0Ev called 0 returned 0% blocks executed 0%
    #####: 4121:    DOCTEST_DEFINE_INTERFACE(IContextScope)
    $$$$$: 4121-block  0
    $$$$$: 4121-block  1
    $$$$$: 4121-block  2
        -: 4122:
        -: 4123:    namespace detail {
function _ZN7doctest6detail8filldataIPKvE4fillEPNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEES3_ called 0 returned 0% blocks executed 0%
    #####: 4124:        void filldata<const void *>::fill(std::ostream *stream, const void *in) {
    #####: 4125:            if (in) { *stream << in; }
    $$$$$: 4125-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4125-block  1
    #####: 4126:            else { *stream << "nullptr"; }
    $$$$$: 4126-block  0
    #####: 4127:        }
    $$$$$: 4127-block  0
        -: 4128:
        -: 4129:        template<typename T>
function _ZN7doctest6detail11toStreamLitIfEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIdEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIeEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIiEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIjEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIsEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitItEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIlEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitImEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIxEENS_6StringET_ called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail11toStreamLitIyEENS_6StringET_ called 0 returned 0% blocks executed 0%
    #####: 4130:        String toStreamLit(T t) {
    #####: 4131:            std::ostream *os = tlssPush();
    #####: 4132:            os->operator<<(t);
    #####: 4133:            return tlssPop();
    $$$$$: 4133-block  0
    $$$$$: 4133-block  1
    $$$$$: 4133-block  2
    $$$$$: 4133-block  3
    $$$$$: 4133-block  4
    $$$$$: 4133-block  5
    $$$$$: 4133-block  6
    $$$$$: 4133-block  7
    $$$$$: 4133-block  8
    $$$$$: 4133-block  9
    $$$$$: 4133-block 10
        -: 4134:        }
        -: 4135:    }
        -: 4136:
        -: 4137:#ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 4138:    String toString(const char* in) { return String("\"") + (in ? in : "{null string}") + "\""; }
        -: 4139:#endif // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING
        -: 4140:
        -: 4141:#if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)
        -: 4142:                                                                                                                            // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183
        -: 4143:String toString(const std::string& in) { return in.c_str(); }
        -: 4144:#endif // VS 2019
        -: 4145:
function _ZN7doctest8toStringENS_6StringE called 0 returned 0% blocks executed 0%
    #####: 4146:    String toString(String in) { return in; }
    $$$$$: 4146-block  0
        -: 4147:
function _ZN7doctest8toStringEDn called 0 returned 0% blocks executed 0%
    #####: 4148:    String toString(std::nullptr_t) { return "nullptr"; }
    $$$$$: 4148-block  0
        -: 4149:
function _ZN7doctest8toStringEb called 0 returned 0% blocks executed 0%
    #####: 4150:    String toString(bool in) { return in ? "true" : "false"; }
    $$$$$: 4150-block  0
        -: 4151:
function _ZN7doctest8toStringEf called 0 returned 0% blocks executed 0%
    #####: 4152:    String toString(float in) { return toStreamLit(in); }
    $$$$$: 4152-block  0
        -: 4153:
function _ZN7doctest8toStringEd called 0 returned 0% blocks executed 0%
    #####: 4154:    String toString(double in) { return toStreamLit(in); }
    $$$$$: 4154-block  0
        -: 4155:
function _ZN7doctest8toStringEe called 0 returned 0% blocks executed 0%
    #####: 4156:    String toString(double long in) { return toStreamLit(in); }
    $$$$$: 4156-block  0
        -: 4157:
function _ZN7doctest8toStringEc called 0 returned 0% blocks executed 0%
    #####: 4158:    String toString(char in) { return toStreamLit(static_cast<signed>(in)); }
    $$$$$: 4158-block  0
        -: 4159:
function _ZN7doctest8toStringEa called 0 returned 0% blocks executed 0%
    #####: 4160:    String toString(char signed in) { return toStreamLit(static_cast<signed>(in)); }
    $$$$$: 4160-block  0
        -: 4161:
function _ZN7doctest8toStringEh called 0 returned 0% blocks executed 0%
    #####: 4162:    String toString(char unsigned in) { return toStreamLit(static_cast<unsigned>(in)); }
    $$$$$: 4162-block  0
        -: 4163:
function _ZN7doctest8toStringEs called 0 returned 0% blocks executed 0%
    #####: 4164:    String toString(short in) { return toStreamLit(in); }
    $$$$$: 4164-block  0
        -: 4165:
function _ZN7doctest8toStringEt called 0 returned 0% blocks executed 0%
    #####: 4166:    String toString(short unsigned in) { return toStreamLit(in); }
    $$$$$: 4166-block  0
        -: 4167:
function _ZN7doctest8toStringEi called 0 returned 0% blocks executed 0%
    #####: 4168:    String toString(signed in) { return toStreamLit(in); }
    $$$$$: 4168-block  0
        -: 4169:
function _ZN7doctest8toStringEj called 0 returned 0% blocks executed 0%
    #####: 4170:    String toString(unsigned in) { return toStreamLit(in); }
    $$$$$: 4170-block  0
        -: 4171:
function _ZN7doctest8toStringEl called 0 returned 0% blocks executed 0%
    #####: 4172:    String toString(long in) { return toStreamLit(in); }
    $$$$$: 4172-block  0
        -: 4173:
function _ZN7doctest8toStringEm called 0 returned 0% blocks executed 0%
    #####: 4174:    String toString(long unsigned in) { return toStreamLit(in); }
    $$$$$: 4174-block  0
        -: 4175:
function _ZN7doctest8toStringEx called 0 returned 0% blocks executed 0%
    #####: 4176:    String toString(long long in) { return toStreamLit(in); }
    $$$$$: 4176-block  0
        -: 4177:
function _ZN7doctest8toStringEy called 0 returned 0% blocks executed 0%
    #####: 4178:    String toString(long long unsigned in) { return toStreamLit(in); }
    $$$$$: 4178-block  0
        -: 4179:
function _ZN7doctest6ApproxC2Ed called 1 returned 100% blocks executed 100%
function _ZN7doctest6ApproxC1Ed called 1 returned 100% blocks executed 100%
        2: 4180:    Approx::Approx(double value)
        1: 4181:            : m_epsilon(static_cast<double>(std::numeric_limits<float>::epsilon()) * 100), m_scale(1.0),
        2: 4182:              m_value(value) {}
        1: 4182-block  0
        1: 4182-block  1
        -: 4183:
function _ZNK7doctest6ApproxclEd called 0 returned 0% blocks executed 0%
    #####: 4184:    Approx Approx::operator()(double value) const {
    #####: 4185:        Approx approx(value);
    #####: 4186:        approx.epsilon(m_epsilon);
    #####: 4187:        approx.scale(m_scale);
    #####: 4188:        return approx;
    $$$$$: 4188-block  0
        -: 4189:    }
        -: 4190:
function _ZN7doctest6Approx7epsilonEd called 1 returned 100% blocks executed 100%
        1: 4191:    Approx &Approx::epsilon(double newEpsilon) {
        1: 4192:        m_epsilon = newEpsilon;
        1: 4193:        return *this;
        1: 4193-block  0
        -: 4194:    }
        -: 4195:
function _ZN7doctest6Approx5scaleEd called 0 returned 0% blocks executed 0%
    #####: 4196:    Approx &Approx::scale(double newScale) {
    #####: 4197:        m_scale = newScale;
    #####: 4198:        return *this;
    $$$$$: 4198-block  0
        -: 4199:    }
        -: 4200:
function _ZN7doctesteqEdRKNS_6ApproxE called 1 returned 100% blocks executed 100%
        1: 4201:    bool operator==(double lhs, const Approx &rhs) {
        -: 4202:        // Thanks to Richard Harris for his help refining this formula
        2: 4203:        return std::fabs(lhs - rhs.m_value) <
        1: 4203-block  0
        1: 4203-block  1
        1: 4204:               rhs.m_epsilon * (rhs.m_scale + std::max<double>(std::fabs(lhs), std::fabs(rhs.m_value)));
        -: 4205:    }
        -: 4206:
function _ZN7doctesteqERKNS_6ApproxEd called 0 returned 0% blocks executed 0%
    #####: 4207:    bool operator==(const Approx &lhs, double rhs) { return operator==(rhs, lhs); }
    $$$$$: 4207-block  0
        -: 4208:
function _ZN7doctestneEdRKNS_6ApproxE called 0 returned 0% blocks executed 0%
    #####: 4209:    bool operator!=(double lhs, const Approx &rhs) { return !operator==(lhs, rhs); }
    $$$$$: 4209-block  0
        -: 4210:
function _ZN7doctestneERKNS_6ApproxEd called 0 returned 0% blocks executed 0%
    #####: 4211:    bool operator!=(const Approx &lhs, double rhs) { return !operator==(rhs, lhs); }
    $$$$$: 4211-block  0
        -: 4212:
function _ZN7doctestleEdRKNS_6ApproxE called 0 returned 0% blocks executed 0%
    #####: 4213:    bool operator<=(double lhs, const Approx &rhs) { return lhs < rhs.m_value || lhs == rhs; }
    $$$$$: 4213-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4213-block  1
    $$$$$: 4213-block  2
        -: 4214:
function _ZN7doctestleERKNS_6ApproxEd called 0 returned 0% blocks executed 0%
    #####: 4215:    bool operator<=(const Approx &lhs, double rhs) { return lhs.m_value < rhs || lhs == rhs; }
    $$$$$: 4215-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4215-block  1
    $$$$$: 4215-block  2
        -: 4216:
function _ZN7doctestgeEdRKNS_6ApproxE called 0 returned 0% blocks executed 0%
    #####: 4217:    bool operator>=(double lhs, const Approx &rhs) { return lhs > rhs.m_value || lhs == rhs; }
    $$$$$: 4217-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4217-block  1
    $$$$$: 4217-block  2
        -: 4218:
function _ZN7doctestgeERKNS_6ApproxEd called 0 returned 0% blocks executed 0%
    #####: 4219:    bool operator>=(const Approx &lhs, double rhs) { return lhs.m_value > rhs || lhs == rhs; }
    $$$$$: 4219-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4219-block  1
    $$$$$: 4219-block  2
        -: 4220:
function _ZN7doctestltEdRKNS_6ApproxE called 0 returned 0% blocks executed 0%
    #####: 4221:    bool operator<(double lhs, const Approx &rhs) { return lhs < rhs.m_value && lhs != rhs; }
    $$$$$: 4221-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4221-block  1
    $$$$$: 4221-block  2
        -: 4222:
function _ZN7doctestltERKNS_6ApproxEd called 0 returned 0% blocks executed 0%
    #####: 4223:    bool operator<(const Approx &lhs, double rhs) { return lhs.m_value < rhs && lhs != rhs; }
    $$$$$: 4223-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4223-block  1
    $$$$$: 4223-block  2
        -: 4224:
function _ZN7doctestgtEdRKNS_6ApproxE called 0 returned 0% blocks executed 0%
    #####: 4225:    bool operator>(double lhs, const Approx &rhs) { return lhs > rhs.m_value && lhs != rhs; }
    $$$$$: 4225-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4225-block  1
    $$$$$: 4225-block  2
        -: 4226:
function _ZN7doctestgtERKNS_6ApproxEd called 0 returned 0% blocks executed 0%
    #####: 4227:    bool operator>(const Approx &lhs, double rhs) { return lhs.m_value > rhs && lhs != rhs; }
    $$$$$: 4227-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4227-block  1
    $$$$$: 4227-block  2
        -: 4228:
function _ZN7doctest8toStringERKNS_6ApproxE called 0 returned 0% blocks executed 0%
    #####: 4229:    String toString(const Approx &in) {
    #####: 4230:        return "Approx( " + doctest::toString(in.m_value) + " )";
    $$$$$: 4230-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4230-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4230-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4230-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 4230-block  4
    $$$$$: 4230-block  5
    $$$$$: 4230-block  6
    $$$$$: 4230-block  7
    $$$$$: 4230-block  8
    $$$$$: 4230-block  9
    #####: 4231:    }
    $$$$$: 4231-block  0
    $$$$$: 4231-block  1
    $$$$$: 4231-block  2
        -: 4232:
function _ZN7doctest17getContextOptionsEv called 47 returned 100% blocks executed 100%
       47: 4233:    const ContextOptions *getContextOptions() { return DOCTEST_BRANCH_ON_DISABLED(nullptr, g_cs); }
       47: 4233-block  0
        -: 4234:
        -: 4235:    DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4738)
        -: 4236:
        -: 4237:    template<typename F>
function _ZNK7doctest5IsNaNIfEcvbEv called 0 returned 0% blocks executed 0%
function _ZNK7doctest5IsNaNIdEcvbEv called 0 returned 0% blocks executed 0%
function _ZNK7doctest5IsNaNIeEcvbEv called 0 returned 0% blocks executed 0%
    #####: 4238:    IsNaN<F>::operator bool() const {
    #####: 4239:        return std::isnan(value) ^ flipped;
    $$$$$: 4239-block  0
    $$$$$: 4239-block  1
    $$$$$: 4239-block  2
        -: 4240:    }
        -: 4241:
        -: 4242:    DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 4243:    template
        -: 4244:    struct DOCTEST_INTERFACE_DEF IsNaN<float>;
        -: 4245:    template
        -: 4246:    struct DOCTEST_INTERFACE_DEF IsNaN<double>;
        -: 4247:    template
        -: 4248:    struct DOCTEST_INTERFACE_DEF IsNaN<long double>;
        -: 4249:
        -: 4250:    template<typename F>
function _ZN7doctest8toStringIfEENS_6StringENS_5IsNaNIT_EE called 0 returned 0% blocks executed 0%
function _ZN7doctest8toStringIdEENS_6StringENS_5IsNaNIT_EE called 0 returned 0% blocks executed 0%
function _ZN7doctest8toStringIeEENS_6StringENS_5IsNaNIT_EE called 0 returned 0% blocks executed 0%
    #####: 4251:    String toString(IsNaN<F> in) {
    #####: 4252:        return String(in.flipped ? "! " : "") + "IsNaN( " + doctest::toString(in.value) + " )";
    $$$$$: 4252-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4252-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4252-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4252-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 4252-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 4252-block  5
branch 10 never executed
branch 11 never executed
    $$$$$: 4252-block  6
    $$$$$: 4252-block  7
    $$$$$: 4252-block  8
    $$$$$: 4252-block  9
    $$$$$: 4252-block 10
    $$$$$: 4252-block 11
    $$$$$: 4252-block 12
    $$$$$: 4252-block 13
    $$$$$: 4252-block 14
branch 12 never executed
branch 13 never executed
    $$$$$: 4252-block 15
branch 14 never executed
branch 15 never executed
    $$$$$: 4252-block 16
branch 16 never executed
branch 17 never executed
    $$$$$: 4252-block 17
branch 18 never executed
branch 19 never executed
    $$$$$: 4252-block 18
branch 20 never executed
branch 21 never executed
    $$$$$: 4252-block 19
branch 22 never executed
branch 23 never executed
    $$$$$: 4252-block 20
    $$$$$: 4252-block 21
    $$$$$: 4252-block 22
    $$$$$: 4252-block 23
    $$$$$: 4252-block 24
    $$$$$: 4252-block 25
    $$$$$: 4252-block 26
    $$$$$: 4252-block 27
    $$$$$: 4252-block 28
branch 24 never executed
branch 25 never executed
    $$$$$: 4252-block 29
branch 26 never executed
branch 27 never executed
    $$$$$: 4252-block 30
branch 28 never executed
branch 29 never executed
    $$$$$: 4252-block 31
branch 30 never executed
branch 31 never executed
    $$$$$: 4252-block 32
branch 32 never executed
branch 33 never executed
    $$$$$: 4252-block 33
branch 34 never executed
branch 35 never executed
    $$$$$: 4252-block 34
    $$$$$: 4252-block 35
    $$$$$: 4252-block 36
    $$$$$: 4252-block 37
    $$$$$: 4252-block 38
    $$$$$: 4252-block 39
    $$$$$: 4252-block 40
    $$$$$: 4252-block 41
    #####: 4253:    }
    $$$$$: 4253-block  0
    $$$$$: 4253-block  1
    $$$$$: 4253-block  2
    $$$$$: 4253-block  3
    $$$$$: 4253-block  4
    $$$$$: 4253-block  5
    $$$$$: 4253-block  6
    $$$$$: 4253-block  7
    $$$$$: 4253-block  8
    $$$$$: 4253-block  9
    $$$$$: 4253-block 10
    $$$$$: 4253-block 11
    $$$$$: 4253-block 12
    $$$$$: 4253-block 13
    $$$$$: 4253-block 14
        -: 4254:
function _ZN7doctest8toStringENS_5IsNaNIfEE called 0 returned 0% blocks executed 0%
    #####: 4255:    String toString(IsNaN<float> in) { return toString < float > (in); }
    $$$$$: 4255-block  0
        -: 4256:
function _ZN7doctest8toStringENS_5IsNaNIdEE called 0 returned 0% blocks executed 0%
    #####: 4257:    String toString(IsNaN<double> in) { return toString < double > (in); }
    $$$$$: 4257-block  0
        -: 4258:
function _ZN7doctest8toStringENS_5IsNaNIeEE called 0 returned 0% blocks executed 0%
    #####: 4259:    String toString(IsNaN<double long> in) { return toString < double long > (in); }
    $$$$$: 4259-block  0
        -: 4260:
        -: 4261:} // namespace doctest
        -: 4262:
        -: 4263:#ifdef DOCTEST_CONFIG_DISABLE
        -: 4264:                                                                                                                        namespace doctest {
        -: 4265:Context::Context(int, const char* const*) {}
        -: 4266:Context::~Context() = default;
        -: 4267:void Context::applyCommandLine(int, const char* const*) {}
        -: 4268:void Context::addFilter(const char*, const char*) {}
        -: 4269:void Context::clearFilters() {}
        -: 4270:void Context::setOption(const char*, bool) {}
        -: 4271:void Context::setOption(const char*, int) {}
        -: 4272:void Context::setOption(const char*, const char*) {}
        -: 4273:bool Context::shouldExit() { return false; }
        -: 4274:void Context::setAsDefaultForAssertsOutOfTestCases() {}
        -: 4275:void Context::setAssertHandler(detail::assert_handler) {}
        -: 4276:void Context::setCout(std::ostream*) {}
        -: 4277:int  Context::run() { return 0; }
        -: 4278:
        -: 4279:int                         IReporter::get_num_active_contexts() { return 0; }
        -: 4280:const IContextScope* const* IReporter::get_active_contexts() { return nullptr; }
        -: 4281:int                         IReporter::get_num_stringified_contexts() { return 0; }
        -: 4282:const String*               IReporter::get_stringified_contexts() { return nullptr; }
        -: 4283:
        -: 4284:int registerReporter(const char*, int, IReporter*) { return 0; }
        -: 4285:
        -: 4286:} // namespace doctest
        -: 4287:#else // DOCTEST_CONFIG_DISABLE
        -: 4288:
        -: 4289:#if !defined(DOCTEST_CONFIG_COLORS_NONE)
        -: 4290:#if !defined(DOCTEST_CONFIG_COLORS_WINDOWS) && !defined(DOCTEST_CONFIG_COLORS_ANSI)
        -: 4291:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 4292:#define DOCTEST_CONFIG_COLORS_WINDOWS
        -: 4293:#else // linux
        -: 4294:#define DOCTEST_CONFIG_COLORS_ANSI
        -: 4295:#endif // platform
        -: 4296:#endif // DOCTEST_CONFIG_COLORS_WINDOWS && DOCTEST_CONFIG_COLORS_ANSI
        -: 4297:#endif // DOCTEST_CONFIG_COLORS_NONE
        -: 4298:
        -: 4299:namespace doctest_detail_test_suite_ns {
        -: 4300:// holds the current test suite
function _ZN28doctest_detail_test_suite_ns19getCurrentTestSuiteEv called 2 returned 100% blocks executed 100%
        2: 4301:    doctest::detail::TestSuite &getCurrentTestSuite() {
        -: 4302:        static doctest::detail::TestSuite data{};
        2: 4303:        return data;
        2: 4303-block  0
        -: 4304:    }
        -: 4305:} // namespace doctest_detail_test_suite_ns
        -: 4306:
        -: 4307:namespace doctest {
        -: 4308:    namespace {
        -: 4309:        // the int (priority) is part of the key for automatic sorting - sadly one can register a
        -: 4310:        // reporter with a duplicate name and a different priority but hopefully that won't happen often :|
        -: 4311:        using reporterMap = std::map<std::pair<int, String>, reporterCreatorFunc>;
        -: 4312:
function _ZN7doctest12_GLOBAL__N_112getReportersEv called 4 returned 100% blocks executed 100%
        4: 4313:        reporterMap &getReporters() {
        4: 4314:            static reporterMap data;
        4: 4314-block  0
branch  0 taken 1
branch  1 taken 3
        1: 4314-block  1
branch  2 taken 1
branch  3 taken 0
        1: 4314-block  2
        4: 4315:            return data;
        4: 4315-block  0
        -: 4316:        }
        -: 4317:
function _ZN7doctest12_GLOBAL__N_112getListenersEv called 1 returned 100% blocks executed 100%
        1: 4318:        reporterMap &getListeners() {
        1: 4319:            static reporterMap data;
        1: 4319-block  0
branch  0 taken 1
branch  1 taken 0
        1: 4319-block  1
branch  2 taken 1
branch  3 taken 0
        1: 4319-block  2
        1: 4320:            return data;
        1: 4320-block  0
        -: 4321:        }
        -: 4322:    } // namespace
        -: 4323:    namespace detail {
        -: 4324:#define DOCTEST_ITERATE_THROUGH_REPORTERS(function, ...)                                           \
        -: 4325:    for(auto& curr_rep : g_cs->reporters_currently_used)                                           \
        -: 4326:    curr_rep->function(__VA_ARGS__)
        -: 4327:
function _ZN7doctest6detail18checkIfShouldThrowENS_10assertType4EnumE called 0 returned 0% blocks executed 0%
    #####: 4328:        bool checkIfShouldThrow(assertType::Enum at) {
    #####: 4329:            if (at & assertType::is_require) //!OCLINT bitwise operator in conditional
    $$$$$: 4329-block  0
branch  0 never executed
branch  1 never executed
    #####: 4330:                return true;
    $$$$$: 4330-block  0
        -: 4331:
    #####: 4332:            if ((at & assertType::is_check) //!OCLINT bitwise operator in conditional
    $$$$$: 4332-block  0
branch  0 never executed
branch  1 never executed
    #####: 4333:                && getContextOptions()->abort_after > 0 &&
    $$$$$: 4333-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4333-block  1
branch  2 never executed
branch  3 never executed
    #####: 4334:                (g_cs->numAssertsFailed + g_cs->numAssertsFailedCurrentTest_atomic) >=
    #####: 4335:                getContextOptions()->abort_after)
    #####: 4336:                return true;
    $$$$$: 4336-block  0
        -: 4337:
    #####: 4338:            return false;
    $$$$$: 4338-block  0
    #####: 4339:        }
    $$$$$: 4339-block  0
        -: 4340:
        -: 4341:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 4342:
function _ZN7doctest6detail14throwExceptionEv called 0 returned 0% blocks executed 0%
    #####: 4343:        DOCTEST_NORETURN void throwException() {
    #####: 4344:            g_cs->shouldLogCurrentException = false;
    #####: 4345:            throw TestFailureException(); // NOLINT(hicpp-exception-baseclass)
    $$$$$: 4345-block  0
        -: 4346:        }
        -: 4347:
        -: 4348:#else // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 4349:        void throwException() {}
        -: 4350:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 4351:    } // namespace detail
        -: 4352:
        -: 4353:    namespace {
        -: 4354:        using namespace detail;
        -: 4355:
        -: 4356:        // matching of a string against a wildcard mask (case sensitivity configurable) taken from
        -: 4357:        // https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing
function _ZN7doctest12_GLOBAL__N_17wildcmpEPKcS2_b called 3 returned 100% blocks executed 45%
        3: 4358:        int wildcmp(const char *str, const char *wild, bool caseSensitive) {
        3: 4359:            const char *cp = str;
        3: 4360:            const char *mp = wild;
        -: 4361:
       10: 4362:            while ((*str) && (*wild != '*')) {
        3: 4362-block  0
       10: 4362-block  1
branch  0 taken 1
branch  1 taken 9
        9: 4362-block  2
       10: 4362-block  3
branch  2 taken 9
branch  3 taken 1
        7: 4362-block  4
        9: 4363:                if ((caseSensitive ? (*wild != *str) : (tolower(*wild) != tolower(*str))) &&
        9: 4363-block  0
branch  0 taken 0
branch  1 taken 9
    $$$$$: 4363-block  1
    $$$$$: 4363-block  2
        9: 4363-block  3
    $$$$$: 4363-block  4
        9: 4363-block  5
branch  2 taken 7
branch  3 taken 2
        9: 4364:                    (*wild != '?')) {
        2: 4365:                    return 0;
        2: 4365-block  0
        -: 4366:                }
        7: 4367:                wild++;
        7: 4368:                str++;
        -: 4369:            }
        -: 4370:
        1: 4371:            while (*str) {
        1: 4371-block  0
        1: 4371-block  1
branch  0 taken 0
branch  1 taken 1
    $$$$$: 4371-block  2
    #####: 4372:                if (*wild == '*') {
    $$$$$: 4372-block  0
branch  0 never executed
branch  1 never executed
    #####: 4373:                    if (!*++wild) {
    $$$$$: 4373-block  0
branch  0 never executed
branch  1 never executed
    #####: 4374:                        return 1;
    $$$$$: 4374-block  0
        -: 4375:                    }
    #####: 4376:                    mp = wild;
    #####: 4377:                    cp = str + 1;
    #####: 4378:                } else if ((caseSensitive ? (*wild == *str) : (tolower(*wild) == tolower(*str))) ||
    $$$$$: 4378-block  0
    $$$$$: 4378-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4378-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 4378-block  3
    $$$$$: 4378-block  4
    $$$$$: 4378-block  5
    $$$$$: 4378-block  6
    #####: 4379:                           (*wild == '?')) {
    #####: 4380:                    wild++;
    #####: 4381:                    str++;
    #####: 4382:                } else {
    $$$$$: 4382-block  0
    #####: 4383:                    wild = mp;   //!OCLINT parameter reassignment
    #####: 4384:                    str = cp++; //!OCLINT parameter reassignment
    $$$$$: 4384-block  0
        -: 4385:                }
        -: 4386:            }
        -: 4387:
        1: 4388:            while (*wild == '*') {
        1: 4388-block  0
        1: 4388-block  1
branch  0 taken 0
branch  1 taken 1
    $$$$$: 4388-block  2
    #####: 4389:                wild++;
        -: 4390:            }
        1: 4391:            return !*wild;
        1: 4391-block  0
        3: 4392:        }
        3: 4392-block  0
        -: 4393:
        -: 4394:        // checks if the name matches any of the filters (and can be configured what to do when empty)
function _ZN7doctest12_GLOBAL__N_110matchesAnyEPKcRKNSt3__16vectorINS_6StringENS3_9allocatorIS5_EEEEbb called 39 returned 100% blocks executed 100%
       39: 4395:        bool matchesAny(const char *name, const std::vector<String> &filters, bool matchEmpty,
        -: 4396:                        bool caseSensitive) {
       39: 4397:            if (filters.empty() && matchEmpty)
       39: 4397-block  0
branch  0 taken 36
branch  1 taken 3
       36: 4397-block  1
branch  2 taken 18
branch  3 taken 18
       18: 4398:                return true;
       18: 4398-block  0
       23: 4399:            for (auto &curr: filters)
       21: 4399-block  0
       23: 4399-block  1
branch  0 taken 3
branch  1 taken 20
        2: 4399-block  2
        2: 4399-block  3
        3: 4400:                if (wildcmp(name, curr.c_str(), caseSensitive))
        3: 4400-block  0
branch  0 taken 2
branch  1 taken 1
        1: 4401:                    return true;
        1: 4401-block  0
       20: 4402:            return false;
       20: 4402-block  0
       39: 4403:        }
       39: 4403-block  0
        -: 4404:
        -: 4405:        DOCTEST_NO_SANITIZE_INTEGER
function _ZN7doctest12_GLOBAL__N_14hashEyy called 45 returned 100% blocks executed 100%
       45: 4406:        unsigned long long hash(unsigned long long a, unsigned long long b) {
       45: 4407:            return (a << 5) + b;
       45: 4407-block  0
        -: 4408:        }
        -: 4409:
        -: 4410:        // C string hash function (djb2) - taken from http://www.cse.yorku.ca/~oz/hash.html
        -: 4411:        DOCTEST_NO_SANITIZE_INTEGER
function _ZN7doctest12_GLOBAL__N_14hashEPKc called 30 returned 100% blocks executed 100%
       30: 4412:        unsigned long long hash(const char *str) {
       30: 4413:            unsigned long long hash = 5381;
        -: 4414:            char c;
     1590: 4415:            while ((c = *str++))
       30: 4415-block  0
     1590: 4415-block  1
branch  0 taken 1560
branch  1 taken 30
     1560: 4415-block  2
     1560: 4416:                hash = ((hash << 5) + hash) + c; // hash * 33 + c
       30: 4417:            return hash;
       30: 4417-block  0
        -: 4418:        }
        -: 4419:
function _ZN7doctest12_GLOBAL__N_14hashERKNS_16SubcaseSignatureE called 15 returned 100% blocks executed 100%
       15: 4420:        unsigned long long hash(const SubcaseSignature &sig) {
       15: 4421:            return hash(hash(hash(sig.m_file), hash(sig.m_name.c_str())), sig.m_line);
       15: 4421-block  0
        -: 4422:        }
        -: 4423:
function _ZN7doctest12_GLOBAL__N_14hashERKNSt3__16vectorINS_16SubcaseSignatureENS1_9allocatorIS3_EEEEm called 7 returned 100% blocks executed 60%
        7: 4424:        unsigned long long hash(const std::vector<SubcaseSignature> &sigs, size_t count) {
        7: 4425:            unsigned long long running = 0;
        7: 4426:            auto end = sigs.begin() + count;
        7: 4427:            for (auto it = sigs.begin(); it != end; it++) {
        7: 4427-block  0
        7: 4427-block  1
branch  0 taken 0
branch  1 taken 7
    $$$$$: 4427-block  2
    #####: 4428:                running = hash(running, hash(*it));
    #####: 4429:            }
    $$$$$: 4429-block  0
        7: 4430:            return running;
        7: 4430-block  0
        -: 4431:        }
        -: 4432:
function _ZN7doctest12_GLOBAL__N_14hashERKNSt3__16vectorINS_16SubcaseSignatureENS1_9allocatorIS3_EEEE called 8 returned 100% blocks executed 100%
        8: 4433:        unsigned long long hash(const std::vector<SubcaseSignature> &sigs) {
        8: 4434:            unsigned long long running = 0;
       16: 4435:            for (const SubcaseSignature &sig: sigs) {
        8: 4435-block  0
       16: 4435-block  1
branch  0 taken 8
branch  1 taken 8
        8: 4435-block  2
        8: 4435-block  3
        8: 4435-block  4
        8: 4436:                running = hash(running, hash(sig));
        -: 4437:            }
        8: 4438:            return running;
        8: 4438-block  0
        -: 4439:        }
        -: 4440:    } // namespace
        -: 4441:    namespace detail {
function _ZN7doctest6detail7Subcase12checkFiltersEv called 15 returned 100% blocks executed 75%
       15: 4442:        bool Subcase::checkFilters() {
       15: 4443:            if (g_cs->subcaseStack.size() < size_t(g_cs->subcase_filter_levels)) {
       15: 4443-block  0
branch  0 taken 0
branch  1 taken 15
       15: 4444:                if (!matchesAny(m_signature.m_name.c_str(), g_cs->filters[6], true, g_cs->case_sensitive))
       15: 4444-block  0
branch  0 taken 15
branch  1 taken 0
    #####: 4445:                    return true;
    $$$$$: 4445-block  0
       15: 4446:                if (matchesAny(m_signature.m_name.c_str(), g_cs->filters[7], false, g_cs->case_sensitive))
       15: 4446-block  0
branch  0 taken 0
branch  1 taken 15
    #####: 4447:                    return true;
    $$$$$: 4447-block  0
       15: 4448:            }
       15: 4448-block  0
       15: 4449:            return false;
       15: 4449-block  0
       15: 4450:        }
       15: 4450-block  0
        -: 4451:
function _ZN7doctest6detail7SubcaseC2ERKNS_6StringEPKci called 64 returned 100% blocks executed 76%
function _ZN7doctest6detail7SubcaseC1ERKNS_6StringEPKci called 64 returned 100% blocks executed 100%
      128: 4452:        Subcase::Subcase(const String &name, const char *file, int line)
      128: 4453:                : m_signature({name, file, line}) {
       64: 4454:            if (!g_cs->reachedLeaf) {
       64: 4454-block  0
branch  0 taken 28
branch  1 taken 36
       71: 4455:                if (g_cs->nextSubcaseStack.size() <= g_cs->subcaseStack.size()
       35: 4455-block  0
branch  0 taken 7
branch  1 taken 28
       36: 4456:                    || g_cs->nextSubcaseStack[g_cs->subcaseStack.size()] == m_signature) {
       36: 4456-block  0
branch  0 taken 35
branch  1 taken 1
       35: 4456-block  1
branch  2 taken 35
branch  3 taken 0
        -: 4457:                    // Going down.
        8: 4458:                    if (checkFilters()) { return; }
        8: 4458-block  0
branch  0 taken 8
branch  1 taken 0
        8: 4458-block  1
branch  2 taken 8
branch  3 taken 0
    $$$$$: 4458-block  2
        -: 4459:
        8: 4460:                    g_cs->subcaseStack.push_back(m_signature);
        8: 4460-block  0
branch  0 taken 8
branch  1 taken 0
        8: 4461:                    g_cs->currentSubcaseDepth++;
        8: 4462:                    m_entered = true;
       16: 4463:                    DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);
        8: 4463-block  0
       16: 4463-block  1
branch  0 taken 8
branch  1 taken 8
        8: 4463-block  2
branch  2 taken 8
branch  3 taken 0
        8: 4463-block  3
        8: 4463-block  4
        8: 4464:                }
        8: 4464-block  0
       36: 4465:            } else {
       36: 4465-block  0
       28: 4466:                if (g_cs->subcaseStack[g_cs->currentSubcaseDepth] == m_signature) {
       28: 4466-block  0
branch  0 taken 28
branch  1 taken 0
       28: 4466-block  1
branch  2 taken 0
branch  3 taken 28
        -: 4467:                    // This subcase is reentered via control flow.
    #####: 4468:                    g_cs->currentSubcaseDepth++;
    #####: 4469:                    m_entered = true;
    #####: 4470:                    DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);
    $$$$$: 4470-block  0
    $$$$$: 4470-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4470-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 4470-block  3
    $$$$$: 4470-block  4
       35: 4471:                } else if (g_cs->nextSubcaseStack.size() <= g_cs->currentSubcaseDepth
    $$$$$: 4471-block  0
       28: 4471-block  1
branch  0 taken 7
branch  1 taken 21
       35: 4472:                           && g_cs->fullyTraversedSubcases.find(
       28: 4472-block  0
branch  0 taken 7
branch  1 taken 21
        7: 4472-block  1
branch  2 taken 7
branch  3 taken 0
        7: 4473:                        hash(hash(g_cs->subcaseStack, g_cs->currentSubcaseDepth), hash(m_signature)))
        7: 4473-block  0
branch  0 taken 7
branch  1 taken 0
        7: 4473-block  1
branch  2 taken 7
branch  3 taken 0
        7: 4473-block  2
branch  4 taken 7
branch  5 taken 0
        7: 4474:                              == g_cs->fullyTraversedSubcases.end()) {
        7: 4474-block  0
branch  0 taken 7
branch  1 taken 0
        7: 4475:                    if (checkFilters()) { return; }
        7: 4475-block  0
branch  0 taken 7
branch  1 taken 0
        7: 4475-block  1
branch  2 taken 7
branch  3 taken 0
    $$$$$: 4475-block  2
        -: 4476:                    // This subcase is part of the one to be executed next.
        7: 4477:                    g_cs->nextSubcaseStack.clear();
       14: 4478:                    g_cs->nextSubcaseStack.insert(g_cs->nextSubcaseStack.end(),
        7: 4478-block  0
branch  0 taken 7
branch  1 taken 0
        7: 4478-block  1
branch  2 taken 7
branch  3 taken 0
        7: 4479:                                                  g_cs->subcaseStack.begin(),
        7: 4480:                                                  g_cs->subcaseStack.begin() + g_cs->currentSubcaseDepth);
        7: 4481:                    g_cs->nextSubcaseStack.push_back(m_signature);
        7: 4481-block  0
branch  0 taken 7
branch  1 taken 0
        7: 4482:                }
        7: 4482-block  0
        -: 4483:            }
      128: 4484:        }
    $$$$$: 4484-block  0
       64: 4484-block  1
    $$$$$: 4484-block  2
       64: 4484-block  3
        -: 4485:
        -: 4486:        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) // std::uncaught_exception is deprecated in C++17
        -: 4487:        DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")
        -: 4488:        DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")
        -: 4489:
function _ZN7doctest6detail7SubcaseD2Ev called 64 returned 100% blocks executed 48%
function _ZN7doctest6detail7SubcaseD1Ev called 64 returned 100% blocks executed 100%
      128: 4490:        Subcase::~Subcase() {
       64: 4491:            if (m_entered) {
       64: 4491-block  0
branch  0 taken 56
branch  1 taken 8
        8: 4492:                g_cs->currentSubcaseDepth--;
        -: 4493:
        8: 4494:                if (!g_cs->reachedLeaf) {
        8: 4494-block  0
branch  0 taken 8
branch  1 taken 0
        -: 4495:                    // Leaf.
        8: 4496:                    g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));
        8: 4496-block  0
branch  0 taken 8
branch  1 taken 0
        8: 4496-block  1
branch  2 taken 8
branch  3 taken 0
    $$$$$: 4496-block  2
        8: 4497:                    g_cs->nextSubcaseStack.clear();
        8: 4498:                    g_cs->reachedLeaf = true;
        8: 4499:                } else if (g_cs->nextSubcaseStack.empty()) {
        8: 4499-block  0
    $$$$$: 4499-block  1
branch  0 never executed
branch  1 never executed
        -: 4500:                    // All children are finished.
    #####: 4501:                    g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));
    $$$$$: 4501-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4501-block  1
branch  2 never executed
branch  3 never executed
    #####: 4502:                }
    $$$$$: 4502-block  0
        -: 4503:
        -: 4504:#if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)
        8: 4505:                if (std::uncaught_exceptions() > 0
    $$$$$: 4505-block  0
branch  0 never executed
branch  1 never executed
        -: 4506:                    #else
        -: 4507:                    if(std::uncaught_exception()
        -: 4508:                    #endif
        8: 4509:                    && g_cs->shouldLogCurrentException) {
        8: 4509-block  0
branch  0 taken 0
branch  1 taken 8
    #####: 4510:                    DOCTEST_ITERATE_THROUGH_REPORTERS(
    $$$$$: 4510-block  0
    $$$$$: 4510-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4510-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 4510-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 4510-block  4
    $$$$$: 4510-block  5
        -: 4511:                            test_case_exception, {
        -: 4512:                        "exception thrown in subcase - will translate later "
        -: 4513:                        "when the whole test case has been exited (cannot "
        -: 4514:                        "translate while there is an active exception)",
        -: 4515:                        false
        -: 4516:                    });
    #####: 4517:                    g_cs->shouldLogCurrentException = false;
    #####: 4518:                }
    $$$$$: 4518-block  0
        -: 4519:
       16: 4520:                DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);
        8: 4520-block  0
       16: 4520-block  1
branch  0 taken 8
branch  1 taken 8
        8: 4520-block  2
branch  2 taken 8
branch  3 taken 0
        8: 4520-block  3
        8: 4520-block  4
        8: 4521:            }
        8: 4521-block  0
      128: 4522:        }
       64: 4522-block  0
       64: 4522-block  1
        -: 4523:
        -: 4524:        DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 4525:        DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 4526:        DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 4527:
function _ZNK7doctest6detail7SubcasecvbEv called 64 returned 100% blocks executed 100%
       64: 4528:        Subcase::operator bool() const { return m_entered; }
       64: 4528-block  0
        -: 4529:
function _ZN7doctest6detail6ResultC2EbRKNS_6StringE called 22 returned 100% blocks executed 100%
function _ZN7doctest6detail6ResultC1EbRKNS_6StringE called 22 returned 100% blocks executed 100%
       44: 4530:        Result::Result(bool passed, const String &decomposition)
       44: 4531:                : m_passed(passed), m_decomp(decomposition) {}
       22: 4531-block  0
       22: 4531-block  1
        -: 4532:
function _ZN7doctest6detail20ExpressionDecomposerC2ENS_10assertType4EnumE called 22 returned 100% blocks executed 100%
function _ZN7doctest6detail20ExpressionDecomposerC1ENS_10assertType4EnumE called 22 returned 100% blocks executed 100%
       44: 4533:        ExpressionDecomposer::ExpressionDecomposer(assertType::Enum at)
       44: 4534:                : m_at(at) {}
       22: 4534-block  0
       22: 4534-block  1
        -: 4535:
function _ZN7doctest6detail9TestSuitemlEPKc called 1 returned 100% blocks executed 100%
        1: 4536:        TestSuite &TestSuite::operator*(const char *in) {
        1: 4537:            m_test_suite = in;
        1: 4538:            return *this;
        1: 4538-block  0
        -: 4539:        }
        -: 4540:
function _ZN7doctest6detail8TestCaseC2EPFvvEPKcjRKNS0_9TestSuiteERKNS_6StringEi called 1 returned 100% blocks executed 60%
function _ZN7doctest6detail8TestCaseC1EPFvvEPKcjRKNS0_9TestSuiteERKNS_6StringEi called 1 returned 100% blocks executed 100%
        3: 4541:        TestCase::TestCase(funcType test, const char *file, unsigned line, const TestSuite &test_suite,
        2: 4542:                           const String &type, int template_id) {
        1: 4543:            m_file = file;
        1: 4543-block  0
branch  0 taken 1
branch  1 taken 0
        1: 4544:            m_line = line;
        1: 4545:            m_name = nullptr; // will be later overridden in operator*
        1: 4546:            m_test_suite = test_suite.m_test_suite;
        1: 4547:            m_description = test_suite.m_description;
        1: 4548:            m_skip = test_suite.m_skip;
        1: 4549:            m_no_breaks = test_suite.m_no_breaks;
        1: 4550:            m_no_output = test_suite.m_no_output;
        1: 4551:            m_may_fail = test_suite.m_may_fail;
        1: 4552:            m_should_fail = test_suite.m_should_fail;
        1: 4553:            m_expected_failures = test_suite.m_expected_failures;
        1: 4554:            m_timeout = test_suite.m_timeout;
        -: 4555:
        1: 4556:            m_test = test;
        1: 4557:            m_type = type;
        1: 4557-block  0
branch  0 taken 1
branch  1 taken 0
        1: 4558:            m_template_id = template_id;
        2: 4559:        }
        1: 4559-block  0
    $$$$$: 4559-block  1
    $$$$$: 4559-block  2
        1: 4559-block  3
        -: 4560:
function _ZN7doctest6detail8TestCaseC2ERKS1_ called 1 returned 100% blocks executed 50%
function _ZN7doctest6detail8TestCaseC1ERKS1_ called 1 returned 100% blocks executed 100%
        3: 4561:        TestCase::TestCase(const TestCase &other)
        2: 4562:                : TestCaseData() {
        1: 4563:            *this = other;
        1: 4563-block  0
branch  0 taken 1
branch  1 taken 0
        2: 4564:        }
        1: 4564-block  0
    $$$$$: 4564-block  1
    $$$$$: 4564-block  2
        1: 4564-block  3
        -: 4565:
        -: 4566:        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) // hides a non-virtual function
function _ZN7doctest6detail8TestCaseaSERKS1_ called 1 returned 100% blocks executed 66%
        1: 4567:        TestCase &TestCase::operator=(const TestCase &other) {
        1: 4568:            TestCaseData::operator=(other);
        1: 4569:            m_test = other.m_test;
        1: 4570:            m_type = other.m_type;
        1: 4571:            m_template_id = other.m_template_id;
        1: 4572:            m_full_name = other.m_full_name;
        -: 4573:
        1: 4574:            if (m_template_id != -1)
        1: 4574-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 4575:                m_name = m_full_name.c_str();
    $$$$$: 4575-block  0
        1: 4576:            return *this;
        1: 4576-block  0
        -: 4577:        }
        -: 4578:
        -: 4579:        DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 4580:
function _ZN7doctest6detail8TestCasemlEPKc called 1 returned 100% blocks executed 11%
        1: 4581:        TestCase &TestCase::operator*(const char *in) {
        1: 4582:            m_name = in;
        -: 4583:            // make a new name with an appended type for templated test case
        1: 4584:            if (m_template_id != -1) {
        1: 4584-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 4585:                m_full_name = String(m_name) + "<" + m_type + ">";
    $$$$$: 4585-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4585-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4585-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4585-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 4585-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 4585-block  5
    $$$$$: 4585-block  6
    $$$$$: 4585-block  7
    $$$$$: 4585-block  8
    $$$$$: 4585-block  9
    $$$$$: 4585-block 10
        -: 4586:                // redirect the name to point to the newly constructed full name
    #####: 4587:                m_name = m_full_name.c_str();
    #####: 4588:            }
    $$$$$: 4588-block  0
        1: 4589:            return *this;
        1: 4589-block  0
    #####: 4590:        }
    $$$$$: 4590-block  0
    $$$$$: 4590-block  1
    $$$$$: 4590-block  2
    $$$$$: 4590-block  3
        -: 4591:
function _ZNK7doctest6detail8TestCaseltERKS1_ called 0 returned 0% blocks executed 0%
    #####: 4592:        bool TestCase::operator<(const TestCase &other) const {
        -: 4593:            // this will be used only to differentiate between test cases - not relevant for sorting
    #####: 4594:            if (m_line != other.m_line)
    $$$$$: 4594-block  0
branch  0 never executed
branch  1 never executed
    #####: 4595:                return m_line < other.m_line;
    $$$$$: 4595-block  0
    #####: 4596:            const int name_cmp = strcmp(m_name, other.m_name);
    #####: 4597:            if (name_cmp != 0)
    $$$$$: 4597-block  0
branch  0 never executed
branch  1 never executed
    #####: 4598:                return name_cmp < 0;
    $$$$$: 4598-block  0
    #####: 4599:            const int file_cmp = m_file.compare(other.m_file);
    #####: 4600:            if (file_cmp != 0)
    $$$$$: 4600-block  0
branch  0 never executed
branch  1 never executed
    #####: 4601:                return file_cmp < 0;
    $$$$$: 4601-block  0
    #####: 4602:            return m_template_id < other.m_template_id;
    $$$$$: 4602-block  0
    #####: 4603:        }
    $$$$$: 4603-block  0
        -: 4604:
        -: 4605:        // all the registered tests
function _ZN7doctest6detail18getRegisteredTestsEv called 2 returned 100% blocks executed 100%
        2: 4606:        std::set<TestCase> &getRegisteredTests() {
        2: 4607:            static std::set<TestCase> data;
        2: 4607-block  0
branch  0 taken 1
branch  1 taken 1
        1: 4607-block  1
branch  2 taken 1
branch  3 taken 0
        1: 4607-block  2
        2: 4608:            return data;
        2: 4608-block  0
        -: 4609:        }
        -: 4610:    } // namespace detail
        -: 4611:    namespace {
        -: 4612:        using namespace detail;
        -: 4613:
        -: 4614:        // for sorting tests by file/line
function _ZN7doctest12_GLOBAL__N_119fileOrderComparatorEPKNS_6detail8TestCaseES4_ called 0 returned 0% blocks executed 0%
    #####: 4615:        bool fileOrderComparator(const TestCase *lhs, const TestCase *rhs) {
        -: 4616:            // this is needed because MSVC gives different case for drive letters
        -: 4617:            // for __FILE__ when evaluated in a header and a source file
    #####: 4618:            const int res = lhs->m_file.compare(rhs->m_file, bool(DOCTEST_MSVC));
    #####: 4619:            if (res != 0)
    $$$$$: 4619-block  0
branch  0 never executed
branch  1 never executed
    #####: 4620:                return res < 0;
    $$$$$: 4620-block  0
    #####: 4621:            if (lhs->m_line != rhs->m_line)
    $$$$$: 4621-block  0
branch  0 never executed
branch  1 never executed
    #####: 4622:                return lhs->m_line < rhs->m_line;
    $$$$$: 4622-block  0
    #####: 4623:            return lhs->m_template_id < rhs->m_template_id;
    $$$$$: 4623-block  0
    #####: 4624:        }
    $$$$$: 4624-block  0
        -: 4625:
        -: 4626:        // for sorting tests by suite/file/line
function _ZN7doctest12_GLOBAL__N_120suiteOrderComparatorEPKNS_6detail8TestCaseES4_ called 0 returned 0% blocks executed 0%
    #####: 4627:        bool suiteOrderComparator(const TestCase *lhs, const TestCase *rhs) {
    #####: 4628:            const int res = std::strcmp(lhs->m_test_suite, rhs->m_test_suite);
    #####: 4629:            if (res != 0)
    $$$$$: 4629-block  0
branch  0 never executed
branch  1 never executed
    #####: 4630:                return res < 0;
    $$$$$: 4630-block  0
    #####: 4631:            return fileOrderComparator(lhs, rhs);
    $$$$$: 4631-block  0
    #####: 4632:        }
    $$$$$: 4632-block  0
        -: 4633:
        -: 4634:        // for sorting tests by name/suite/file/line
function _ZN7doctest12_GLOBAL__N_119nameOrderComparatorEPKNS_6detail8TestCaseES4_ called 0 returned 0% blocks executed 0%
    #####: 4635:        bool nameOrderComparator(const TestCase *lhs, const TestCase *rhs) {
    #####: 4636:            const int res = std::strcmp(lhs->m_name, rhs->m_name);
    #####: 4637:            if (res != 0)
    $$$$$: 4637-block  0
branch  0 never executed
branch  1 never executed
    #####: 4638:                return res < 0;
    $$$$$: 4638-block  0
    #####: 4639:            return suiteOrderComparator(lhs, rhs);
    $$$$$: 4639-block  0
    #####: 4640:        }
    $$$$$: 4640-block  0
        -: 4641:
        -: 4642:        DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")
        -: 4643:
function _ZN7doctest12_GLOBAL__N_115color_to_streamERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEENS_5Color4EnumE called 24 returned 100% blocks executed 23%
       24: 4644:        void color_to_stream(std::ostream &s, Color::Enum code) {
       24: 4645:            static_cast<void>(s);    // for DOCTEST_CONFIG_COLORS_NONE or DOCTEST_CONFIG_COLORS_WINDOWS
        -: 4646:            static_cast<void>(code); // for DOCTEST_CONFIG_COLORS_NONE
        -: 4647:#ifdef DOCTEST_CONFIG_COLORS_ANSI
       48: 4648:            if (g_no_colors ||
       24: 4648-block  0
branch  0 taken 24
branch  1 taken 0
       24: 4648-block  1
branch  2 taken 0
branch  3 taken 24
       24: 4649:                (isatty(STDOUT_FILENO) == false && getContextOptions()->force_colors == false))
       24: 4649-block  0
branch  0 taken 24
branch  1 taken 0
       24: 4650:                return;
       24: 4650-block  0
        -: 4651:
    #####: 4652:            auto col = "";
        -: 4653:            // clang-format off
    #####: 4654:            switch (code) { //!OCLINT missing break in switch statement / unnecessary default statement in covered switch statement
    $$$$$: 4654-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 4654-block  1
    $$$$$: 4654-block  2
        -: 4655:                case Color::Red:
    #####: 4656:                    col = "[0;31m";
    #####: 4657:                    break;
    $$$$$: 4657-block  0
        -: 4658:                case Color::Green:
    #####: 4659:                    col = "[0;32m";
    #####: 4660:                    break;
    $$$$$: 4660-block  0
        -: 4661:                case Color::Blue:
    #####: 4662:                    col = "[0;34m";
    #####: 4663:                    break;
    $$$$$: 4663-block  0
        -: 4664:                case Color::Cyan:
    #####: 4665:                    col = "[0;36m";
    #####: 4666:                    break;
    $$$$$: 4666-block  0
        -: 4667:                case Color::Yellow:
    #####: 4668:                    col = "[0;33m";
    #####: 4669:                    break;
    $$$$$: 4669-block  0
        -: 4670:                case Color::Grey:
    #####: 4671:                    col = "[1;30m";
    #####: 4672:                    break;
    $$$$$: 4672-block  0
        -: 4673:                case Color::LightGrey:
    #####: 4674:                    col = "[0;37m";
    #####: 4675:                    break;
    $$$$$: 4675-block  0
        -: 4676:                case Color::BrightRed:
    #####: 4677:                    col = "[1;31m";
    #####: 4678:                    break;
    $$$$$: 4678-block  0
        -: 4679:                case Color::BrightGreen:
    #####: 4680:                    col = "[1;32m";
    #####: 4681:                    break;
    $$$$$: 4681-block  0
        -: 4682:                case Color::BrightWhite:
    #####: 4683:                    col = "[1;37m";
    #####: 4684:                    break;
    $$$$$: 4684-block  0
        -: 4685:                case Color::Bright: // invalid
        -: 4686:                case Color::None:
    #####: 4687:                case Color::White:
    $$$$$: 4687-block  0
        -: 4688:                default:
    #####: 4689:                    col = "[0m";
    #####: 4690:            }
    $$$$$: 4690-block  0
        -: 4691:            // clang-format on
    #####: 4692:            s << "\033" << col;
        -: 4693:#endif // DOCTEST_CONFIG_COLORS_ANSI
        -: 4694:
        -: 4695:#ifdef DOCTEST_CONFIG_COLORS_WINDOWS
        -: 4696:                                                                                                                                    if(g_no_colors ||
        -: 4697:           (_isatty(_fileno(stdout)) == false && getContextOptions()->force_colors == false))
        -: 4698:            return;
        -: 4699:
        -: 4700:        static struct ConsoleHelper {
        -: 4701:            HANDLE stdoutHandle;
        -: 4702:            WORD   origFgAttrs;
        -: 4703:            WORD   origBgAttrs;
        -: 4704:
        -: 4705:            ConsoleHelper() {
        -: 4706:                stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 4707:                CONSOLE_SCREEN_BUFFER_INFO csbiInfo;
        -: 4708:                GetConsoleScreenBufferInfo(stdoutHandle, &csbiInfo);
        -: 4709:                origFgAttrs = csbiInfo.wAttributes & ~(BACKGROUND_GREEN | BACKGROUND_RED |
        -: 4710:                    BACKGROUND_BLUE | BACKGROUND_INTENSITY);
        -: 4711:                origBgAttrs = csbiInfo.wAttributes & ~(FOREGROUND_GREEN | FOREGROUND_RED |
        -: 4712:                    FOREGROUND_BLUE | FOREGROUND_INTENSITY);
        -: 4713:            }
        -: 4714:        } ch;
        -: 4715:
        -: 4716:#define DOCTEST_SET_ATTR(x) SetConsoleTextAttribute(ch.stdoutHandle, x | ch.origBgAttrs)
        -: 4717:
        -: 4718:        // clang-format off
        -: 4719:        switch (code) {
        -: 4720:            case Color::White:       DOCTEST_SET_ATTR(FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); break;
        -: 4721:            case Color::Red:         DOCTEST_SET_ATTR(FOREGROUND_RED);                                      break;
        -: 4722:            case Color::Green:       DOCTEST_SET_ATTR(FOREGROUND_GREEN);                                    break;
        -: 4723:            case Color::Blue:        DOCTEST_SET_ATTR(FOREGROUND_BLUE);                                     break;
        -: 4724:            case Color::Cyan:        DOCTEST_SET_ATTR(FOREGROUND_BLUE | FOREGROUND_GREEN);                  break;
        -: 4725:            case Color::Yellow:      DOCTEST_SET_ATTR(FOREGROUND_RED | FOREGROUND_GREEN);                   break;
        -: 4726:            case Color::Grey:        DOCTEST_SET_ATTR(0);                                                   break;
        -: 4727:            case Color::LightGrey:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);                                break;
        -: 4728:            case Color::BrightRed:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_RED);               break;
        -: 4729:            case Color::BrightGreen: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN);             break;
        -: 4730:            case Color::BrightWhite: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); break;
        -: 4731:            case Color::None:
        -: 4732:            case Color::Bright: // invalid
        -: 4733:            default:                 DOCTEST_SET_ATTR(ch.origFgAttrs);
        -: 4734:        }
        -: 4735:            // clang-format on
        -: 4736:#endif // DOCTEST_CONFIG_COLORS_WINDOWS
       24: 4737:        }
    $$$$$: 4737-block  0
       24: 4737-block  1
        -: 4738:
        -: 4739:        DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 4740:
function _ZN7doctest12_GLOBAL__N_123getExceptionTranslatorsEv called 1 returned 100% blocks executed 100%
        1: 4741:        std::vector<const IExceptionTranslator *> &getExceptionTranslators() {
        1: 4742:            static std::vector<const IExceptionTranslator *> data;
        1: 4742-block  0
branch  0 taken 1
branch  1 taken 0
        1: 4742-block  1
branch  2 taken 1
branch  3 taken 0
        1: 4742-block  2
        1: 4743:            return data;
        1: 4743-block  0
        -: 4744:        }
        -: 4745:
function _ZN7doctest12_GLOBAL__N_124translateActiveExceptionEv called 1 returned 100% blocks executed 24%
        1: 4746:        String translateActiveException() {
        -: 4747:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        1: 4748:            String res;
        1: 4749:            auto &translators = getExceptionTranslators();
        1: 4750:            for (auto &curr: translators)
        1: 4750-block  0
        1: 4750-block  1
branch  0 taken 0
branch  1 taken 1
    $$$$$: 4750-block  2
    $$$$$: 4750-block  3
    #####: 4751:                if (curr->translate(res))
    $$$$$: 4751-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4751-block  1
branch  2 never executed
branch  3 never executed
    #####: 4752:                    return res;
    $$$$$: 4752-block  0
        -: 4753:            // clang-format off
        -: 4754:            DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wcatch-value")
        -: 4755:            try {
        1: 4756:                throw;
        1: 4756-block  0
branch  0 taken 0
branch  1 taken 1
        1: 4757:            } catch (std::exception &ex) {
        1: 4757-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 4757-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4757-block  2
branch  4 never executed
branch  5 never executed
        1: 4758:                return ex.what();
        1: 4758-block  0
branch  0 taken 1
branch  1 taken 0
        1: 4759:            } catch (std::string &msg) {
        1: 4759-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 4759-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4759-block  2
    $$$$$: 4759-block  3
    #####: 4760:                return msg.c_str();
    $$$$$: 4760-block  0
branch  0 never executed
branch  1 never executed
        1: 4761:            } catch (const char *msg) {
    $$$$$: 4761-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4761-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4761-block  2
    #####: 4762:                return msg;
    $$$$$: 4762-block  0
branch  0 never executed
branch  1 never executed
    #####: 4763:            } catch (...) {
    $$$$$: 4763-block  0
    $$$$$: 4763-block  1
    #####: 4764:                return "unknown exception";
    $$$$$: 4764-block  0
branch  0 never executed
branch  1 never executed
    #####: 4765:            }
    $$$$$: 4765-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4765-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4765-block  2
    $$$$$: 4765-block  3
        -: 4766:            DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 4767:// clang-format on
        -: 4768:#else  // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 4769:            return "";
        -: 4770:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        2: 4771:        }
    $$$$$: 4771-block  0
        1: 4771-block  1
        1: 4771-block  2
    $$$$$: 4771-block  3
    $$$$$: 4771-block  4
        -: 4772:    } // namespace
        -: 4773:
        -: 4774:    namespace detail {
        -: 4775:        // used by the macros for registering tests
function _ZN7doctest6detail7regTestERKNS0_8TestCaseE called 1 returned 100% blocks executed 100%
        1: 4776:        int regTest(const TestCase &tc) {
        1: 4777:            getRegisteredTests().insert(tc);
        1: 4778:            return 0;
        1: 4778-block  0
        -: 4779:        }
        -: 4780:
        -: 4781:        // sets the current test suite
function _ZN7doctest6detail12setTestSuiteERKNS0_9TestSuiteE called 1 returned 100% blocks executed 100%
        1: 4782:        int setTestSuite(const TestSuite &ts) {
        1: 4783:            doctest_detail_test_suite_ns::getCurrentTestSuite() = ts;
        1: 4784:            return 0;
        1: 4784-block  0
        -: 4785:        }
        -: 4786:
        -: 4787:#ifdef DOCTEST_IS_DEBUGGER_ACTIVE
        -: 4788:        bool isDebuggerActive() { return DOCTEST_IS_DEBUGGER_ACTIVE(); }
        -: 4789:#else // DOCTEST_IS_DEBUGGER_ACTIVE
        -: 4790:#ifdef DOCTEST_PLATFORM_LINUX
        -: 4791:
        -: 4792:        class ErrnoGuard {
        -: 4793:        public:
function _ZN7doctest6detail10ErrnoGuardC1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail10ErrnoGuardC2Ev called 0 returned 0% blocks executed 0%
    #####: 4794:            ErrnoGuard() : m_oldErrno(errno) {}
    $$$$$: 4794-block  0
    $$$$$: 4794-block  1
        -: 4795:
function _ZN7doctest6detail10ErrnoGuardD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail10ErrnoGuardD2Ev called 0 returned 0% blocks executed 0%
    #####: 4796:            ~ErrnoGuard() { errno = m_oldErrno; }
    $$$$$: 4796-block  0
    $$$$$: 4796-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4796-block  2
    $$$$$: 4796-block  3
        -: 4797:
        -: 4798:        private:
        -: 4799:            int m_oldErrno;
        -: 4800:        };
        -: 4801:
        -: 4802:        // See the comments in Catch2 for the reasoning behind this implementation:
        -: 4803:        // https://github.com/catchorg/Catch2/blob/v2.13.1/include/internal/catch_debugger.cpp#L79-L102
function _ZN7doctest6detail16isDebuggerActiveEv called 0 returned 0% blocks executed 0%
    #####: 4804:        bool isDebuggerActive() {
    #####: 4805:            ErrnoGuard guard;
    #####: 4806:            std::ifstream in("/proc/self/status");
    $$$$$: 4806-block  0
branch  0 never executed
branch  1 never executed
    #####: 4807:            for (std::string line; std::getline(in, line);) {
    $$$$$: 4807-block  0
    $$$$$: 4807-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 4807-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 4807-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 4807-block  4
    $$$$$: 4807-block  5
    $$$$$: 4807-block  6
branch  6 never executed
branch  7 never executed
        -: 4808:                static const int PREFIX_LEN = 11;
    #####: 4809:                if (line.compare(0, PREFIX_LEN, "TracerPid:\t") == 0) {
    $$$$$: 4809-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4809-block  1
branch  2 never executed
branch  3 never executed
    #####: 4810:                    return line.length() > PREFIX_LEN && line[PREFIX_LEN] != '0';
    $$$$$: 4810-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4810-block  1
    $$$$$: 4810-block  2
        -: 4811:                }
        -: 4812:            }
    #####: 4813:            return false;
    $$$$$: 4813-block  0
    #####: 4814:        }
    $$$$$: 4814-block  0
    $$$$$: 4814-block  1
    $$$$$: 4814-block  2
    $$$$$: 4814-block  3
    $$$$$: 4814-block  4
    $$$$$: 4814-block  5
        -: 4815:
        -: 4816:#elif defined(DOCTEST_PLATFORM_MAC)
        -: 4817:                                                                                                                                // The following function is taken directly from the following technical note:
        -: 4818:    // https://developer.apple.com/library/archive/qa/qa1361/_index.html
        -: 4819:    // Returns true if the current process is being debugged (either
        -: 4820:    // running under the debugger or has a debugger attached post facto).
        -: 4821:    bool isDebuggerActive() {
        -: 4822:        int        mib[4];
        -: 4823:        kinfo_proc info;
        -: 4824:        size_t     size;
        -: 4825:        // Initialize the flags so that, if sysctl fails for some bizarre
        -: 4826:        // reason, we get a predictable result.
        -: 4827:        info.kp_proc.p_flag = 0;
        -: 4828:        // Initialize mib, which tells sysctl the info we want, in this case
        -: 4829:        // we're looking for information about a specific process ID.
        -: 4830:        mib[0] = CTL_KERN;
        -: 4831:        mib[1] = KERN_PROC;
        -: 4832:        mib[2] = KERN_PROC_PID;
        -: 4833:        mib[3] = getpid();
        -: 4834:        // Call sysctl.
        -: 4835:        size = sizeof(info);
        -: 4836:        if(sysctl(mib, DOCTEST_COUNTOF(mib), &info, &size, 0, 0) != 0) {
        -: 4837:            std::cerr << "\nCall to sysctl failed - unable to determine if debugger is active **\n";
        -: 4838:            return false;
        -: 4839:        }
        -: 4840:        // We're being debugged if the P_TRACED flag is set.
        -: 4841:        return ((info.kp_proc.p_flag & P_TRACED) != 0);
        -: 4842:    }
        -: 4843:#elif DOCTEST_MSVC || defined(__MINGW32__) || defined(__MINGW64__)
        -: 4844:    bool isDebuggerActive() { return ::IsDebuggerPresent() != 0; }
        -: 4845:#else
        -: 4846:    bool isDebuggerActive() { return false; }
        -: 4847:#endif // Platform
        -: 4848:#endif // DOCTEST_IS_DEBUGGER_ACTIVE
        -: 4849:
function _ZN7doctest6detail31registerExceptionTranslatorImplEPKNS0_20IExceptionTranslatorE called 0 returned 0% blocks executed 0%
    #####: 4850:        void registerExceptionTranslatorImpl(const IExceptionTranslator *et) {
    #####: 4851:            if (std::find(getExceptionTranslators().begin(), getExceptionTranslators().end(), et) ==
    $$$$$: 4851-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4851-block  1
branch  2 never executed
branch  3 never executed
    #####: 4852:                getExceptionTranslators().end())
    #####: 4853:                getExceptionTranslators().push_back(et);
    $$$$$: 4853-block  0
    #####: 4854:        }
    $$$$$: 4854-block  0
        -: 4855:
        -: 4856:        DOCTEST_THREAD_LOCAL std::vector<IContextScope *> g_infoContexts; // for logging with INFO()
        -: 4857:
function _ZN7doctest6detail16ContextScopeBaseC2Ev called 0 returned 0% blocks executed 0%
    #####: 4858:        ContextScopeBase::ContextScopeBase() {
    #####: 4859:            g_infoContexts.push_back(this);
    $$$$$: 4859-block  0
branch  0 never executed
branch  1 never executed
    #####: 4860:        }
    $$$$$: 4860-block  0
    $$$$$: 4860-block  1
    $$$$$: 4860-block  2
        -: 4861:
function _ZN7doctest6detail16ContextScopeBaseC2EOS1_ called 0 returned 0% blocks executed 0%
    #####: 4862:        ContextScopeBase::ContextScopeBase(ContextScopeBase &&other) noexcept {
    #####: 4863:            if (other.need_to_destroy) {
    $$$$$: 4863-block  0
branch  0 never executed
branch  1 never executed
    #####: 4864:                other.destroy();
    $$$$$: 4864-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4864-block  1
    #####: 4865:            }
    $$$$$: 4865-block  0
    #####: 4866:            other.need_to_destroy = false;
    #####: 4867:            g_infoContexts.push_back(this);
    $$$$$: 4867-block  0
branch  0 never executed
branch  1 never executed
    #####: 4868:        }
    $$$$$: 4868-block  0
        -: 4869:
        -: 4870:        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) // std::uncaught_exception is deprecated in C++17
        -: 4871:        DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")
        -: 4872:        DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")
        -: 4873:
        -: 4874:        // destroy cannot be inlined into the destructor because that would mean calling stringify after
        -: 4875:        // ContextScope has been destroyed (base class destructors run after derived class destructors).
        -: 4876:        // Instead, ContextScope calls this method directly from its destructor.
function _ZN7doctest6detail16ContextScopeBase7destroyEv called 0 returned 0% blocks executed 0%
    #####: 4877:        void ContextScopeBase::destroy() {
        -: 4878:#if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)
    #####: 4879:            if (std::uncaught_exceptions() > 0) {
    $$$$$: 4879-block  0
branch  0 never executed
branch  1 never executed
        -: 4880:#else
        -: 4881:                if(std::uncaught_exception()) {
        -: 4882:#endif
    #####: 4883:                std::ostringstream s;
    #####: 4884:                this->stringify(&s);
    $$$$$: 4884-block  0
branch  0 never executed
branch  1 never executed
    #####: 4885:                g_cs->stringifiedContexts.push_back(s.str().c_str());
    $$$$$: 4885-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 4885-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 4885-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 4885-block  3
    $$$$$: 4885-block  4
    #####: 4886:            }
    $$$$$: 4886-block  0
    $$$$$: 4886-block  1
    $$$$$: 4886-block  2
    #####: 4887:            g_infoContexts.pop_back();
    #####: 4888:        }
    $$$$$: 4888-block  0
    $$$$$: 4888-block  1
    $$$$$: 4888-block  2
        -: 4889:
        -: 4890:        DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 4891:        DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 4892:        DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 4893:    } // namespace detail
        -: 4894:    namespace {
        -: 4895:        using namespace detail;
        -: 4896:
        -: 4897:#if !defined(DOCTEST_CONFIG_POSIX_SIGNALS) && !defined(DOCTEST_CONFIG_WINDOWS_SEH)
        -: 4898:                                                                                                                                struct FatalConditionHandler
        -: 4899:    {
        -: 4900:        static void reset() {}
        -: 4901:        static void allocateAltStackMem() {}
        -: 4902:        static void freeAltStackMem() {}
        -: 4903:    };
        -: 4904:#else // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH
        -: 4905:
        -: 4906:        void reportFatal(const std::string &);
        -: 4907:
        -: 4908:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 4909:
        -: 4910:                                                                                                                                struct SignalDefs
        -: 4911:    {
        -: 4912:        DWORD id;
        -: 4913:        const char* name;
        -: 4914:    };
        -: 4915:    // There is no 1-1 mapping between signals and windows exceptions.
        -: 4916:    // Windows can easily distinguish between SO and SigSegV,
        -: 4917:    // but SigInt, SigTerm, etc are handled differently.
        -: 4918:    SignalDefs signalDefs[] = {
        -: 4919:            {static_cast<DWORD>(EXCEPTION_ILLEGAL_INSTRUCTION),
        -: 4920:             "SIGILL - Illegal instruction signal"},
        -: 4921:            {static_cast<DWORD>(EXCEPTION_STACK_OVERFLOW), "SIGSEGV - Stack overflow"},
        -: 4922:            {static_cast<DWORD>(EXCEPTION_ACCESS_VIOLATION),
        -: 4923:             "SIGSEGV - Segmentation violation signal"},
        -: 4924:            {static_cast<DWORD>(EXCEPTION_INT_DIVIDE_BY_ZERO), "Divide by zero error"},
        -: 4925:    };
        -: 4926:
        -: 4927:    struct FatalConditionHandler
        -: 4928:    {
        -: 4929:        static LONG CALLBACK handleException(PEXCEPTION_POINTERS ExceptionInfo) {
        -: 4930:            // Multiple threads may enter this filter/handler at once. We want the error message to be printed on the
        -: 4931:            // console just once no matter how many threads have crashed.
        -: 4932:            DOCTEST_DECLARE_STATIC_MUTEX(mutex)
        -: 4933:            static bool execute = true;
        -: 4934:            {
        -: 4935:                DOCTEST_LOCK_MUTEX(mutex)
        -: 4936:                if(execute) {
        -: 4937:                    bool reported = false;
        -: 4938:                    for(size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) {
        -: 4939:                        if(ExceptionInfo->ExceptionRecord->ExceptionCode == signalDefs[i].id) {
        -: 4940:                            reportFatal(signalDefs[i].name);
        -: 4941:                            reported = true;
        -: 4942:                            break;
        -: 4943:                        }
        -: 4944:                    }
        -: 4945:                    if(reported == false)
        -: 4946:                        reportFatal("Unhandled SEH exception caught");
        -: 4947:                    if(isDebuggerActive() && !g_cs->no_breaks)
        -: 4948:                        DOCTEST_BREAK_INTO_DEBUGGER();
        -: 4949:                }
        -: 4950:                execute = false;
        -: 4951:            }
        -: 4952:            std::exit(EXIT_FAILURE);
        -: 4953:        }
        -: 4954:
        -: 4955:        static void allocateAltStackMem() {}
        -: 4956:        static void freeAltStackMem() {}
        -: 4957:
        -: 4958:        FatalConditionHandler() {
        -: 4959:            isSet = true;
        -: 4960:            // 32k seems enough for doctest to handle stack overflow,
        -: 4961:            // but the value was found experimentally, so there is no strong guarantee
        -: 4962:            guaranteeSize = 32 * 1024;
        -: 4963:            // Register an unhandled exception filter
        -: 4964:            previousTop = SetUnhandledExceptionFilter(handleException);
        -: 4965:            // Pass in guarantee size to be filled
        -: 4966:            SetThreadStackGuarantee(&guaranteeSize);
        -: 4967:
        -: 4968:            // On Windows uncaught exceptions from another thread, exceptions from
        -: 4969:            // destructors, or calls to std::terminate are not a SEH exception
        -: 4970:
        -: 4971:            // The terminal handler gets called when:
        -: 4972:            // - std::terminate is called FROM THE TEST RUNNER THREAD
        -: 4973:            // - an exception is thrown from a destructor FROM THE TEST RUNNER THREAD
        -: 4974:            original_terminate_handler = std::get_terminate();
        -: 4975:            std::set_terminate([]() DOCTEST_NOEXCEPT {
        -: 4976:                reportFatal("Terminate handler called");
        -: 4977:                if(isDebuggerActive() && !g_cs->no_breaks)
        -: 4978:                    DOCTEST_BREAK_INTO_DEBUGGER();
        -: 4979:                std::exit(EXIT_FAILURE); // explicitly exit - otherwise the SIGABRT handler may be called as well
        -: 4980:            });
        -: 4981:
        -: 4982:            // SIGABRT is raised when:
        -: 4983:            // - std::terminate is called FROM A DIFFERENT THREAD
        -: 4984:            // - an exception is thrown from a destructor FROM A DIFFERENT THREAD
        -: 4985:            // - an uncaught exception is thrown FROM A DIFFERENT THREAD
        -: 4986:            prev_sigabrt_handler = std::signal(SIGABRT, [](int signal) DOCTEST_NOEXCEPT {
        -: 4987:                if(signal == SIGABRT) {
        -: 4988:                    reportFatal("SIGABRT - Abort (abnormal termination) signal");
        -: 4989:                    if(isDebuggerActive() && !g_cs->no_breaks)
        -: 4990:                        DOCTEST_BREAK_INTO_DEBUGGER();
        -: 4991:                    std::exit(EXIT_FAILURE);
        -: 4992:                }
        -: 4993:            });
        -: 4994:
        -: 4995:            // The following settings are taken from google test, and more
        -: 4996:            // specifically from UnitTest::Run() inside of gtest.cc
        -: 4997:
        -: 4998:            // the user does not want to see pop-up dialogs about crashes
        -: 4999:            prev_error_mode_1 = SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5000:                                             SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5001:            // This forces the abort message to go to stderr in all circumstances.
        -: 5002:            prev_error_mode_2 = _set_error_mode(_OUT_TO_STDERR);
        -: 5003:            // In the debug version, Visual Studio pops up a separate dialog
        -: 5004:            // offering a choice to debug the aborted program - we want to disable that.
        -: 5005:            prev_abort_behavior = _set_abort_behavior(0x0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);
        -: 5006:            // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5007:            // input (e.g. passing an invalid file descriptor). The default handling
        -: 5008:            // for these assertions is to pop up a dialog and wait for user input.
        -: 5009:            // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5010:            prev_report_mode = _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5011:            prev_report_file = _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5012:        }
        -: 5013:
        -: 5014:        static void reset() {
        -: 5015:            if(isSet) {
        -: 5016:                // Unregister handler and restore the old guarantee
        -: 5017:                SetUnhandledExceptionFilter(previousTop);
        -: 5018:                SetThreadStackGuarantee(&guaranteeSize);
        -: 5019:                std::set_terminate(original_terminate_handler);
        -: 5020:                std::signal(SIGABRT, prev_sigabrt_handler);
        -: 5021:                SetErrorMode(prev_error_mode_1);
        -: 5022:                _set_error_mode(prev_error_mode_2);
        -: 5023:                _set_abort_behavior(prev_abort_behavior, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);
        -: 5024:                static_cast<void>(_CrtSetReportMode(_CRT_ASSERT, prev_report_mode));
        -: 5025:                static_cast<void>(_CrtSetReportFile(_CRT_ASSERT, prev_report_file));
        -: 5026:                isSet = false;
        -: 5027:            }
        -: 5028:        }
        -: 5029:
        -: 5030:        ~FatalConditionHandler() { reset(); }
        -: 5031:
        -: 5032:    private:
        -: 5033:        static UINT         prev_error_mode_1;
        -: 5034:        static int          prev_error_mode_2;
        -: 5035:        static unsigned int prev_abort_behavior;
        -: 5036:        static int          prev_report_mode;
        -: 5037:        static _HFILE       prev_report_file;
        -: 5038:        static void (DOCTEST_CDECL *prev_sigabrt_handler)(int);
        -: 5039:        static std::terminate_handler original_terminate_handler;
        -: 5040:        static bool isSet;
        -: 5041:        static ULONG guaranteeSize;
        -: 5042:        static LPTOP_LEVEL_EXCEPTION_FILTER previousTop;
        -: 5043:    };
        -: 5044:
        -: 5045:    UINT         FatalConditionHandler::prev_error_mode_1;
        -: 5046:    int          FatalConditionHandler::prev_error_mode_2;
        -: 5047:    unsigned int FatalConditionHandler::prev_abort_behavior;
        -: 5048:    int          FatalConditionHandler::prev_report_mode;
        -: 5049:    _HFILE       FatalConditionHandler::prev_report_file;
        -: 5050:    void (DOCTEST_CDECL *FatalConditionHandler::prev_sigabrt_handler)(int);
        -: 5051:    std::terminate_handler FatalConditionHandler::original_terminate_handler;
        -: 5052:    bool FatalConditionHandler::isSet = false;
        -: 5053:    ULONG FatalConditionHandler::guaranteeSize = 0;
        -: 5054:    LPTOP_LEVEL_EXCEPTION_FILTER FatalConditionHandler::previousTop = nullptr;
        -: 5055:
        -: 5056:#else // DOCTEST_PLATFORM_WINDOWS
        -: 5057:
        -: 5058:        struct SignalDefs {
        -: 5059:            int id;
        -: 5060:            const char *name;
        -: 5061:        };
        -: 5062:        SignalDefs signalDefs[] = {{SIGINT,  "SIGINT - Terminal interrupt signal"},
        -: 5063:                                   {SIGILL,  "SIGILL - Illegal instruction signal"},
        -: 5064:                                   {SIGFPE,  "SIGFPE - Floating point error signal"},
        -: 5065:                                   {SIGSEGV, "SIGSEGV - Segmentation violation signal"},
        -: 5066:                                   {SIGTERM, "SIGTERM - Termination request signal"},
        -: 5067:                                   {SIGABRT, "SIGABRT - Abort (abnormal termination) signal"}};
        -: 5068:
        -: 5069:        struct FatalConditionHandler {
        -: 5070:            static bool isSet;
        -: 5071:            static struct sigaction oldSigActions[DOCTEST_COUNTOF(signalDefs)];
        -: 5072:            static stack_t oldSigStack;
        -: 5073:            static size_t altStackSize;
        -: 5074:            static char *altStackMem;
        -: 5075:
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandler12handleSignalEi called 0 returned 0% blocks executed 0%
    #####: 5076:            static void handleSignal(int sig) {
    #####: 5077:                const char *name = "<unknown signal>";
    #####: 5078:                for (std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) {
    $$$$$: 5078-block  0
    $$$$$: 5078-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5078-block  2
    #####: 5079:                    SignalDefs &def = signalDefs[i];
    #####: 5080:                    if (sig == def.id) {
    $$$$$: 5080-block  0
branch  0 never executed
branch  1 never executed
    #####: 5081:                        name = def.name;
    #####: 5082:                        break;
    $$$$$: 5082-block  0
        -: 5083:                    }
    #####: 5084:                }
    $$$$$: 5084-block  0
    #####: 5085:                reset();
    #####: 5086:                reportFatal(name);
    $$$$$: 5086-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5086-block  1
    $$$$$: 5086-block  2
    #####: 5087:                raise(sig);
    #####: 5088:            }
    $$$$$: 5088-block  0
        -: 5089:
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandler19allocateAltStackMemEv called 1 returned 100% blocks executed 100%
        1: 5090:            static void allocateAltStackMem() {
        1: 5091:                altStackMem = new char[altStackSize];
        1: 5092:            }
        1: 5092-block  0
        -: 5093:
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandler15freeAltStackMemEv called 1 returned 100% blocks executed 100%
        1: 5094:            static void freeAltStackMem() {
        1: 5095:                delete[] altStackMem;
        1: 5095-block  0
branch  0 taken 1
branch  1 taken 0
        1: 5095-block  1
        1: 5096:            }
        1: 5096-block  0
        -: 5097:
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandlerC1Ev called 8 returned 100% blocks executed 100%
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandlerC2Ev called 8 returned 100% blocks executed 100%
       16: 5098:            FatalConditionHandler() {
        8: 5099:                isSet = true;
        -: 5100:                stack_t sigStack;
        8: 5101:                sigStack.ss_sp = altStackMem;
        8: 5102:                sigStack.ss_size = altStackSize;
        8: 5103:                sigStack.ss_flags = 0;
        8: 5104:                sigaltstack(&sigStack, &oldSigStack);
        8: 5105:                struct sigaction sa = {};
        8: 5106:                sa.sa_handler = handleSignal;
        8: 5107:                sa.sa_flags = SA_ONSTACK;
       56: 5108:                for (std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) {
        8: 5108-block  0
       56: 5108-block  1
branch  0 taken 48
branch  1 taken 8
       48: 5108-block  2
       48: 5109:                    sigaction(signalDefs[i].id, &sa, &oldSigActions[i]);
       48: 5110:                }
       48: 5110-block  0
       16: 5111:            }
        8: 5111-block  0
        8: 5111-block  1
        -: 5112:
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandlerD1Ev called 8 returned 100% blocks executed 100%
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandlerD2Ev called 8 returned 100% blocks executed 66%
       16: 5113:            ~FatalConditionHandler() { reset(); }
        8: 5113-block  0
        8: 5113-block  1
branch  0 taken 8
branch  1 taken 0
        8: 5113-block  2
    $$$$$: 5113-block  3
        -: 5114:
function _ZN7doctest12_GLOBAL__N_121FatalConditionHandler5resetEv called 16 returned 100% blocks executed 100%
       16: 5115:            static void reset() {
       16: 5116:                if (isSet) {
       16: 5116-block  0
branch  0 taken 8
branch  1 taken 8
        -: 5117:                    // Set signals back to previous values -- hopefully nobody overwrote them in the meantime
       56: 5118:                    for (std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) {
        8: 5118-block  0
       56: 5118-block  1
branch  0 taken 48
branch  1 taken 8
       48: 5118-block  2
       48: 5119:                        sigaction(signalDefs[i].id, &oldSigActions[i], nullptr);
       48: 5120:                    }
       48: 5120-block  0
        -: 5121:                    // Return the old stack
        8: 5122:                    sigaltstack(&oldSigStack, nullptr);
        8: 5123:                    isSet = false;
        8: 5124:                }
        8: 5124-block  0
       16: 5125:            }
       16: 5125-block  0
        -: 5126:        };
        -: 5127:
        -: 5128:        bool             FatalConditionHandler::isSet = false;
        -: 5129:        struct sigaction FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)] = {};
        -: 5130:        stack_t          FatalConditionHandler::oldSigStack = {};
        -: 5131:        size_t           FatalConditionHandler::altStackSize = 4 * SIGSTKSZ;
        -: 5132:        char *FatalConditionHandler::altStackMem = nullptr;
        -: 5133:
        -: 5134:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 5135:#endif // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH
        -: 5136:
        -: 5137:    } // namespace
        -: 5138:
        -: 5139:    namespace {
        -: 5140:        using namespace detail;
        -: 5141:
        -: 5142:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 5143:#define DOCTEST_OUTPUT_DEBUG_STRING(text) ::OutputDebugStringA(text)
        -: 5144:#else
        -: 5145:        // TODO: integration with XCode and other IDEs
        -: 5146:#define DOCTEST_OUTPUT_DEBUG_STRING(text)
        -: 5147:#endif // Platform
        -: 5148:
function _ZN7doctest12_GLOBAL__N_19addAssertENS_10assertType4EnumE called 23 returned 100% blocks executed 100%
       23: 5149:        void addAssert(assertType::Enum at) {
       23: 5150:            if ((at & assertType::is_warn) == 0) //!OCLINT bitwise operator in conditional
       23: 5150-block  0
branch  0 taken 0
branch  1 taken 23
       23: 5151:                g_cs->numAssertsCurrentTest_atomic++;
       23: 5151-block  0
       23: 5152:        }
       23: 5152-block  0
        -: 5153:
function _ZN7doctest12_GLOBAL__N_115addFailedAssertENS_10assertType4EnumE called 0 returned 0% blocks executed 0%
    #####: 5154:        void addFailedAssert(assertType::Enum at) {
    #####: 5155:            if ((at & assertType::is_warn) == 0) //!OCLINT bitwise operator in conditional
    $$$$$: 5155-block  0
branch  0 never executed
branch  1 never executed
    #####: 5156:                g_cs->numAssertsFailedCurrentTest_atomic++;
    $$$$$: 5156-block  0
    #####: 5157:        }
    $$$$$: 5157-block  0
        -: 5158:
        -: 5159:#if defined(DOCTEST_CONFIG_POSIX_SIGNALS) || defined(DOCTEST_CONFIG_WINDOWS_SEH)
        -: 5160:
function _ZN7doctest12_GLOBAL__N_111reportFatalERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE called 0 returned 0% blocks executed 0%
    #####: 5161:        void reportFatal(const std::string &message) {
    #####: 5162:            g_cs->failure_flags |= TestCaseFailureReason::Crash;
        -: 5163:
    #####: 5164:            DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception, { message.c_str(), true });
    $$$$$: 5164-block  0
    $$$$$: 5164-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5164-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5164-block  3
    $$$$$: 5164-block  4
    $$$$$: 5164-block  5
    $$$$$: 5164-block  6
        -: 5165:
    #####: 5166:            while (g_cs->subcaseStack.size()) {
    $$$$$: 5166-block  0
    $$$$$: 5166-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5166-block  2
    #####: 5167:                g_cs->subcaseStack.pop_back();
    #####: 5168:                DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);
    $$$$$: 5168-block  0
    $$$$$: 5168-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5168-block  2
    $$$$$: 5168-block  3
        -: 5169:            }
        -: 5170:
    #####: 5171:            g_cs->finalizeTestCaseData();
        -: 5172:
    #####: 5173:            DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);
    $$$$$: 5173-block  0
    $$$$$: 5173-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5173-block  2
    $$$$$: 5173-block  3
        -: 5174:
    #####: 5175:            DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);
    $$$$$: 5175-block  0
    $$$$$: 5175-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5175-block  2
    $$$$$: 5175-block  3
    #####: 5176:        }
    $$$$$: 5176-block  0
        -: 5177:
        -: 5178:#endif // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH
        -: 5179:    } // namespace
        -: 5180:
function _ZN7doctest10AssertDataC2ENS_10assertType4EnumEPKciS4_S4_RKNS0_14StringContainsE called 23 returned 100% blocks executed 50%
function _ZN7doctest10AssertDataC1ENS_10assertType4EnumEPKciS4_S4_RKNS0_14StringContainsE called 0 returned 0% blocks executed 0%
       46: 5181:    AssertData::AssertData(assertType::Enum at, const char *file, int line, const char *expr,
        -: 5182:                           const char *exception_type, const StringContains &exception_string)
       23: 5183:            : m_test_case(g_cs->currentTest), m_at(at), m_file(file), m_line(line), m_expr(expr),
       46: 5184:              m_failed(true), m_threw(false), m_threw_as(false), m_exception_type(exception_type),
       23: 5185:              m_exception_string(exception_string) {
       23: 5185-block  0
branch  0 taken 23
branch  1 taken 0
        -: 5186:#if DOCTEST_MSVC
        -: 5187:                                                                                                                                if (m_expr[0] == ' ') // this happens when variadic macros are disabled under MSVC
        -: 5188:        ++m_expr;
        -: 5189:#endif // MSVC
       23: 5190:    }
       23: 5190-block  0
    $$$$$: 5190-block  1
    $$$$$: 5190-block  2
    $$$$$: 5190-block  3
        -: 5191:
        -: 5192:    namespace detail {
function _ZN7doctest6detail13ResultBuilderC2ENS_10assertType4EnumEPKciS5_S5_RKNS_6StringE called 23 returned 100% blocks executed 50%
function _ZN7doctest6detail13ResultBuilderC1ENS_10assertType4EnumEPKciS5_S5_RKNS_6StringE called 23 returned 100% blocks executed 100%
       46: 5193:        ResultBuilder::ResultBuilder(assertType::Enum at, const char *file, int line, const char *expr,
        -: 5194:                                     const char *exception_type, const String &exception_string)
       46: 5195:                : AssertData(at, file, line, expr, exception_type, exception_string) {}
       23: 5195-block  0
branch  0 taken 23
branch  1 taken 0
       23: 5195-block  1
    $$$$$: 5195-block  2
    $$$$$: 5195-block  3
       23: 5195-block  4
        -: 5196:
function _ZN7doctest6detail13ResultBuilderC2ENS_10assertType4EnumEPKciS5_S5_RKNS_8ContainsE called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail13ResultBuilderC1ENS_10assertType4EnumEPKciS5_S5_RKNS_8ContainsE called 0 returned 0% blocks executed 0%
    #####: 5197:        ResultBuilder::ResultBuilder(assertType::Enum at, const char *file, int line, const char *expr,
        -: 5198:                                     const char *exception_type, const Contains &exception_string)
    #####: 5199:                : AssertData(at, file, line, expr, exception_type, exception_string) {}
    $$$$$: 5199-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5199-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5199-block  2
    $$$$$: 5199-block  3
    $$$$$: 5199-block  4
    $$$$$: 5199-block  5
    $$$$$: 5199-block  6
    $$$$$: 5199-block  7
        -: 5200:
function _ZN7doctest6detail13ResultBuilder9setResultERKNS0_6ResultE called 22 returned 100% blocks executed 100%
       22: 5201:        void ResultBuilder::setResult(const Result &res) {
       22: 5202:            m_decomp = res.m_decomp;
       22: 5203:            m_failed = !res.m_passed;
       22: 5204:        }
       22: 5204-block  0
        -: 5205:
function _ZN7doctest6detail13ResultBuilder18translateExceptionEv called 1 returned 100% blocks executed 100%
        1: 5206:        void ResultBuilder::translateException() {
        1: 5207:            m_threw = true;
        1: 5208:            m_exception = translateActiveException();
        1: 5209:        }
        1: 5209-block  0
        -: 5210:
function _ZN7doctest6detail13ResultBuilder3logEv called 23 returned 100% blocks executed 52%
       23: 5211:        bool ResultBuilder::log() {
       23: 5212:            if (m_at & assertType::is_throws) { //!OCLINT bitwise operator in conditional
       23: 5212-block  0
branch  0 taken 1
branch  1 taken 22
        1: 5213:                m_failed = !m_threw;
       23: 5214:            } else if ((m_at & assertType::is_throws_as) && (m_at & assertType::is_throws_with)) { //!OCLINT
        1: 5214-block  0
       22: 5214-block  1
branch  0 taken 0
branch  1 taken 22
    $$$$$: 5214-block  2
branch  2 never executed
branch  3 never executed
    #####: 5215:                m_failed = !m_threw_as || !m_exception_string.check(m_exception);
    $$$$$: 5215-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5215-block  1
       22: 5216:            } else if (m_at & assertType::is_throws_as) { //!OCLINT bitwise operator in conditional
    $$$$$: 5216-block  0
       22: 5216-block  1
branch  0 taken 0
branch  1 taken 22
    #####: 5217:                m_failed = !m_threw_as;
       22: 5218:            } else if (m_at & assertType::is_throws_with) { //!OCLINT bitwise operator in conditional
    $$$$$: 5218-block  0
       22: 5218-block  1
branch  0 taken 0
branch  1 taken 22
    #####: 5219:                m_failed = !m_exception_string.check(m_exception);
       22: 5220:            } else if (m_at & assertType::is_nothrow) { //!OCLINT bitwise operator in conditional
    $$$$$: 5220-block  0
       22: 5220-block  1
branch  0 taken 22
branch  1 taken 0
    #####: 5221:                m_failed = m_threw;
    #####: 5222:            }
    $$$$$: 5222-block  0
        -: 5223:
       23: 5224:            if (m_exception.size())
       23: 5224-block  0
branch  0 taken 22
branch  1 taken 1
        1: 5225:                m_exception = "\"" + m_exception + "\"";
        1: 5225-block  0
branch  0 taken 1
branch  1 taken 0
        1: 5225-block  1
branch  2 taken 1
branch  3 taken 0
        1: 5225-block  2
branch  4 taken 0
branch  5 taken 1
        1: 5225-block  3
    $$$$$: 5225-block  4
    $$$$$: 5225-block  5
    $$$$$: 5225-block  6
    $$$$$: 5225-block  7
        -: 5226:
       23: 5227:            if (is_running_in_test) {
       23: 5227-block  0
branch  0 taken 23
branch  1 taken 0
       23: 5228:                addAssert(m_at);
       46: 5229:                DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert, *this);
       23: 5229-block  0
       46: 5229-block  1
branch  0 taken 23
branch  1 taken 23
       23: 5229-block  2
       23: 5229-block  3
        -: 5230:
       23: 5231:                if (m_failed)
       23: 5231-block  0
branch  0 taken 23
branch  1 taken 0
    #####: 5232:                    addFailedAssert(m_at);
    $$$$$: 5232-block  0
       23: 5233:            } else if (m_failed) {
       23: 5233-block  0
    $$$$$: 5233-block  1
branch  0 never executed
branch  1 never executed
    #####: 5234:                failed_out_of_a_testing_context(*this);
    #####: 5235:            }
    $$$$$: 5235-block  0
        -: 5236:
       23: 5237:            return m_failed && isDebuggerActive() && !getContextOptions()->no_breaks &&
       23: 5237-block  0
branch  0 taken 0
branch  1 taken 23
    $$$$$: 5237-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5237-block  2
branch  4 never executed
branch  5 never executed
       23: 5237-block  3
    #####: 5238:                   (g_cs->currentTest == nullptr || !g_cs->currentTest->m_no_breaks); // break into debugger
    $$$$$: 5238-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5238-block  1
    #####: 5239:        }
    $$$$$: 5239-block  0
    $$$$$: 5239-block  1
        -: 5240:
function _ZNK7doctest6detail13ResultBuilder5reactEv called 23 returned 100% blocks executed 50%
       23: 5241:        void ResultBuilder::react() const {
       23: 5242:            if (m_failed && checkIfShouldThrow(m_at))
       23: 5242-block  0
branch  0 taken 0
branch  1 taken 23
    $$$$$: 5242-block  1
branch  2 never executed
branch  3 never executed
    #####: 5243:                throwException();
    $$$$$: 5243-block  0
       23: 5244:        }
       23: 5244-block  0
        -: 5245:
function _ZN7doctest6detail31failed_out_of_a_testing_contextERKNS_10AssertDataE called 0 returned 0% blocks executed 0%
    #####: 5246:        void failed_out_of_a_testing_context(const AssertData &ad) {
    #####: 5247:            if (g_cs->ah)
    $$$$$: 5247-block  0
branch  0 never executed
branch  1 never executed
    #####: 5248:                g_cs->ah(ad);
    $$$$$: 5248-block  0
        -: 5249:            else
    #####: 5250:                std::abort();
    $$$$$: 5250-block  0
    #####: 5251:        }
    $$$$$: 5251-block  0
        -: 5252:
function _ZN7doctest6detail13decomp_assertENS_10assertType4EnumEPKciS4_RKNS0_6ResultE called 0 returned 0% blocks executed 0%
    #####: 5253:        bool decomp_assert(assertType::Enum at, const char *file, int line, const char *expr,
        -: 5254:                           const Result &result) {
    #####: 5255:            bool failed = !result.m_passed;
        -: 5256:
        -: 5257:            // ###################################################################################
        -: 5258:            // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT
        -: 5259:            // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED
        -: 5260:            // ###################################################################################
    #####: 5261:            DOCTEST_ASSERT_OUT_OF_TESTS(result.m_decomp);
    $$$$$: 5261-block  0
    $$$$$: 5261-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5261-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5261-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 5261-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 5261-block  5
branch  8 never executed
branch  9 never executed
    $$$$$: 5261-block  6
branch 10 never executed
branch 11 never executed
    $$$$$: 5261-block  7
branch 12 never executed
branch 13 never executed
    $$$$$: 5261-block  8
branch 14 never executed
branch 15 never executed
    $$$$$: 5261-block  9
branch 16 never executed
branch 17 never executed
    $$$$$: 5261-block 10
    $$$$$: 5261-block 11
    $$$$$: 5261-block 12
    $$$$$: 5261-block 13
branch 18 never executed
branch 19 never executed
    $$$$$: 5261-block 14
branch 20 never executed
branch 21 never executed
    $$$$$: 5261-block 15
    $$$$$: 5261-block 16
    $$$$$: 5261-block 17
    $$$$$: 5261-block 18
    $$$$$: 5261-block 19
    #####: 5262:            DOCTEST_ASSERT_IN_TESTS(result.m_decomp);
    $$$$$: 5262-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5262-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5262-block  2
    $$$$$: 5262-block  3
    $$$$$: 5262-block  4
branch  4 never executed
branch  5 never executed
    $$$$$: 5262-block  5
    $$$$$: 5262-block  6
    $$$$$: 5262-block  7
branch  6 never executed
branch  7 never executed
    $$$$$: 5262-block  8
branch  8 never executed
branch  9 never executed
    $$$$$: 5262-block  9
branch 10 never executed
branch 11 never executed
    $$$$$: 5262-block 10
    $$$$$: 5262-block 11
branch 12 never executed
branch 13 never executed
    $$$$$: 5262-block 12
branch 14 never executed
branch 15 never executed
    $$$$$: 5262-block 13
branch 16 never executed
branch 17 never executed
    $$$$$: 5262-block 14
    #####: 5263:            return !failed;
    #####: 5264:        }
    $$$$$: 5264-block  0
    $$$$$: 5264-block  1
    $$$$$: 5264-block  2
        -: 5265:
function _ZN7doctest6detail14MessageBuilderC2EPKciNS_10assertType4EnumE called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail14MessageBuilderC1EPKciNS_10assertType4EnumE called 0 returned 0% blocks executed 0%
    #####: 5266:        MessageBuilder::MessageBuilder(const char *file, int line, assertType::Enum severity) {
    #####: 5267:            m_stream = tlssPush();
    $$$$$: 5267-block  0
branch  0 never executed
branch  1 never executed
    #####: 5268:            m_file = file;
    #####: 5269:            m_line = line;
    #####: 5270:            m_severity = severity;
    #####: 5271:        }
    $$$$$: 5271-block  0
    $$$$$: 5271-block  1
    $$$$$: 5271-block  2
    $$$$$: 5271-block  3
        -: 5272:
function _ZN7doctest6detail14MessageBuilderD2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail14MessageBuilderD1Ev called 0 returned 0% blocks executed 0%
    #####: 5273:        MessageBuilder::~MessageBuilder() {
    #####: 5274:            if (!logged)
    $$$$$: 5274-block  0
branch  0 never executed
branch  1 never executed
    #####: 5275:                tlssPop();
    $$$$$: 5275-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5275-block  1
    $$$$$: 5275-block  2
    #####: 5276:        }
    $$$$$: 5276-block  0
    $$$$$: 5276-block  1
        -: 5277:
function _ZN7doctest6detail20IExceptionTranslatorD2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail20IExceptionTranslatorD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest6detail20IExceptionTranslatorD0Ev called 0 returned 0% blocks executed 0%
    #####: 5278:        DOCTEST_DEFINE_INTERFACE(IExceptionTranslator)
    $$$$$: 5278-block  0
    $$$$$: 5278-block  1
    $$$$$: 5278-block  2
        -: 5279:
function _ZN7doctest6detail14MessageBuilder3logEv called 0 returned 0% blocks executed 0%
    #####: 5280:        bool MessageBuilder::log() {
    #####: 5281:            if (!logged) {
    $$$$$: 5281-block  0
branch  0 never executed
branch  1 never executed
    #####: 5282:                m_string = tlssPop();
    #####: 5283:                logged = true;
    #####: 5284:            }
    $$$$$: 5284-block  0
        -: 5285:
    #####: 5286:            DOCTEST_ITERATE_THROUGH_REPORTERS(log_message, *this);
    $$$$$: 5286-block  0
    $$$$$: 5286-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5286-block  2
    $$$$$: 5286-block  3
        -: 5287:
    #####: 5288:            const bool isWarn = m_severity & assertType::is_warn;
        -: 5289:
        -: 5290:            // warn is just a message in this context so we don't treat it as an assert
    #####: 5291:            if (!isWarn) {
    $$$$$: 5291-block  0
branch  0 never executed
branch  1 never executed
    #####: 5292:                addAssert(m_severity);
    #####: 5293:                addFailedAssert(m_severity);
    #####: 5294:            }
    $$$$$: 5294-block  0
        -: 5295:
    #####: 5296:            return isDebuggerActive() && !getContextOptions()->no_breaks && !isWarn &&
    $$$$$: 5296-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5296-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5296-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5296-block  3
    #####: 5297:                   (g_cs->currentTest == nullptr || !g_cs->currentTest->m_no_breaks); // break into debugger
    $$$$$: 5297-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5297-block  1
        -: 5298:        }
        -: 5299:
function _ZN7doctest6detail14MessageBuilder5reactEv called 0 returned 0% blocks executed 0%
    #####: 5300:        void MessageBuilder::react() {
    #####: 5301:            if (m_severity & assertType::is_require) //!OCLINT bitwise operator in conditional
    $$$$$: 5301-block  0
branch  0 never executed
branch  1 never executed
    #####: 5302:                throwException();
    $$$$$: 5302-block  0
    #####: 5303:        }
    $$$$$: 5303-block  0
        -: 5304:    } // namespace detail
        -: 5305:    namespace {
        -: 5306:        using namespace detail;
        -: 5307:
        -: 5308:        // clang-format off
        -: 5309:
        -: 5310:// =================================================================================================
        -: 5311:// The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp
        -: 5312:// This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.
        -: 5313:// =================================================================================================
        -: 5314:
function _ZN7doctest12_GLOBAL__N_19XmlEncodeD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlEncodeD2Ev called 0 returned 0% blocks executed 0%
        -: 5315:        class XmlEncode {
        -: 5316:        public:
        -: 5317:            enum ForWhat {
        -: 5318:                ForTextNodes, ForAttributes
        -: 5319:            };
        -: 5320:
        -: 5321:            XmlEncode(std::string const &str, ForWhat forWhat = ForTextNodes);
        -: 5322:
        -: 5323:            void encodeTo(std::ostream &os) const;
        -: 5324:
        -: 5325:            friend std::ostream &operator<<(std::ostream &os, XmlEncode const &xmlEncode);
        -: 5326:
        -: 5327:        private:
        -: 5328:            std::string m_str;
        -: 5329:            ForWhat m_forWhat;
        -: 5330:        };
        -: 5331:
        -: 5332:        class XmlWriter {
        -: 5333:        public:
        -: 5334:
        -: 5335:            class ScopedElement {
        -: 5336:            public:
        -: 5337:                ScopedElement(XmlWriter *writer);
        -: 5338:
        -: 5339:                ScopedElement(ScopedElement &&other) DOCTEST_NOEXCEPT;
        -: 5340:
        -: 5341:                ScopedElement &operator=(ScopedElement &&other) DOCTEST_NOEXCEPT;
        -: 5342:
        -: 5343:                ~ScopedElement();
        -: 5344:
        -: 5345:                ScopedElement &writeText(std::string const &text, bool indent = true);
        -: 5346:
        -: 5347:                template<typename T>
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement14writeAttributeIiEERS2_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement14writeAttributeINS_6StringEEERS2_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement14writeAttributeIPKcEERS2_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement14writeAttributeIjEERS2_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement14writeAttributeIbEERS2_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement14writeAttributeINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_RKSA_RKT_ called 0 returned 0% blocks executed 0%
    #####: 5348:                ScopedElement &writeAttribute(std::string const &name, T const &attribute) {
    #####: 5349:                    m_writer->writeAttribute(name, attribute);
    #####: 5350:                    return *this;
    $$$$$: 5350-block  0
    $$$$$: 5350-block  1
    $$$$$: 5350-block  2
    $$$$$: 5350-block  3
    $$$$$: 5350-block  4
    $$$$$: 5350-block  5
        -: 5351:                }
        -: 5352:
        -: 5353:            private:
        -: 5354:                mutable XmlWriter *m_writer = nullptr;
        -: 5355:            };
        -: 5356:
        -: 5357:#ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 5358:
        -: 5359:            XmlWriter(std::ostream &os = std::cout);
        -: 5360:
        -: 5361:#else // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 5362:            XmlWriter( std::ostream& os );
        -: 5363:#endif // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 5364:
        -: 5365:            ~XmlWriter();
        -: 5366:
        -: 5367:            XmlWriter(XmlWriter const &) = delete;
        -: 5368:
        -: 5369:            XmlWriter &operator=(XmlWriter const &) = delete;
        -: 5370:
        -: 5371:            XmlWriter &startElement(std::string const &name);
        -: 5372:
        -: 5373:            ScopedElement scopedElement(std::string const &name);
        -: 5374:
        -: 5375:            XmlWriter &endElement();
        -: 5376:
        -: 5377:            XmlWriter &writeAttribute(std::string const &name, std::string const &attribute);
        -: 5378:
        -: 5379:            XmlWriter &writeAttribute(std::string const &name, const char *attribute);
        -: 5380:
        -: 5381:            XmlWriter &writeAttribute(std::string const &name, bool attribute);
        -: 5382:
        -: 5383:            template<typename T>
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeIiEERS1_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeINS_6StringEEERS1_RKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeIjEERS1_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeIdEERS1_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKT_ called 0 returned 0% blocks executed 0%
    #####: 5384:            XmlWriter &writeAttribute(std::string const &name, T const &attribute) {
    #####: 5385:                std::stringstream rss;
    #####: 5386:                rss << attribute;
    $$$$$: 5386-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5386-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5386-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5386-block  3
branch  6 never executed
branch  7 never executed
    #####: 5387:                return writeAttribute(name, rss.str());
    $$$$$: 5387-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5387-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5387-block  2
    $$$$$: 5387-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 5387-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 5387-block  5
    $$$$$: 5387-block  6
branch  8 never executed
branch  9 never executed
    $$$$$: 5387-block  7
branch 10 never executed
branch 11 never executed
    $$$$$: 5387-block  8
    $$$$$: 5387-block  9
branch 12 never executed
branch 13 never executed
    $$$$$: 5387-block 10
branch 14 never executed
branch 15 never executed
    $$$$$: 5387-block 11
    #####: 5388:            }
    $$$$$: 5388-block  0
    $$$$$: 5388-block  1
    $$$$$: 5388-block  2
    $$$$$: 5388-block  3
    $$$$$: 5388-block  4
    $$$$$: 5388-block  5
    $$$$$: 5388-block  6
    $$$$$: 5388-block  7
    $$$$$: 5388-block  8
    $$$$$: 5388-block  9
    $$$$$: 5388-block 10
    $$$$$: 5388-block 11
    $$$$$: 5388-block 12
    $$$$$: 5388-block 13
    $$$$$: 5388-block 14
    $$$$$: 5388-block 15
        -: 5389:
        -: 5390:            XmlWriter &writeText(std::string const &text, bool indent = true);
        -: 5391:
        -: 5392:            //XmlWriter& writeComment( std::string const& text );
        -: 5393:
        -: 5394:            //void writeStylesheetRef( std::string const& url );
        -: 5395:
        -: 5396:            //XmlWriter& writeBlankLine();
        -: 5397:
        -: 5398:            void ensureTagClosed();
        -: 5399:
        -: 5400:            void writeDeclaration();
        -: 5401:
        -: 5402:        private:
        -: 5403:
        -: 5404:            void newlineIfNecessary();
        -: 5405:
    #####: 5406:            bool m_tagIsOpen = false;
    #####: 5407:            bool m_needsNewline = false;
        -: 5408:            std::vector<std::string> m_tags;
        -: 5409:            std::string m_indent;
        -: 5410:            std::ostream &m_os;
        -: 5411:        };
        -: 5412:
        -: 5413:// =================================================================================================
        -: 5414:// The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp
        -: 5415:// This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.
        -: 5416:// =================================================================================================
        -: 5417:
        -: 5418:        using uchar = unsigned char;
        -: 5419:
        -: 5420:        namespace {
        -: 5421:
function _ZN7doctest12_GLOBAL__N_112_GLOBAL__N_113trailingBytesEh called 0 returned 0% blocks executed 0%
    #####: 5422:            size_t trailingBytes(unsigned char c) {
    #####: 5423:                if ((c & 0xE0) == 0xC0) {
    $$$$$: 5423-block  0
branch  0 never executed
branch  1 never executed
    #####: 5424:                    return 2;
    $$$$$: 5424-block  0
        -: 5425:                }
    #####: 5426:                if ((c & 0xF0) == 0xE0) {
    $$$$$: 5426-block  0
branch  0 never executed
branch  1 never executed
    #####: 5427:                    return 3;
    $$$$$: 5427-block  0
        -: 5428:                }
    #####: 5429:                if ((c & 0xF8) == 0xF0) {
    $$$$$: 5429-block  0
branch  0 never executed
branch  1 never executed
    #####: 5430:                    return 4;
    $$$$$: 5430-block  0
        -: 5431:                }
    #####: 5432:                DOCTEST_INTERNAL_ERROR("Invalid multibyte utf-8 start byte encountered");
    $$$$$: 5432-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5432-block  1
    $$$$$: 5432-block  2
    $$$$$: 5432-block  3
    #####: 5433:            }
    $$$$$: 5433-block  0
        -: 5434:
function _ZN7doctest12_GLOBAL__N_112_GLOBAL__N_111headerValueEh called 0 returned 0% blocks executed 0%
    #####: 5435:            uint32_t headerValue(unsigned char c) {
    #####: 5436:                if ((c & 0xE0) == 0xC0) {
    $$$$$: 5436-block  0
branch  0 never executed
branch  1 never executed
    #####: 5437:                    return c & 0x1F;
    $$$$$: 5437-block  0
        -: 5438:                }
    #####: 5439:                if ((c & 0xF0) == 0xE0) {
    $$$$$: 5439-block  0
branch  0 never executed
branch  1 never executed
    #####: 5440:                    return c & 0x0F;
    $$$$$: 5440-block  0
        -: 5441:                }
    #####: 5442:                if ((c & 0xF8) == 0xF0) {
    $$$$$: 5442-block  0
branch  0 never executed
branch  1 never executed
    #####: 5443:                    return c & 0x07;
    $$$$$: 5443-block  0
        -: 5444:                }
    #####: 5445:                DOCTEST_INTERNAL_ERROR("Invalid multibyte utf-8 start byte encountered");
    $$$$$: 5445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5445-block  1
    $$$$$: 5445-block  2
    $$$$$: 5445-block  3
    #####: 5446:            }
    $$$$$: 5446-block  0
        -: 5447:
function _ZN7doctest12_GLOBAL__N_112_GLOBAL__N_113hexEscapeCharERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEh called 0 returned 0% blocks executed 0%
    #####: 5448:            void hexEscapeChar(std::ostream &os, unsigned char c) {
    #####: 5449:                std::ios_base::fmtflags f(os.flags());
    #####: 5450:                os << "\\x"
    #####: 5451:                   << std::uppercase << std::hex << std::setfill('0') << std::setw(2)
    #####: 5452:                   << static_cast<int>(c);
    #####: 5453:                os.flags(f);
    #####: 5454:            }
    $$$$$: 5454-block  0
        -: 5455:
        -: 5456:        } // anonymous namespace
        -: 5457:
function _ZN7doctest12_GLOBAL__N_19XmlEncodeC1ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS1_7ForWhatE called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlEncodeC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS1_7ForWhatE called 0 returned 0% blocks executed 0%
    #####: 5458:        XmlEncode::XmlEncode(std::string const &str, ForWhat forWhat)
    #####: 5459:                : m_str(str),
    #####: 5460:                  m_forWhat(forWhat) {}
    $$$$$: 5460-block  0
    $$$$$: 5460-block  1
        -: 5461:
function _ZNK7doctest12_GLOBAL__N_19XmlEncode8encodeToERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE called 0 returned 0% blocks executed 0%
    #####: 5462:        void XmlEncode::encodeTo(std::ostream &os) const {
        -: 5463:            // Apostrophe escaping not necessary if we always use " to write attributes
        -: 5464:            // (see: https://www.w3.org/TR/xml/#syntax)
        -: 5465:
    #####: 5466:            for (std::size_t idx = 0; idx < m_str.size(); ++idx) {
    $$$$$: 5466-block  0
    $$$$$: 5466-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5466-block  2
    #####: 5467:                uchar c = m_str[idx];
    #####: 5468:                switch (c) {
    $$$$$: 5468-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 5469:                    case '<':
    #####: 5470:                        os << "&lt;";
    #####: 5471:                        break;
    $$$$$: 5471-block  0
        -: 5472:                    case '&':
    #####: 5473:                        os << "&amp;";
    #####: 5474:                        break;
    $$$$$: 5474-block  0
        -: 5475:
        -: 5476:                    case '>':
        -: 5477:                        // See: https://www.w3.org/TR/xml/#syntax
    #####: 5478:                        if (idx > 2 && m_str[idx - 1] == ']' && m_str[idx - 2] == ']')
    $$$$$: 5478-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5478-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5478-block  2
branch  4 never executed
branch  5 never executed
    #####: 5479:                            os << "&gt;";
    $$$$$: 5479-block  0
        -: 5480:                        else
    #####: 5481:                            os << c;
    $$$$$: 5481-block  0
    #####: 5482:                        break;
    $$$$$: 5482-block  0
        -: 5483:
        -: 5484:                    case '\"':
    #####: 5485:                        if (m_forWhat == ForAttributes)
    $$$$$: 5485-block  0
branch  0 never executed
branch  1 never executed
    #####: 5486:                            os << "&quot;";
    $$$$$: 5486-block  0
        -: 5487:                        else
    #####: 5488:                            os << c;
    $$$$$: 5488-block  0
    #####: 5489:                        break;
    $$$$$: 5489-block  0
        -: 5490:
        -: 5491:                    default:
        -: 5492:                        // Check for control characters and invalid utf-8
        -: 5493:
        -: 5494:                        // Escape control characters in standard ascii
        -: 5495:                        // see https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0
    #####: 5496:                        if (c < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) {
    $$$$$: 5496-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5496-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5496-block  2
    $$$$$: 5496-block  3
    $$$$$: 5496-block  4
branch  4 never executed
branch  5 never executed
    #####: 5497:                            hexEscapeChar(os, c);
    #####: 5498:                            break;
    $$$$$: 5498-block  0
        -: 5499:                        }
        -: 5500:
        -: 5501:                        // Plain ASCII: Write it to stream
    #####: 5502:                        if (c < 0x7F) {
    $$$$$: 5502-block  0
branch  0 never executed
branch  1 never executed
    #####: 5503:                            os << c;
    #####: 5504:                            break;
    $$$$$: 5504-block  0
        -: 5505:                        }
        -: 5506:
        -: 5507:                        // UTF-8 territory
        -: 5508:                        // Check if the encoding is valid and if it is not, hex escape bytes.
        -: 5509:                        // Important: We do not check the exact decoded values for validity, only the encoding format
        -: 5510:                        // First check that this bytes is a valid lead byte:
        -: 5511:                        // This means that it is not encoded as 1111 1XXX
        -: 5512:                        // Or as 10XX XXXX
    #####: 5513:                        if (c < 0xC0 ||
    $$$$$: 5513-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5513-block  1
branch  2 never executed
branch  3 never executed
    #####: 5514:                            c >= 0xF8) {
    #####: 5515:                            hexEscapeChar(os, c);
    #####: 5516:                            break;
    $$$$$: 5516-block  0
        -: 5517:                        }
        -: 5518:
    #####: 5519:                        auto encBytes = trailingBytes(c);
        -: 5520:                        // Are there enough bytes left to avoid accessing out-of-bounds memory?
    #####: 5521:                        if (idx + encBytes - 1 >= m_str.size()) {
    $$$$$: 5521-block  0
branch  0 never executed
branch  1 never executed
    #####: 5522:                            hexEscapeChar(os, c);
    #####: 5523:                            break;
    $$$$$: 5523-block  0
        -: 5524:                        }
        -: 5525:                        // The header is valid, check data
        -: 5526:                        // The next encBytes bytes must together be a valid utf-8
        -: 5527:                        // This means: bitpattern 10XX XXXX and the extracted value is sane (ish)
    #####: 5528:                        bool valid = true;
    #####: 5529:                        uint32_t value = headerValue(c);
    #####: 5530:                        for (std::size_t n = 1; n < encBytes; ++n) {
    $$$$$: 5530-block  0
    $$$$$: 5530-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5530-block  2
    #####: 5531:                            uchar nc = m_str[idx + n];
    #####: 5532:                            valid &= ((nc & 0xC0) == 0x80);
    #####: 5533:                            value = (value << 6) | (nc & 0x3F);
    #####: 5534:                        }
    $$$$$: 5534-block  0
        -: 5535:
        -: 5536:                        if (
        -: 5537:                            // Wrong bit pattern of following bytes
    #####: 5538:                                (!valid) ||
    $$$$$: 5538-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5538-block  1
branch  2 never executed
branch  3 never executed
        -: 5539:                                // Overlong encodings
    #####: 5540:                                (value < 0x80) ||
    $$$$$: 5540-block  0
branch  0 never executed
branch  1 never executed
    #####: 5541:                                (value < 0x800 && encBytes > 2) || // removed "0x80 <= value &&" because redundant
    $$$$$: 5541-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5541-block  1
    $$$$$: 5541-block  2
    #####: 5542:                                (0x800 < value && value < 0x10000 && encBytes > 3) ||
    $$$$$: 5542-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5542-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5542-block  2
    $$$$$: 5542-block  3
        -: 5543:                                // Encoded value out of range
    #####: 5544:                                (value >= 0x110000)
        -: 5545:                                ) {
    #####: 5546:                            hexEscapeChar(os, c);
    #####: 5547:                            break;
    $$$$$: 5547-block  0
        -: 5548:                        }
        -: 5549:
        -: 5550:                        // If we got here, this is in fact a valid(ish) utf-8 sequence
    #####: 5551:                        for (std::size_t n = 0; n < encBytes; ++n) {
    $$$$$: 5551-block  0
    $$$$$: 5551-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5551-block  2
    #####: 5552:                            os << m_str[idx + n];
    #####: 5553:                        }
    $$$$$: 5553-block  0
    #####: 5554:                        idx += encBytes - 1;
    #####: 5555:                        break;
    $$$$$: 5555-block  0
        -: 5556:                }
    #####: 5557:            }
    $$$$$: 5557-block  0
    #####: 5558:        }
    $$$$$: 5558-block  0
        -: 5559:
function _ZN7doctest12_GLOBAL__N_1lsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS0_9XmlEncodeE called 0 returned 0% blocks executed 0%
    #####: 5560:        std::ostream &operator<<(std::ostream &os, XmlEncode const &xmlEncode) {
    #####: 5561:            xmlEncode.encodeTo(os);
    #####: 5562:            return os;
    $$$$$: 5562-block  0
        -: 5563:        }
        -: 5564:
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElementC1EPS1_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElementC2EPS1_ called 0 returned 0% blocks executed 0%
    #####: 5565:        XmlWriter::ScopedElement::ScopedElement(XmlWriter *writer)
    #####: 5566:                : m_writer(writer) {}
    $$$$$: 5566-block  0
    $$$$$: 5566-block  1
        -: 5567:
        -: 5568:        XmlWriter::ScopedElement::ScopedElement(ScopedElement &&other) DOCTEST_NOEXCEPT
        -: 5569:                : m_writer(other.m_writer) {
        -: 5570:            other.m_writer = nullptr;
        -: 5571:        }
        -: 5572:
        -: 5573:        XmlWriter::ScopedElement &XmlWriter::ScopedElement::operator=(ScopedElement &&other) DOCTEST_NOEXCEPT {
        -: 5574:            if (m_writer) {
        -: 5575:                m_writer->endElement();
        -: 5576:            }
        -: 5577:            m_writer = other.m_writer;
        -: 5578:            other.m_writer = nullptr;
        -: 5579:            return *this;
        -: 5580:        }
        -: 5581:
        -: 5582:
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElementD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElementD2Ev called 0 returned 0% blocks executed 0%
    #####: 5583:        XmlWriter::ScopedElement::~ScopedElement() {
    #####: 5584:            if (m_writer)
    $$$$$: 5584-block  0
branch  0 never executed
branch  1 never executed
    #####: 5585:                m_writer->endElement();
    $$$$$: 5585-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5585-block  1
    $$$$$: 5585-block  2
    #####: 5586:        }
    $$$$$: 5586-block  0
    $$$$$: 5586-block  1
        -: 5587:
function _ZN7doctest12_GLOBAL__N_19XmlWriter13ScopedElement9writeTextERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEb called 0 returned 0% blocks executed 0%
    #####: 5588:        XmlWriter::ScopedElement &XmlWriter::ScopedElement::writeText(std::string const &text, bool indent) {
    #####: 5589:            m_writer->writeText(text, indent);
    #####: 5590:            return *this;
    $$$$$: 5590-block  0
        -: 5591:        }
        -: 5592:
function _ZN7doctest12_GLOBAL__N_19XmlWriterC1ERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriterC2ERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE called 0 returned 0% blocks executed 0%
    #####: 5593:        XmlWriter::XmlWriter(std::ostream &os) : m_os(os) {
        -: 5594:            // writeDeclaration(); // called explicitly by the reporters that use the writer class - see issue #627
    #####: 5595:        }
    $$$$$: 5595-block  0
    $$$$$: 5595-block  1
        -: 5596:
function _ZN7doctest12_GLOBAL__N_19XmlWriterD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_19XmlWriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 5597:        XmlWriter::~XmlWriter() {
    #####: 5598:            while (!m_tags.empty())
    $$$$$: 5598-block  0
    $$$$$: 5598-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5598-block  2
    #####: 5599:                endElement();
    $$$$$: 5599-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5599-block  1
    #####: 5600:        }
    $$$$$: 5600-block  0
    $$$$$: 5600-block  1
        -: 5601:
function _ZN7doctest12_GLOBAL__N_19XmlWriter12startElementERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE called 0 returned 0% blocks executed 0%
    #####: 5602:        XmlWriter &XmlWriter::startElement(std::string const &name) {
    #####: 5603:            ensureTagClosed();
    #####: 5604:            newlineIfNecessary();
    #####: 5605:            m_os << m_indent << '<' << name;
    #####: 5606:            m_tags.push_back(name);
    #####: 5607:            m_indent += "  ";
    #####: 5608:            m_tagIsOpen = true;
    #####: 5609:            return *this;
    $$$$$: 5609-block  0
        -: 5610:        }
        -: 5611:
function _ZN7doctest12_GLOBAL__N_19XmlWriter13scopedElementERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE called 0 returned 0% blocks executed 0%
    #####: 5612:        XmlWriter::ScopedElement XmlWriter::scopedElement(std::string const &name) {
    #####: 5613:            ScopedElement scoped(this);
    #####: 5614:            startElement(name);
    $$$$$: 5614-block  0
branch  0 never executed
branch  1 never executed
    #####: 5615:            return scoped;
    #####: 5616:        }
    $$$$$: 5616-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5616-block  1
    $$$$$: 5616-block  2
    $$$$$: 5616-block  3
    $$$$$: 5616-block  4
        -: 5617:
function _ZN7doctest12_GLOBAL__N_19XmlWriter10endElementEv called 0 returned 0% blocks executed 0%
    #####: 5618:        XmlWriter &XmlWriter::endElement() {
    #####: 5619:            newlineIfNecessary();
    #####: 5620:            m_indent = m_indent.substr(0, m_indent.size() - 2);
    #####: 5621:            if (m_tagIsOpen) {
    $$$$$: 5621-block  0
branch  0 never executed
branch  1 never executed
    #####: 5622:                m_os << "/>";
    #####: 5623:                m_tagIsOpen = false;
    #####: 5624:            } else {
    $$$$$: 5624-block  0
    #####: 5625:                m_os << m_indent << "</" << m_tags.back() << ">";
    $$$$$: 5625-block  0
        -: 5626:            }
    #####: 5627:            m_os << std::endl;
    #####: 5628:            m_tags.pop_back();
    #####: 5629:            return *this;
    $$$$$: 5629-block  0
        -: 5630:        }
        -: 5631:
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_ called 0 returned 0% blocks executed 0%
    #####: 5632:        XmlWriter &XmlWriter::writeAttribute(std::string const &name, std::string const &attribute) {
    #####: 5633:            if (!name.empty() && !attribute.empty())
    $$$$$: 5633-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5633-block  1
branch  2 never executed
branch  3 never executed
    #####: 5634:                m_os << ' ' << name << "=\"" << XmlEncode(attribute, XmlEncode::ForAttributes) << '"';
    $$$$$: 5634-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5634-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5634-block  2
    $$$$$: 5634-block  3
    $$$$$: 5634-block  4
    #####: 5635:            return *this;
    $$$$$: 5635-block  0
    #####: 5636:        }
        -: 5637:
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKc called 0 returned 0% blocks executed 0%
    #####: 5638:        XmlWriter &XmlWriter::writeAttribute(std::string const &name, const char *attribute) {
    #####: 5639:            if (!name.empty() && attribute && attribute[0] != '\0')
    $$$$$: 5639-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5639-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5639-block  2
branch  4 never executed
branch  5 never executed
    #####: 5640:                m_os << ' ' << name << "=\"" << XmlEncode(attribute, XmlEncode::ForAttributes) << '"';
    $$$$$: 5640-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5640-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5640-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5640-block  3
    $$$$$: 5640-block  4
    $$$$$: 5640-block  5
    $$$$$: 5640-block  6
    #####: 5641:            return *this;
    $$$$$: 5641-block  0
    #####: 5642:        }
    $$$$$: 5642-block  0
        -: 5643:
function _ZN7doctest12_GLOBAL__N_19XmlWriter14writeAttributeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb called 0 returned 0% blocks executed 0%
    #####: 5644:        XmlWriter &XmlWriter::writeAttribute(std::string const &name, bool attribute) {
    #####: 5645:            m_os << ' ' << name << "=\"" << (attribute ? "true" : "false") << '"';
    #####: 5646:            return *this;
    $$$$$: 5646-block  0
        -: 5647:        }
        -: 5648:
function _ZN7doctest12_GLOBAL__N_19XmlWriter9writeTextERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb called 0 returned 0% blocks executed 0%
    #####: 5649:        XmlWriter &XmlWriter::writeText(std::string const &text, bool indent) {
    #####: 5650:            if (!text.empty()) {
    $$$$$: 5650-block  0
branch  0 never executed
branch  1 never executed
    #####: 5651:                bool tagWasOpen = m_tagIsOpen;
    #####: 5652:                ensureTagClosed();
    #####: 5653:                if (tagWasOpen && indent)
    $$$$$: 5653-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5653-block  1
branch  2 never executed
branch  3 never executed
    #####: 5654:                    m_os << m_indent;
    $$$$$: 5654-block  0
    #####: 5655:                m_os << XmlEncode(text);
    $$$$$: 5655-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5655-block  1
    $$$$$: 5655-block  2
    #####: 5656:                m_needsNewline = true;
    #####: 5657:            }
    $$$$$: 5657-block  0
    #####: 5658:            return *this;
    $$$$$: 5658-block  0
    #####: 5659:        }
        -: 5660:
        -: 5661:        //XmlWriter& XmlWriter::writeComment( std::string const& text ) {
        -: 5662:        //    ensureTagClosed();
        -: 5663:        //    m_os << m_indent << "<!--" << text << "-->";
        -: 5664:        //    m_needsNewline = true;
        -: 5665:        //    return *this;
        -: 5666:        //}
        -: 5667:
        -: 5668:        //void XmlWriter::writeStylesheetRef( std::string const& url ) {
        -: 5669:        //    m_os << "<?xml-stylesheet type=\"text/xsl\" href=\"" << url << "\"?>\n";
        -: 5670:        //}
        -: 5671:
        -: 5672:        //XmlWriter& XmlWriter::writeBlankLine() {
        -: 5673:        //    ensureTagClosed();
        -: 5674:        //    m_os << '\n';
        -: 5675:        //    return *this;
        -: 5676:        //}
        -: 5677:
function _ZN7doctest12_GLOBAL__N_19XmlWriter15ensureTagClosedEv called 0 returned 0% blocks executed 0%
    #####: 5678:        void XmlWriter::ensureTagClosed() {
    #####: 5679:            if (m_tagIsOpen) {
    $$$$$: 5679-block  0
branch  0 never executed
branch  1 never executed
    #####: 5680:                m_os << ">" << std::endl;
    #####: 5681:                m_tagIsOpen = false;
    #####: 5682:            }
    $$$$$: 5682-block  0
    #####: 5683:        }
    $$$$$: 5683-block  0
        -: 5684:
function _ZN7doctest12_GLOBAL__N_19XmlWriter16writeDeclarationEv called 0 returned 0% blocks executed 0%
    #####: 5685:        void XmlWriter::writeDeclaration() {
    #####: 5686:            m_os << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    #####: 5687:        }
    $$$$$: 5687-block  0
        -: 5688:
function _ZN7doctest12_GLOBAL__N_19XmlWriter18newlineIfNecessaryEv called 0 returned 0% blocks executed 0%
    #####: 5689:        void XmlWriter::newlineIfNecessary() {
    #####: 5690:            if (m_needsNewline) {
    $$$$$: 5690-block  0
branch  0 never executed
branch  1 never executed
    #####: 5691:                m_os << std::endl;
    #####: 5692:                m_needsNewline = false;
    #####: 5693:            }
    $$$$$: 5693-block  0
    #####: 5694:        }
    $$$$$: 5694-block  0
        -: 5695:
        -: 5696:// =================================================================================================
        -: 5697:// End of copy-pasted code from Catch
        -: 5698:// =================================================================================================
        -: 5699:
        -: 5700:        // clang-format on
        -: 5701:
function _ZN7doctest12_GLOBAL__N_111XmlReporterD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_111XmlReporterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_111XmlReporterD2Ev called 0 returned 0% blocks executed 0%
        -: 5702:        struct XmlReporter : public IReporter {
        -: 5703:            XmlWriter xml;
        -: 5704:            DOCTEST_DECLARE_MUTEX(mutex)
        -: 5705:
        -: 5706:            // caching pointers/references to objects of these types - safe to do
        -: 5707:            const ContextOptions &opt;
    #####: 5708:            const TestCaseData *tc = nullptr;
        -: 5709:
function _ZN7doctest12_GLOBAL__N_111XmlReporterC1ERKNS_14ContextOptionsE called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_111XmlReporterC2ERKNS_14ContextOptionsE called 0 returned 0% blocks executed 0%
    #####: 5710:            XmlReporter(const ContextOptions &co)
    #####: 5711:                    : xml(*co.cout), opt(co) {}
    $$$$$: 5711-block  0
    $$$$$: 5711-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5711-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 5711-block  3
    $$$$$: 5711-block  4
    $$$$$: 5711-block  5
    $$$$$: 5711-block  6
        -: 5712:
function _ZN7doctest12_GLOBAL__N_111XmlReporter12log_contextsEv called 0 returned 0% blocks executed 0%
    #####: 5713:            void log_contexts() {
    #####: 5714:                int num_contexts = get_num_active_contexts();
    #####: 5715:                if (num_contexts) {
    $$$$$: 5715-block  0
branch  0 never executed
branch  1 never executed
    #####: 5716:                    auto contexts = get_active_contexts();
    #####: 5717:                    std::stringstream ss;
    #####: 5718:                    for (int i = 0; i < num_contexts; ++i) {
    $$$$$: 5718-block  0
    $$$$$: 5718-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5718-block  2
    #####: 5719:                        contexts[i]->stringify(&ss);
    $$$$$: 5719-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5719-block  1
    $$$$$: 5719-block  2
branch  2 never executed
branch  3 never executed
    #####: 5720:                        xml.scopedElement("Info").writeText(ss.str());
    $$$$$: 5720-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5720-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5720-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5720-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5720-block  4
    $$$$$: 5720-block  5
    $$$$$: 5720-block  6
    #####: 5721:                        ss.str("");
    $$$$$: 5721-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5721-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5721-block  2
    #####: 5722:                    }
    $$$$$: 5722-block  0
    #####: 5723:                }
    $$$$$: 5723-block  0
    $$$$$: 5723-block  1
    $$$$$: 5723-block  2
    #####: 5724:            }
    $$$$$: 5724-block  0
    $$$$$: 5724-block  1
    $$$$$: 5724-block  2
    $$$$$: 5724-block  3
        -: 5725:
function _ZNK7doctest12_GLOBAL__N_111XmlReporter4lineEj called 0 returned 0% blocks executed 0%
    #####: 5726:            unsigned line(unsigned l) const { return opt.no_line_numbers ? 0 : l; }
    $$$$$: 5726-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5726-block  1
    $$$$$: 5726-block  2
    $$$$$: 5726-block  3
        -: 5727:
function _ZN7doctest12_GLOBAL__N_111XmlReporter20test_case_start_implERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 5728:            void test_case_start_impl(const TestCaseData &in) {
    #####: 5729:                bool open_ts_tag = false;
    #####: 5730:                if (tc != nullptr) { // we have already opened a test suite
    $$$$$: 5730-block  0
branch  0 never executed
branch  1 never executed
    #####: 5731:                    if (std::strcmp(tc->m_test_suite, in.m_test_suite) != 0) {
    $$$$$: 5731-block  0
branch  0 never executed
branch  1 never executed
    #####: 5732:                        xml.endElement();
    #####: 5733:                        open_ts_tag = true;
    #####: 5734:                    }
    $$$$$: 5734-block  0
    #####: 5735:                } else {
    $$$$$: 5735-block  0
    #####: 5736:                    open_ts_tag = true; // first test case ==> first test suite
    $$$$$: 5736-block  0
        -: 5737:                }
        -: 5738:
    #####: 5739:                if (open_ts_tag) {
    $$$$$: 5739-block  0
branch  0 never executed
branch  1 never executed
    #####: 5740:                    xml.startElement("TestSuite");
    $$$$$: 5740-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5740-block  1
    $$$$$: 5740-block  2
    #####: 5741:                    xml.writeAttribute("name", in.m_test_suite);
    $$$$$: 5741-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5741-block  1
    #####: 5742:                }
    $$$$$: 5742-block  0
        -: 5743:
    #####: 5744:                tc = &in;
    #####: 5745:                xml.startElement("TestCase")
    $$$$$: 5745-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5745-block  1
    $$$$$: 5745-block  2
    $$$$$: 5745-block  3
    $$$$$: 5745-block  4
    $$$$$: 5745-block  5
    #####: 5746:                        .writeAttribute("name", in.m_name)
    $$$$$: 5746-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5746-block  1
branch  2 never executed
branch  3 never executed
    #####: 5747:                        .writeAttribute("filename", skipPathFromFilename(in.m_file.c_str()))
    $$$$$: 5747-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5747-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5747-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5747-block  3
branch  6 never executed
branch  7 never executed
    #####: 5748:                        .writeAttribute("line", line(in.m_line))
    $$$$$: 5748-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5748-block  1
branch  2 never executed
branch  3 never executed
    #####: 5749:                        .writeAttribute("description", in.m_description);
    $$$$$: 5749-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5749-block  1
branch  2 never executed
branch  3 never executed
        -: 5750:
    #####: 5751:                if (Approx(in.m_timeout) != 0)
    $$$$$: 5751-block  0
branch  0 never executed
branch  1 never executed
    #####: 5752:                    xml.writeAttribute("timeout", in.m_timeout);
    $$$$$: 5752-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5752-block  1
    $$$$$: 5752-block  2
    #####: 5753:                if (in.m_may_fail)
    $$$$$: 5753-block  0
branch  0 never executed
branch  1 never executed
    #####: 5754:                    xml.writeAttribute("may_fail", true);
    $$$$$: 5754-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5754-block  1
    $$$$$: 5754-block  2
    #####: 5755:                if (in.m_should_fail)
    $$$$$: 5755-block  0
branch  0 never executed
branch  1 never executed
    #####: 5756:                    xml.writeAttribute("should_fail", true);
    $$$$$: 5756-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5756-block  1
    $$$$$: 5756-block  2
    #####: 5757:            }
    $$$$$: 5757-block  0
    $$$$$: 5757-block  1
    $$$$$: 5757-block  2
    $$$$$: 5757-block  3
    $$$$$: 5757-block  4
        -: 5758:
        -: 5759:            // =========================================================================================
        -: 5760:            // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE
        -: 5761:            // =========================================================================================
        -: 5762:
function _ZN7doctest12_GLOBAL__N_111XmlReporter12report_queryERKNS_9QueryDataE called 0 returned 0% blocks executed 0%
    #####: 5763:            void report_query(const QueryData &in) override {
    #####: 5764:                test_run_start();
    #####: 5765:                if (opt.list_reporters) {
    $$$$$: 5765-block  0
branch  0 never executed
branch  1 never executed
    #####: 5766:                    for (auto &curr: getListeners())
    $$$$$: 5766-block  0
    $$$$$: 5766-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5766-block  2
    $$$$$: 5766-block  3
    #####: 5767:                        xml.scopedElement("Listener")
    $$$$$: 5767-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5767-block  1
    $$$$$: 5767-block  2
    $$$$$: 5767-block  3
    $$$$$: 5767-block  4
    $$$$$: 5767-block  5
    #####: 5768:                                .writeAttribute("priority", curr.first.first)
    $$$$$: 5768-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5768-block  1
branch  2 never executed
branch  3 never executed
    #####: 5769:                                .writeAttribute("name", curr.first.second);
    $$$$$: 5769-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5769-block  1
branch  2 never executed
branch  3 never executed
    #####: 5770:                    for (auto &curr: getReporters())
    $$$$$: 5770-block  0
    $$$$$: 5770-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5770-block  2
    $$$$$: 5770-block  3
    #####: 5771:                        xml.scopedElement("Reporter")
    $$$$$: 5771-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5771-block  1
    $$$$$: 5771-block  2
    $$$$$: 5771-block  3
    $$$$$: 5771-block  4
    #####: 5772:                                .writeAttribute("priority", curr.first.first)
    $$$$$: 5772-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5772-block  1
branch  2 never executed
branch  3 never executed
    #####: 5773:                                .writeAttribute("name", curr.first.second);
    $$$$$: 5773-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5773-block  1
branch  2 never executed
branch  3 never executed
    #####: 5774:                } else if (opt.count || opt.list_test_cases) {
    $$$$$: 5774-block  0
    $$$$$: 5774-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5774-block  2
branch  2 never executed
branch  3 never executed
    #####: 5775:                    for (unsigned i = 0; i < in.num_data; ++i) {
    $$$$$: 5775-block  0
    $$$$$: 5775-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5775-block  2
    #####: 5776:                        xml.scopedElement("TestCase").writeAttribute("name", in.data[i]->m_name)
    $$$$$: 5776-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5776-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5776-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5776-block  3
    $$$$$: 5776-block  4
    $$$$$: 5776-block  5
    $$$$$: 5776-block  6
    $$$$$: 5776-block  7
    $$$$$: 5776-block  8
    $$$$$: 5776-block  9
    #####: 5777:                                .writeAttribute("testsuite", in.data[i]->m_test_suite)
    $$$$$: 5777-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5777-block  1
branch  2 never executed
branch  3 never executed
    #####: 5778:                                .writeAttribute("filename", skipPathFromFilename(in.data[i]->m_file.c_str()))
    $$$$$: 5778-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5778-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5778-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5778-block  3
branch  6 never executed
branch  7 never executed
    #####: 5779:                                .writeAttribute("line", line(in.data[i]->m_line))
    $$$$$: 5779-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5779-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5779-block  2
branch  4 never executed
branch  5 never executed
    #####: 5780:                                .writeAttribute("skipped", in.data[i]->m_skip);
    $$$$$: 5780-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5780-block  1
branch  2 never executed
branch  3 never executed
    #####: 5781:                    }
    $$$$$: 5781-block  0
    #####: 5782:                    xml.scopedElement("OverallResultsTestCases")
    $$$$$: 5782-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5782-block  1
    $$$$$: 5782-block  2
    $$$$$: 5782-block  3
    #####: 5783:                            .writeAttribute("unskipped", in.run_stats->numTestCasesPassingFilters);
    $$$$$: 5783-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5783-block  1
branch  2 never executed
branch  3 never executed
    #####: 5784:                } else if (opt.list_test_suites) {
    $$$$$: 5784-block  0
    $$$$$: 5784-block  1
branch  0 never executed
branch  1 never executed
    #####: 5785:                    for (unsigned i = 0; i < in.num_data; ++i)
    $$$$$: 5785-block  0
    $$$$$: 5785-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5785-block  2
    #####: 5786:                        xml.scopedElement("TestSuite").writeAttribute("name", in.data[i]->m_test_suite);
    $$$$$: 5786-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5786-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5786-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5786-block  3
    $$$$$: 5786-block  4
    $$$$$: 5786-block  5
    $$$$$: 5786-block  6
    #####: 5787:                    xml.scopedElement("OverallResultsTestCases")
    $$$$$: 5787-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5787-block  1
    $$$$$: 5787-block  2
    $$$$$: 5787-block  3
    #####: 5788:                            .writeAttribute("unskipped", in.run_stats->numTestCasesPassingFilters);
    $$$$$: 5788-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5788-block  1
branch  2 never executed
branch  3 never executed
    #####: 5789:                    xml.scopedElement("OverallResultsTestSuites")
    $$$$$: 5789-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5789-block  1
    $$$$$: 5789-block  2
    $$$$$: 5789-block  3
    #####: 5790:                            .writeAttribute("unskipped", in.run_stats->numTestSuitesPassingFilters);
    $$$$$: 5790-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5790-block  1
branch  2 never executed
branch  3 never executed
    #####: 5791:                }
    $$$$$: 5791-block  0
    #####: 5792:                xml.endElement();
    #####: 5793:            }
    $$$$$: 5793-block  0
    $$$$$: 5793-block  1
    $$$$$: 5793-block  2
    $$$$$: 5793-block  3
    $$$$$: 5793-block  4
    $$$$$: 5793-block  5
    $$$$$: 5793-block  6
    $$$$$: 5793-block  7
    $$$$$: 5793-block  8
    $$$$$: 5793-block  9
    $$$$$: 5793-block 10
    $$$$$: 5793-block 11
    $$$$$: 5793-block 12
    $$$$$: 5793-block 13
    $$$$$: 5793-block 14
    $$$$$: 5793-block 15
    $$$$$: 5793-block 16
    $$$$$: 5793-block 17
    $$$$$: 5793-block 18
    $$$$$: 5793-block 19
    $$$$$: 5793-block 20
        -: 5794:
function _ZN7doctest12_GLOBAL__N_111XmlReporter14test_run_startEv called 0 returned 0% blocks executed 0%
    #####: 5795:            void test_run_start() override {
    #####: 5796:                xml.writeDeclaration();
        -: 5797:
        -: 5798:                // remove .exe extension - mainly to have the same output on UNIX and Windows
    #####: 5799:                std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());
        -: 5800:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 5801:                                                                                                                                        if(binary_name.rfind(".exe") != std::string::npos)
        -: 5802:                binary_name = binary_name.substr(0, binary_name.length() - 4);
        -: 5803:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 5804:
    #####: 5805:                xml.startElement("doctest").writeAttribute("binary", binary_name);
    $$$$$: 5805-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5805-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5805-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5805-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5805-block  4
    $$$$$: 5805-block  5
    #####: 5806:                if (opt.no_version == false)
    $$$$$: 5806-block  0
branch  0 never executed
branch  1 never executed
    #####: 5807:                    xml.writeAttribute("version", DOCTEST_VERSION_STR);
    $$$$$: 5807-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5807-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5807-block  2
    $$$$$: 5807-block  3
        -: 5808:
        -: 5809:                // only the consequential ones (TODO: filters)
    #####: 5810:                xml.scopedElement("Options")
    $$$$$: 5810-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5810-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5810-block  2
    $$$$$: 5810-block  3
    $$$$$: 5810-block  4
    $$$$$: 5810-block  5
    $$$$$: 5810-block  6
    $$$$$: 5810-block  7
    $$$$$: 5810-block  8
    $$$$$: 5810-block  9
    $$$$$: 5810-block 10
    $$$$$: 5810-block 11
    $$$$$: 5810-block 12
    #####: 5811:                        .writeAttribute("order_by", opt.order_by.c_str())
    $$$$$: 5811-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5811-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5811-block  2
branch  4 never executed
branch  5 never executed
    #####: 5812:                        .writeAttribute("rand_seed", opt.rand_seed)
    $$$$$: 5812-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5812-block  1
branch  2 never executed
branch  3 never executed
    #####: 5813:                        .writeAttribute("first", opt.first)
    $$$$$: 5813-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5813-block  1
branch  2 never executed
branch  3 never executed
    #####: 5814:                        .writeAttribute("last", opt.last)
    $$$$$: 5814-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5814-block  1
branch  2 never executed
branch  3 never executed
    #####: 5815:                        .writeAttribute("abort_after", opt.abort_after)
    $$$$$: 5815-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5815-block  1
branch  2 never executed
branch  3 never executed
    #####: 5816:                        .writeAttribute("subcase_filter_levels", opt.subcase_filter_levels)
    $$$$$: 5816-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5816-block  1
branch  2 never executed
branch  3 never executed
    #####: 5817:                        .writeAttribute("case_sensitive", opt.case_sensitive)
    $$$$$: 5817-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5817-block  1
branch  2 never executed
branch  3 never executed
    #####: 5818:                        .writeAttribute("no_throw", opt.no_throw)
    $$$$$: 5818-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5818-block  1
branch  2 never executed
branch  3 never executed
    #####: 5819:                        .writeAttribute("no_skip", opt.no_skip);
    $$$$$: 5819-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5819-block  1
branch  2 never executed
branch  3 never executed
    #####: 5820:            }
    $$$$$: 5820-block  0
    $$$$$: 5820-block  1
    $$$$$: 5820-block  2
    $$$$$: 5820-block  3
    $$$$$: 5820-block  4
    $$$$$: 5820-block  5
    $$$$$: 5820-block  6
    $$$$$: 5820-block  7
    $$$$$: 5820-block  8
    $$$$$: 5820-block  9
    $$$$$: 5820-block 10
    $$$$$: 5820-block 11
    $$$$$: 5820-block 12
    $$$$$: 5820-block 13
    $$$$$: 5820-block 14
        -: 5821:
function _ZN7doctest12_GLOBAL__N_111XmlReporter12test_run_endERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####: 5822:            void test_run_end(const TestRunStats &p) override {
    #####: 5823:                if (tc) // the TestSuite tag - only if there has been at least 1 test case
    $$$$$: 5823-block  0
branch  0 never executed
branch  1 never executed
    #####: 5824:                    xml.endElement();
    $$$$$: 5824-block  0
        -: 5825:
    #####: 5826:                xml.scopedElement("OverallResultsAsserts")
    $$$$$: 5826-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5826-block  1
    $$$$$: 5826-block  2
    $$$$$: 5826-block  3
    $$$$$: 5826-block  4
    $$$$$: 5826-block  5
    #####: 5827:                        .writeAttribute("successes", p.numAsserts - p.numAssertsFailed)
    $$$$$: 5827-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5827-block  1
branch  2 never executed
branch  3 never executed
    #####: 5828:                        .writeAttribute("failures", p.numAssertsFailed);
    $$$$$: 5828-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5828-block  1
branch  2 never executed
branch  3 never executed
        -: 5829:
    #####: 5830:                xml.startElement("OverallResultsTestCases")
    $$$$$: 5830-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5830-block  1
    $$$$$: 5830-block  2
    $$$$$: 5830-block  3
    #####: 5831:                        .writeAttribute("successes",
    $$$$$: 5831-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5831-block  1
branch  2 never executed
branch  3 never executed
    #####: 5832:                                        p.numTestCasesPassingFilters - p.numTestCasesFailed)
    #####: 5833:                        .writeAttribute("failures", p.numTestCasesFailed);
    $$$$$: 5833-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5833-block  1
branch  2 never executed
branch  3 never executed
    #####: 5834:                if (opt.no_skipped_summary == false)
    $$$$$: 5834-block  0
branch  0 never executed
branch  1 never executed
    #####: 5835:                    xml.writeAttribute("skipped", p.numTestCases - p.numTestCasesPassingFilters);
    $$$$$: 5835-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5835-block  1
    $$$$$: 5835-block  2
    #####: 5836:                xml.endElement();
        -: 5837:
    #####: 5838:                xml.endElement();
    #####: 5839:            }
    $$$$$: 5839-block  0
    $$$$$: 5839-block  1
    $$$$$: 5839-block  2
    $$$$$: 5839-block  3
    $$$$$: 5839-block  4
    $$$$$: 5839-block  5
        -: 5840:
function _ZN7doctest12_GLOBAL__N_111XmlReporter15test_case_startERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 5841:            void test_case_start(const TestCaseData &in) override {
    #####: 5842:                test_case_start_impl(in);
    #####: 5843:                xml.ensureTagClosed();
    #####: 5844:            }
    $$$$$: 5844-block  0
        -: 5845:
function _ZN7doctest12_GLOBAL__N_111XmlReporter17test_case_reenterERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 5846:            void test_case_reenter(const TestCaseData &) override {}
    $$$$$: 5846-block  0
        -: 5847:
function _ZN7doctest12_GLOBAL__N_111XmlReporter13test_case_endERKNS_20CurrentTestCaseStatsE called 0 returned 0% blocks executed 0%
    #####: 5848:            void test_case_end(const CurrentTestCaseStats &st) override {
    #####: 5849:                xml.startElement("OverallResultsAsserts")
    $$$$$: 5849-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5849-block  1
    $$$$$: 5849-block  2
    $$$$$: 5849-block  3
    $$$$$: 5849-block  4
    $$$$$: 5849-block  5
    #####: 5850:                        .writeAttribute("successes",
    $$$$$: 5850-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5850-block  1
branch  2 never executed
branch  3 never executed
    #####: 5851:                                        st.numAssertsCurrentTest - st.numAssertsFailedCurrentTest)
    #####: 5852:                        .writeAttribute("failures", st.numAssertsFailedCurrentTest)
    $$$$$: 5852-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5852-block  1
branch  2 never executed
branch  3 never executed
    #####: 5853:                        .writeAttribute("test_case_success", st.testCaseSuccess);
    $$$$$: 5853-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5853-block  1
branch  2 never executed
branch  3 never executed
    #####: 5854:                if (opt.duration)
    $$$$$: 5854-block  0
branch  0 never executed
branch  1 never executed
    #####: 5855:                    xml.writeAttribute("duration", st.seconds);
    $$$$$: 5855-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5855-block  1
    $$$$$: 5855-block  2
    #####: 5856:                if (tc->m_expected_failures)
    $$$$$: 5856-block  0
branch  0 never executed
branch  1 never executed
    #####: 5857:                    xml.writeAttribute("expected_failures", tc->m_expected_failures);
    $$$$$: 5857-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5857-block  1
    $$$$$: 5857-block  2
    #####: 5858:                xml.endElement();
        -: 5859:
    #####: 5860:                xml.endElement();
    #####: 5861:            }
    $$$$$: 5861-block  0
    $$$$$: 5861-block  1
    $$$$$: 5861-block  2
    $$$$$: 5861-block  3
        -: 5862:
function _ZN7doctest12_GLOBAL__N_111XmlReporter19test_case_exceptionERKNS_17TestCaseExceptionE called 0 returned 0% blocks executed 0%
    #####: 5863:            void test_case_exception(const TestCaseException &e) override {
    #####: 5864:                DOCTEST_LOCK_MUTEX(mutex)
        -: 5865:
    #####: 5866:                xml.scopedElement("Exception")
    $$$$$: 5866-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5866-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5866-block  2
    $$$$$: 5866-block  3
    $$$$$: 5866-block  4
    $$$$$: 5866-block  5
    #####: 5867:                        .writeAttribute("crash", e.is_crash)
    $$$$$: 5867-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5867-block  1
branch  2 never executed
branch  3 never executed
    #####: 5868:                        .writeText(e.error_string.c_str());
    $$$$$: 5868-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5868-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5868-block  2
branch  4 never executed
branch  5 never executed
    #####: 5869:            }
    $$$$$: 5869-block  0
    $$$$$: 5869-block  1
    $$$$$: 5869-block  2
    $$$$$: 5869-block  3
    $$$$$: 5869-block  4
    $$$$$: 5869-block  5
    $$$$$: 5869-block  6
        -: 5870:
function _ZN7doctest12_GLOBAL__N_111XmlReporter13subcase_startERKNS_16SubcaseSignatureE called 0 returned 0% blocks executed 0%
    #####: 5871:            void subcase_start(const SubcaseSignature &in) override {
    #####: 5872:                xml.startElement("SubCase")
    $$$$$: 5872-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5872-block  1
    $$$$$: 5872-block  2
    $$$$$: 5872-block  3
    $$$$$: 5872-block  4
    $$$$$: 5872-block  5
    #####: 5873:                        .writeAttribute("name", in.m_name)
    $$$$$: 5873-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5873-block  1
branch  2 never executed
branch  3 never executed
    #####: 5874:                        .writeAttribute("filename", skipPathFromFilename(in.m_file))
    $$$$$: 5874-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5874-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5874-block  2
branch  4 never executed
branch  5 never executed
    #####: 5875:                        .writeAttribute("line", line(in.m_line));
    $$$$$: 5875-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5875-block  1
branch  2 never executed
branch  3 never executed
    #####: 5876:                xml.ensureTagClosed();
    #####: 5877:            }
    $$$$$: 5877-block  0
    $$$$$: 5877-block  1
    $$$$$: 5877-block  2
    $$$$$: 5877-block  3
        -: 5878:
function _ZN7doctest12_GLOBAL__N_111XmlReporter11subcase_endEv called 0 returned 0% blocks executed 0%
    #####: 5879:            void subcase_end() override { xml.endElement(); }
    $$$$$: 5879-block  0
        -: 5880:
function _ZN7doctest12_GLOBAL__N_111XmlReporter10log_assertERKNS_10AssertDataE called 0 returned 0% blocks executed 0%
    #####: 5881:            void log_assert(const AssertData &rb) override {
    #####: 5882:                if (!rb.m_failed && !opt.success)
    $$$$$: 5882-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5882-block  1
branch  2 never executed
branch  3 never executed
    #####: 5883:                    return;
    $$$$$: 5883-block  0
        -: 5884:
    #####: 5885:                DOCTEST_LOCK_MUTEX(mutex)
        -: 5886:
    #####: 5887:                xml.startElement("Expression")
    $$$$$: 5887-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5887-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5887-block  2
    $$$$$: 5887-block  3
    $$$$$: 5887-block  4
    $$$$$: 5887-block  5
    $$$$$: 5887-block  6
    #####: 5888:                        .writeAttribute("success", !rb.m_failed)
    $$$$$: 5888-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5888-block  1
branch  2 never executed
branch  3 never executed
    #####: 5889:                        .writeAttribute("type", assertString(rb.m_at))
    $$$$$: 5889-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5889-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5889-block  2
branch  4 never executed
branch  5 never executed
    #####: 5890:                        .writeAttribute("filename", skipPathFromFilename(rb.m_file))
    $$$$$: 5890-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5890-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5890-block  2
branch  4 never executed
branch  5 never executed
    #####: 5891:                        .writeAttribute("line", line(rb.m_line));
    $$$$$: 5891-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5891-block  1
branch  2 never executed
branch  3 never executed
        -: 5892:
    #####: 5893:                xml.scopedElement("Original").writeText(rb.m_expr);
    $$$$$: 5893-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5893-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5893-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5893-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5893-block  4
    $$$$$: 5893-block  5
    $$$$$: 5893-block  6
        -: 5894:
    #####: 5895:                if (rb.m_threw)
    $$$$$: 5895-block  0
branch  0 never executed
branch  1 never executed
    #####: 5896:                    xml.scopedElement("Exception").writeText(rb.m_exception.c_str());
    $$$$$: 5896-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5896-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5896-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5896-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5896-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 5896-block  5
    $$$$$: 5896-block  6
    $$$$$: 5896-block  7
    $$$$$: 5896-block  8
        -: 5897:
    #####: 5898:                if (rb.m_at & assertType::is_throws_as)
    $$$$$: 5898-block  0
branch  0 never executed
branch  1 never executed
    #####: 5899:                    xml.scopedElement("ExpectedException").writeText(rb.m_exception_type);
    $$$$$: 5899-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5899-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5899-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5899-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5899-block  4
    $$$$$: 5899-block  5
    $$$$$: 5899-block  6
    $$$$$: 5899-block  7
    #####: 5900:                if (rb.m_at & assertType::is_throws_with)
    $$$$$: 5900-block  0
branch  0 never executed
branch  1 never executed
    #####: 5901:                    xml.scopedElement("ExpectedExceptionString").writeText(rb.m_exception_string.c_str());
    $$$$$: 5901-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5901-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5901-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5901-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5901-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 5901-block  5
    $$$$$: 5901-block  6
    $$$$$: 5901-block  7
    $$$$$: 5901-block  8
    #####: 5902:                if ((rb.m_at & assertType::is_normal) && !rb.m_threw)
    $$$$$: 5902-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5902-block  1
branch  2 never executed
branch  3 never executed
    #####: 5903:                    xml.scopedElement("Expanded").writeText(rb.m_decomp.c_str());
    $$$$$: 5903-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5903-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5903-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5903-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5903-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 5903-block  5
    $$$$$: 5903-block  6
    $$$$$: 5903-block  7
    $$$$$: 5903-block  8
        -: 5904:
    #####: 5905:                log_contexts();
    $$$$$: 5905-block  0
branch  0 never executed
branch  1 never executed
        -: 5906:
    #####: 5907:                xml.endElement();
    $$$$$: 5907-block  0
branch  0 never executed
branch  1 never executed
    #####: 5908:            }
    $$$$$: 5908-block  0
    $$$$$: 5908-block  1
    $$$$$: 5908-block  2
    $$$$$: 5908-block  3
    $$$$$: 5908-block  4
    $$$$$: 5908-block  5
    $$$$$: 5908-block  6
    $$$$$: 5908-block  7
    $$$$$: 5908-block  8
    $$$$$: 5908-block  9
    $$$$$: 5908-block 10
    $$$$$: 5908-block 11
    $$$$$: 5908-block 12
    $$$$$: 5908-block 13
    $$$$$: 5908-block 14
    $$$$$: 5908-block 15
    $$$$$: 5908-block 16
    $$$$$: 5908-block 17
    $$$$$: 5908-block 18
        -: 5909:
function _ZN7doctest12_GLOBAL__N_111XmlReporter11log_messageERKNS_11MessageDataE called 0 returned 0% blocks executed 0%
    #####: 5910:            void log_message(const MessageData &mb) override {
    #####: 5911:                DOCTEST_LOCK_MUTEX(mutex)
        -: 5912:
    #####: 5913:                xml.startElement("Message")
    $$$$$: 5913-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5913-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5913-block  2
    $$$$$: 5913-block  3
    $$$$$: 5913-block  4
    $$$$$: 5913-block  5
    #####: 5914:                        .writeAttribute("type", failureString(mb.m_severity))
    $$$$$: 5914-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5914-block  1
branch  2 never executed
branch  3 never executed
    #####: 5915:                        .writeAttribute("filename", skipPathFromFilename(mb.m_file))
    $$$$$: 5915-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5915-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5915-block  2
branch  4 never executed
branch  5 never executed
    #####: 5916:                        .writeAttribute("line", line(mb.m_line));
    $$$$$: 5916-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5916-block  1
branch  2 never executed
branch  3 never executed
        -: 5917:
    #####: 5918:                xml.scopedElement("Text").writeText(mb.m_string.c_str());
    $$$$$: 5918-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5918-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 5918-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 5918-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 5918-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 5918-block  5
    $$$$$: 5918-block  6
    $$$$$: 5918-block  7
        -: 5919:
    #####: 5920:                log_contexts();
    $$$$$: 5920-block  0
branch  0 never executed
branch  1 never executed
        -: 5921:
    #####: 5922:                xml.endElement();
    $$$$$: 5922-block  0
branch  0 never executed
branch  1 never executed
    #####: 5923:            }
    $$$$$: 5923-block  0
    $$$$$: 5923-block  1
    $$$$$: 5923-block  2
    $$$$$: 5923-block  3
    $$$$$: 5923-block  4
    $$$$$: 5923-block  5
    $$$$$: 5923-block  6
    $$$$$: 5923-block  7
    $$$$$: 5923-block  8
        -: 5924:
function _ZN7doctest12_GLOBAL__N_111XmlReporter17test_case_skippedERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 5925:            void test_case_skipped(const TestCaseData &in) override {
    #####: 5926:                if (opt.no_skipped_summary == false) {
    $$$$$: 5926-block  0
branch  0 never executed
branch  1 never executed
    #####: 5927:                    test_case_start_impl(in);
    #####: 5928:                    xml.writeAttribute("skipped", "true");
    $$$$$: 5928-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5928-block  1
    $$$$$: 5928-block  2
    #####: 5929:                    xml.endElement();
    #####: 5930:                }
    $$$$$: 5930-block  0
    #####: 5931:            }
    $$$$$: 5931-block  0
        -: 5932:        };
        -: 5933:
        -: 5934:        DOCTEST_REGISTER_REPORTER("xml", 0, XmlReporter);
        -: 5935:
function _ZN7doctest12_GLOBAL__N_129fulltext_log_assert_to_streamERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS_10AssertDataE called 0 returned 0% blocks executed 0%
    #####: 5936:        void fulltext_log_assert_to_stream(std::ostream &s, const AssertData &rb) {
    #####: 5937:            if ((rb.m_at & (assertType::is_throws_as | assertType::is_throws_with)) ==
    $$$$$: 5937-block  0
branch  0 never executed
branch  1 never executed
        -: 5938:                0) //!OCLINT bitwise operator in conditional
    #####: 5939:                s << Color::Cyan << assertString(rb.m_at) << "( " << rb.m_expr << " ) "
    $$$$$: 5939-block  0
    $$$$$: 5939-block  1
    #####: 5940:                  << Color::None;
        -: 5941:
    #####: 5942:            if (rb.m_at & assertType::is_throws) { //!OCLINT bitwise operator in conditional
    $$$$$: 5942-block  0
branch  0 never executed
branch  1 never executed
    #####: 5943:                s << (rb.m_threw ? "threw as expected!" : "did NOT throw at all!") << "\n";
    #####: 5944:            } else if ((rb.m_at & assertType::is_throws_as) &&
    $$$$$: 5944-block  0
    $$$$$: 5944-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 5944-block  2
branch  2 never executed
branch  3 never executed
    #####: 5945:                       (rb.m_at & assertType::is_throws_with)) { //!OCLINT
    #####: 5946:                s << Color::Cyan << assertString(rb.m_at) << "( " << rb.m_expr << ", \""
    #####: 5947:                  << rb.m_exception_string.c_str()
    #####: 5948:                  << "\", " << rb.m_exception_type << " ) " << Color::None;
    #####: 5949:                if (rb.m_threw) {
    $$$$$: 5949-block  0
branch  0 never executed
branch  1 never executed
    #####: 5950:                    if (!rb.m_failed) {
    $$$$$: 5950-block  0
branch  0 never executed
branch  1 never executed
    #####: 5951:                        s << "threw as expected!\n";
    #####: 5952:                    } else {
    $$$$$: 5952-block  0
    #####: 5953:                        s << "threw a DIFFERENT exception! (contents: " << rb.m_exception << ")\n";
    $$$$$: 5953-block  0
        -: 5954:                    }
    #####: 5955:                } else {
    $$$$$: 5955-block  0
    #####: 5956:                    s << "did NOT throw at all!\n";
    $$$$$: 5956-block  0
        -: 5957:                }
    #####: 5958:            } else if (rb.m_at &
    $$$$$: 5958-block  0
    $$$$$: 5958-block  1
branch  0 never executed
branch  1 never executed
        -: 5959:                       assertType::is_throws_as) { //!OCLINT bitwise operator in conditional
    #####: 5960:                s << Color::Cyan << assertString(rb.m_at) << "( " << rb.m_expr << ", "
    #####: 5961:                  << rb.m_exception_type << " ) " << Color::None
    #####: 5962:                  << (rb.m_threw ? (rb.m_threw_as ? "threw as expected!" :
    $$$$$: 5962-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5962-block  1
    $$$$$: 5962-block  2
        -: 5963:                                    "threw a DIFFERENT exception: ") :
        -: 5964:                      "did NOT throw at all!")
    #####: 5965:                  << Color::Cyan << rb.m_exception << "\n";
    #####: 5966:            } else if (rb.m_at &
    $$$$$: 5966-block  0
    $$$$$: 5966-block  1
branch  0 never executed
branch  1 never executed
        -: 5967:                       assertType::is_throws_with) { //!OCLINT bitwise operator in conditional
    #####: 5968:                s << Color::Cyan << assertString(rb.m_at) << "( " << rb.m_expr << ", \""
    #####: 5969:                  << rb.m_exception_string.c_str()
    #####: 5970:                  << "\" ) " << Color::None
    #####: 5971:                  << (rb.m_threw ? (!rb.m_failed ? "threw as expected!" :
    $$$$$: 5971-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5971-block  1
    $$$$$: 5971-block  2
        -: 5972:                                    "threw a DIFFERENT exception: ") :
        -: 5973:                      "did NOT throw at all!")
    #####: 5974:                  << Color::Cyan << rb.m_exception << "\n";
    #####: 5975:            } else if (rb.m_at & assertType::is_nothrow) { //!OCLINT bitwise operator in conditional
    $$$$$: 5975-block  0
    $$$$$: 5975-block  1
branch  0 never executed
branch  1 never executed
    #####: 5976:                s << (rb.m_threw ? "THREW exception: " : "didn't throw!") << Color::Cyan
    #####: 5977:                  << rb.m_exception << "\n";
    #####: 5978:            } else {
    $$$$$: 5978-block  0
    #####: 5979:                s << (rb.m_threw ? "THREW exception: " :
    $$$$$: 5979-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 5979-block  1
    $$$$$: 5979-block  2
    #####: 5980:                      (!rb.m_failed ? "is correct!\n" : "is NOT correct!\n"));
    #####: 5981:                if (rb.m_threw)
    $$$$$: 5981-block  0
branch  0 never executed
branch  1 never executed
    #####: 5982:                    s << rb.m_exception << "\n";
    $$$$$: 5982-block  0
        -: 5983:                else
    #####: 5984:                    s << "  values: " << assertString(rb.m_at) << "( " << rb.m_decomp << " )\n";
    $$$$$: 5984-block  0
        -: 5985:            }
    #####: 5986:        }
    $$$$$: 5986-block  0
        -: 5987:
        -: 5988:        // TODO:
        -: 5989:        // - log_message()
        -: 5990:        // - respond to queries
        -: 5991:        // - honor remaining options
        -: 5992:        // - more attributes in tags
function _ZN7doctest12_GLOBAL__N_113JUnitReporterD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporterD0Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporterD2Ev called 0 returned 0% blocks executed 0%
        -: 5993:        struct JUnitReporter : public IReporter {
        -: 5994:            XmlWriter xml;
        -: 5995:            DOCTEST_DECLARE_MUTEX(mutex)
        -: 5996:            Timer timer;
        -: 5997:            std::vector<String> deepestSubcaseStackNames;
        -: 5998:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseDataC1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseDataC2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseDataD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseDataD2Ev called 0 returned 0% blocks executed 0%
    #####: 5999:            struct JUnitTestCaseData {
    $$$$$: 5999-block  0
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData19getCurrentTimestampEv called 0 returned 0% blocks executed 0%
    #####: 6000:                static std::string getCurrentTimestamp() {
        -: 6001:                    // Beware, this is not reentrant because of backward compatibility issues
        -: 6002:                    // Also, UTC only, again because of backward compatibility (%z is C++11)
        -: 6003:                    time_t rawtime;
    #####: 6004:                    std::time(&rawtime);
    #####: 6005:                    auto const timeStampSize = sizeof("2017-01-16T17:06:45Z");
        -: 6006:
        -: 6007:                    std::tm timeInfo;
        -: 6008:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 6009:                    gmtime_s(&timeInfo, &rawtime);
        -: 6010:#else // DOCTEST_PLATFORM_WINDOWS
    #####: 6011:                    gmtime_r(&rawtime, &timeInfo);
        -: 6012:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 6013:
        -: 6014:                    char timeStamp[timeStampSize];
    #####: 6015:                    const char *const fmt = "%Y-%m-%dT%H:%M:%SZ";
        -: 6016:
    #####: 6017:                    std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);
    #####: 6018:                    return std::string(timeStamp);
    $$$$$: 6018-block  0
        -: 6019:                }
        -: 6020:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageD2Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageC1EOS3_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageC2EOS3_ called 0 returned 0% blocks executed 0%
        -: 6021:                struct JUnitTestMessage {
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageC1ERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_SC_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageC2ERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_SC_ called 0 returned 0% blocks executed 0%
    #####: 6022:                    JUnitTestMessage(const std::string &_message, const std::string &_type, const std::string &_details)
    #####: 6023:                            : message(_message), type(_type), details(_details) {}
    $$$$$: 6023-block  0
    $$$$$: 6023-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6023-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 6023-block  3
    $$$$$: 6023-block  4
    $$$$$: 6023-block  5
    $$$$$: 6023-block  6
    $$$$$: 6023-block  7
        -: 6024:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageC1ERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageC2ERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_ called 0 returned 0% blocks executed 0%
    #####: 6025:                    JUnitTestMessage(const std::string &_message, const std::string &_details)
    #####: 6026:                            : message(_message), type(), details(_details) {}
    $$$$$: 6026-block  0
    $$$$$: 6026-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6026-block  2
    $$$$$: 6026-block  3
    $$$$$: 6026-block  4
        -: 6027:
        -: 6028:                    std::string message, type, details;
        -: 6029:                };
        -: 6030:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseC1EOS3_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseC2EOS3_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseD2Ev called 0 returned 0% blocks executed 0%
        -: 6031:                struct JUnitTestCase {
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseC1ERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_ called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseC2ERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_ called 0 returned 0% blocks executed 0%
    #####: 6032:                    JUnitTestCase(const std::string &_classname, const std::string &_name)
    #####: 6033:                            : classname(_classname), name(_name), time(0), failures() {}
    $$$$$: 6033-block  0
    $$$$$: 6033-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6033-block  2
    $$$$$: 6033-block  3
    $$$$$: 6033-block  4
    $$$$$: 6033-block  5
        -: 6034:
        -: 6035:                    std::string classname, name;
        -: 6036:                    double time;
        -: 6037:                    std::vector<JUnitTestMessage> failures, errors;
        -: 6038:                };
        -: 6039:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData3addERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_ called 0 returned 0% blocks executed 0%
    #####: 6040:                void add(const std::string &classname, const std::string &name) {
    #####: 6041:                    testcases.emplace_back(classname, name);
    #####: 6042:                }
    $$$$$: 6042-block  0
        -: 6043:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData32appendSubcaseNamesToLastTestcaseENSt3__16vectorINS_6StringENS3_9allocatorIS5_EEEE called 0 returned 0% blocks executed 0%
    #####: 6044:                void appendSubcaseNamesToLastTestcase(std::vector<String> nameStack) {
    #####: 6045:                    for (auto &curr: nameStack)
    $$$$$: 6045-block  0
    $$$$$: 6045-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6045-block  2
    $$$$$: 6045-block  3
    #####: 6046:                        if (curr.size())
    $$$$$: 6046-block  0
branch  0 never executed
branch  1 never executed
    #####: 6047:                            testcases.back().name += std::string("/") + curr.c_str();
    $$$$$: 6047-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6047-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6047-block  2
    $$$$$: 6047-block  3
    $$$$$: 6047-block  4
    $$$$$: 6047-block  5
    #####: 6048:                }
    $$$$$: 6048-block  0
    $$$$$: 6048-block  1
        -: 6049:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData7addTimeEd called 0 returned 0% blocks executed 0%
    #####: 6050:                void addTime(double time) {
    #####: 6051:                    if (time < 1e-4)
    $$$$$: 6051-block  0
branch  0 never executed
branch  1 never executed
    #####: 6052:                        time = 0;
    $$$$$: 6052-block  0
    #####: 6053:                    testcases.back().time = time;
    #####: 6054:                    totalSeconds += time;
    #####: 6055:                }
    $$$$$: 6055-block  0
        -: 6056:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData10addFailureERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_SB_ called 0 returned 0% blocks executed 0%
    #####: 6057:                void addFailure(const std::string &message, const std::string &type, const std::string &details) {
    #####: 6058:                    testcases.back().failures.emplace_back(message, type, details);
    #####: 6059:                    ++totalFailures;
    #####: 6060:                }
    $$$$$: 6060-block  0
        -: 6061:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData8addErrorERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_ called 0 returned 0% blocks executed 0%
    #####: 6062:                void addError(const std::string &message, const std::string &details) {
    #####: 6063:                    testcases.back().errors.emplace_back(message, details);
    #####: 6064:                    ++totalErrors;
    #####: 6065:                }
    $$$$$: 6065-block  0
        -: 6066:
        -: 6067:                std::vector<JUnitTestCase> testcases;
    #####: 6068:                double totalSeconds = 0;
    #####: 6069:                int totalErrors = 0, totalFailures = 0;
        -: 6070:            };
        -: 6071:
        -: 6072:            JUnitTestCaseData testCaseData;
        -: 6073:
        -: 6074:            // caching pointers/references to objects of these types - safe to do
        -: 6075:            const ContextOptions &opt;
    #####: 6076:            const TestCaseData *tc = nullptr;
        -: 6077:
function _ZN7doctest12_GLOBAL__N_113JUnitReporterC1ERKNS_14ContextOptionsE called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_113JUnitReporterC2ERKNS_14ContextOptionsE called 0 returned 0% blocks executed 0%
    #####: 6078:            JUnitReporter(const ContextOptions &co)
    #####: 6079:                    : xml(*co.cout), opt(co) {}
    $$$$$: 6079-block  0
    $$$$$: 6079-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6079-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 6079-block  3
    $$$$$: 6079-block  4
    $$$$$: 6079-block  5
    $$$$$: 6079-block  6
        -: 6080:
function _ZNK7doctest12_GLOBAL__N_113JUnitReporter4lineEj called 0 returned 0% blocks executed 0%
    #####: 6081:            unsigned line(unsigned l) const { return opt.no_line_numbers ? 0 : l; }
    $$$$$: 6081-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6081-block  1
    $$$$$: 6081-block  2
    $$$$$: 6081-block  3
        -: 6082:
        -: 6083:            // =========================================================================================
        -: 6084:            // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE
        -: 6085:            // =========================================================================================
        -: 6086:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter12report_queryERKNS_9QueryDataE called 0 returned 0% blocks executed 0%
    #####: 6087:            void report_query(const QueryData &) override {
    #####: 6088:                xml.writeDeclaration();
    #####: 6089:            }
    $$$$$: 6089-block  0
        -: 6090:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter14test_run_startEv called 0 returned 0% blocks executed 0%
    #####: 6091:            void test_run_start() override {
    #####: 6092:                xml.writeDeclaration();
    #####: 6093:            }
    $$$$$: 6093-block  0
        -: 6094:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter12test_run_endERKNS_12TestRunStatsE called 0 returned 0% blocks executed 0%
    #####: 6095:            void test_run_end(const TestRunStats &p) override {
        -: 6096:                // remove .exe extension - mainly to have the same output on UNIX and Windows
    #####: 6097:                std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());
        -: 6098:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 6099:                                                                                                                                        if(binary_name.rfind(".exe") != std::string::npos)
        -: 6100:                binary_name = binary_name.substr(0, binary_name.length() - 4);
        -: 6101:#endif // DOCTEST_PLATFORM_WINDOWS
    #####: 6102:                xml.startElement("testsuites");
    $$$$$: 6102-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6102-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6102-block  2
    #####: 6103:                xml.startElement("testsuite").writeAttribute("name", binary_name)
    $$$$$: 6103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6103-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6103-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 6103-block  4
    $$$$$: 6103-block  5
    $$$$$: 6103-block  6
    $$$$$: 6103-block  7
    $$$$$: 6103-block  8
    #####: 6104:                        .writeAttribute("errors", testCaseData.totalErrors)
    $$$$$: 6104-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6104-block  1
branch  2 never executed
branch  3 never executed
    #####: 6105:                        .writeAttribute("failures", testCaseData.totalFailures)
    $$$$$: 6105-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6105-block  1
branch  2 never executed
branch  3 never executed
    #####: 6106:                        .writeAttribute("tests", p.numAsserts);
    $$$$$: 6106-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6106-block  1
branch  2 never executed
branch  3 never executed
    #####: 6107:                if (opt.no_time_in_output == false) {
    $$$$$: 6107-block  0
branch  0 never executed
branch  1 never executed
    #####: 6108:                    xml.writeAttribute("time", testCaseData.totalSeconds);
    $$$$$: 6108-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6108-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6108-block  2
    #####: 6109:                    xml.writeAttribute("timestamp", JUnitTestCaseData::getCurrentTimestamp());
    $$$$$: 6109-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6109-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6109-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6109-block  3
    $$$$$: 6109-block  4
    #####: 6110:                }
    $$$$$: 6110-block  0
    #####: 6111:                if (opt.no_version == false)
    $$$$$: 6111-block  0
branch  0 never executed
branch  1 never executed
    #####: 6112:                    xml.writeAttribute("doctest_version", DOCTEST_VERSION_STR);
    $$$$$: 6112-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6112-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6112-block  2
    $$$$$: 6112-block  3
        -: 6113:
    #####: 6114:                for (const auto &testCase: testCaseData.testcases) {
    $$$$$: 6114-block  0
    $$$$$: 6114-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6114-block  2
    $$$$$: 6114-block  3
    #####: 6115:                    xml.startElement("testcase")
    $$$$$: 6115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6115-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6115-block  2
    $$$$$: 6115-block  3
    $$$$$: 6115-block  4
    #####: 6116:                            .writeAttribute("classname", testCase.classname)
    $$$$$: 6116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6116-block  1
branch  2 never executed
branch  3 never executed
    #####: 6117:                            .writeAttribute("name", testCase.name);
    $$$$$: 6117-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6117-block  1
branch  2 never executed
branch  3 never executed
    #####: 6118:                    if (opt.no_time_in_output == false)
    $$$$$: 6118-block  0
branch  0 never executed
branch  1 never executed
    #####: 6119:                        xml.writeAttribute("time", testCase.time);
    $$$$$: 6119-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6119-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6119-block  2
    $$$$$: 6119-block  3
        -: 6120:                    // This is not ideal, but it should be enough to mimic gtest's junit output.
    #####: 6121:                    xml.writeAttribute("status", "run");
    $$$$$: 6121-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6121-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6121-block  2
        -: 6122:
    #####: 6123:                    for (const auto &failure: testCase.failures) {
    $$$$$: 6123-block  0
    $$$$$: 6123-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6123-block  2
    $$$$$: 6123-block  3
    #####: 6124:                        xml.scopedElement("failure")
    $$$$$: 6124-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6124-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6124-block  2
    $$$$$: 6124-block  3
    $$$$$: 6124-block  4
    $$$$$: 6124-block  5
    #####: 6125:                                .writeAttribute("message", failure.message)
    $$$$$: 6125-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6125-block  1
branch  2 never executed
branch  3 never executed
    #####: 6126:                                .writeAttribute("type", failure.type)
    $$$$$: 6126-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6126-block  1
branch  2 never executed
branch  3 never executed
    #####: 6127:                                .writeText(failure.details, false);
    $$$$$: 6127-block  0
branch  0 never executed
branch  1 never executed
        -: 6128:                    }
        -: 6129:
    #####: 6130:                    for (const auto &error: testCase.errors) {
    $$$$$: 6130-block  0
    $$$$$: 6130-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6130-block  2
    $$$$$: 6130-block  3
    #####: 6131:                        xml.scopedElement("error")
    $$$$$: 6131-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6131-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6131-block  2
    $$$$$: 6131-block  3
    $$$$$: 6131-block  4
    #####: 6132:                                .writeAttribute("message", error.message)
    $$$$$: 6132-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6132-block  1
branch  2 never executed
branch  3 never executed
    #####: 6133:                                .writeText(error.details);
    $$$$$: 6133-block  0
branch  0 never executed
branch  1 never executed
        -: 6134:                    }
        -: 6135:
    #####: 6136:                    xml.endElement();
    $$$$$: 6136-block  0
branch  0 never executed
branch  1 never executed
        -: 6137:                }
    #####: 6138:                xml.endElement();
    $$$$$: 6138-block  0
branch  0 never executed
branch  1 never executed
    #####: 6139:                xml.endElement();
    $$$$$: 6139-block  0
branch  0 never executed
branch  1 never executed
    #####: 6140:            }
    $$$$$: 6140-block  0
    $$$$$: 6140-block  1
    $$$$$: 6140-block  2
    $$$$$: 6140-block  3
    $$$$$: 6140-block  4
    $$$$$: 6140-block  5
    $$$$$: 6140-block  6
    $$$$$: 6140-block  7
    $$$$$: 6140-block  8
    $$$$$: 6140-block  9
    $$$$$: 6140-block 10
    $$$$$: 6140-block 11
    $$$$$: 6140-block 12
    $$$$$: 6140-block 13
    $$$$$: 6140-block 14
    $$$$$: 6140-block 15
        -: 6141:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter15test_case_startERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 6142:            void test_case_start(const TestCaseData &in) override {
    #####: 6143:                testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);
    $$$$$: 6143-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6143-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6143-block  2
    $$$$$: 6143-block  3
    $$$$$: 6143-block  4
    #####: 6144:                timer.start();
    #####: 6145:            }
    $$$$$: 6145-block  0
    $$$$$: 6145-block  1
        -: 6146:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17test_case_reenterERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 6147:            void test_case_reenter(const TestCaseData &in) override {
    #####: 6148:                testCaseData.addTime(timer.getElapsedSeconds());
    #####: 6149:                testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);
    $$$$$: 6149-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6149-block  1
    $$$$$: 6149-block  2
    #####: 6150:                deepestSubcaseStackNames.clear();
        -: 6151:
    #####: 6152:                timer.start();
    #####: 6153:                testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);
    $$$$$: 6153-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6153-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6153-block  2
    $$$$$: 6153-block  3
    #####: 6154:            }
    $$$$$: 6154-block  0
    $$$$$: 6154-block  1
        -: 6155:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter13test_case_endERKNS_20CurrentTestCaseStatsE called 0 returned 0% blocks executed 0%
    #####: 6156:            void test_case_end(const CurrentTestCaseStats &) override {
    #####: 6157:                testCaseData.addTime(timer.getElapsedSeconds());
    #####: 6158:                testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);
    $$$$$: 6158-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6158-block  1
    $$$$$: 6158-block  2
    #####: 6159:                deepestSubcaseStackNames.clear();
    #####: 6160:            }
    $$$$$: 6160-block  0
        -: 6161:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter19test_case_exceptionERKNS_17TestCaseExceptionE called 0 returned 0% blocks executed 0%
    #####: 6162:            void test_case_exception(const TestCaseException &e) override {
    #####: 6163:                DOCTEST_LOCK_MUTEX(mutex)
    #####: 6164:                testCaseData.addError("exception", e.error_string.c_str());
    $$$$$: 6164-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6164-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6164-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6164-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 6164-block  4
    $$$$$: 6164-block  5
    #####: 6165:            }
    $$$$$: 6165-block  0
    $$$$$: 6165-block  1
    $$$$$: 6165-block  2
    $$$$$: 6165-block  3
    $$$$$: 6165-block  4
        -: 6166:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter13subcase_startERKNS_16SubcaseSignatureE called 0 returned 0% blocks executed 0%
    #####: 6167:            void subcase_start(const SubcaseSignature &in) override {
    #####: 6168:                deepestSubcaseStackNames.push_back(in.m_name);
    #####: 6169:            }
    $$$$$: 6169-block  0
        -: 6170:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter11subcase_endEv called 0 returned 0% blocks executed 0%
    #####: 6171:            void subcase_end() override {}
    $$$$$: 6171-block  0
        -: 6172:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter10log_assertERKNS_10AssertDataE called 0 returned 0% blocks executed 0%
    #####: 6173:            void log_assert(const AssertData &rb) override {
    #####: 6174:                if (!rb.m_failed) // report only failures & ignore the `success` option
    $$$$$: 6174-block  0
branch  0 never executed
branch  1 never executed
    #####: 6175:                    return;
    $$$$$: 6175-block  0
        -: 6176:
    #####: 6177:                DOCTEST_LOCK_MUTEX(mutex)
        -: 6178:
    #####: 6179:                std::ostringstream os;
    $$$$$: 6179-block  0
branch  0 never executed
branch  1 never executed
    #####: 6180:                os << skipPathFromFilename(rb.m_file) << (opt.gnu_file_line ? ":" : "(")
    $$$$$: 6180-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6180-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6180-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6180-block  3
    $$$$$: 6180-block  4
    $$$$$: 6180-block  5
branch  6 never executed
branch  7 never executed
    #####: 6181:                   << line(rb.m_line) << (opt.gnu_file_line ? ":" : "):") << std::endl;
    $$$$$: 6181-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6181-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6181-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6181-block  3
branch  6 never executed
branch  7 never executed
        -: 6182:
    #####: 6183:                fulltext_log_assert_to_stream(os, rb);
    $$$$$: 6183-block  0
branch  0 never executed
branch  1 never executed
    #####: 6184:                log_contexts(os);
    $$$$$: 6184-block  0
branch  0 never executed
branch  1 never executed
    #####: 6185:                testCaseData.addFailure(rb.m_decomp.c_str(), assertString(rb.m_at), os.str());
    $$$$$: 6185-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6185-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6185-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6185-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 6185-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 6185-block  5
branch 10 never executed
branch 11 never executed
    $$$$$: 6185-block  6
    $$$$$: 6185-block  7
    $$$$$: 6185-block  8
    #####: 6186:            }
    $$$$$: 6186-block  0
    $$$$$: 6186-block  1
    $$$$$: 6186-block  2
    $$$$$: 6186-block  3
    $$$$$: 6186-block  4
    $$$$$: 6186-block  5
    $$$$$: 6186-block  6
    $$$$$: 6186-block  7
    $$$$$: 6186-block  8
        -: 6187:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter11log_messageERKNS_11MessageDataE called 0 returned 0% blocks executed 0%
    #####: 6188:            void log_message(const MessageData &mb) override {
    #####: 6189:                if (mb.m_severity & assertType::is_warn) // report only failures
    $$$$$: 6189-block  0
branch  0 never executed
branch  1 never executed
    #####: 6190:                    return;
    $$$$$: 6190-block  0
        -: 6191:
    #####: 6192:                DOCTEST_LOCK_MUTEX(mutex)
        -: 6193:
    #####: 6194:                std::ostringstream os;
    $$$$$: 6194-block  0
branch  0 never executed
branch  1 never executed
    #####: 6195:                os << skipPathFromFilename(mb.m_file) << (opt.gnu_file_line ? ":" : "(")
    $$$$$: 6195-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6195-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6195-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6195-block  3
    $$$$$: 6195-block  4
    $$$$$: 6195-block  5
branch  6 never executed
branch  7 never executed
    #####: 6196:                   << line(mb.m_line) << (opt.gnu_file_line ? ":" : "):") << std::endl;
    $$$$$: 6196-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6196-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6196-block  2
branch  4 never executed
branch  5 never executed
        -: 6197:
    #####: 6198:                os << mb.m_string.c_str() << "\n";
    $$$$$: 6198-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6198-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6198-block  2
branch  4 never executed
branch  5 never executed
    #####: 6199:                log_contexts(os);
    $$$$$: 6199-block  0
branch  0 never executed
branch  1 never executed
        -: 6200:
    #####: 6201:                testCaseData.addFailure(mb.m_string.c_str(),
    $$$$$: 6201-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6201-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6201-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 6201-block  3
    $$$$$: 6201-block  4
    $$$$$: 6201-block  5
    #####: 6202:                                        mb.m_severity & assertType::is_check ? "FAIL_CHECK" : "FAIL", os.str());
    $$$$$: 6202-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6202-block  1
branch  2 never executed
branch  3 never executed
    #####: 6203:            }
    $$$$$: 6203-block  0
    $$$$$: 6203-block  1
    $$$$$: 6203-block  2
    $$$$$: 6203-block  3
    $$$$$: 6203-block  4
    $$$$$: 6203-block  5
    $$$$$: 6203-block  6
    $$$$$: 6203-block  7
    $$$$$: 6203-block  8
        -: 6204:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter17test_case_skippedERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 6205:            void test_case_skipped(const TestCaseData &) override {}
    $$$$$: 6205-block  0
        -: 6206:
function _ZN7doctest12_GLOBAL__N_113JUnitReporter12log_contextsERNSt3__119basic_ostringstreamIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE called 0 returned 0% blocks executed 0%
    #####: 6207:            void log_contexts(std::ostringstream &s) {
    #####: 6208:                int num_contexts = get_num_active_contexts();
    #####: 6209:                if (num_contexts) {
    $$$$$: 6209-block  0
branch  0 never executed
branch  1 never executed
    #####: 6210:                    auto contexts = get_active_contexts();
        -: 6211:
    #####: 6212:                    s << "  logged: ";
    #####: 6213:                    for (int i = 0; i < num_contexts; ++i) {
    $$$$$: 6213-block  0
    $$$$$: 6213-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6213-block  2
    #####: 6214:                        s << (i == 0 ? "" : "          ");
    #####: 6215:                        contexts[i]->stringify(&s);
    #####: 6216:                        s << std::endl;
    #####: 6217:                    }
    $$$$$: 6217-block  0
    #####: 6218:                }
    $$$$$: 6218-block  0
    #####: 6219:            }
    $$$$$: 6219-block  0
        -: 6220:        };
        -: 6221:
        -: 6222:        DOCTEST_REGISTER_REPORTER("junit", 0, JUnitReporter);
        -: 6223:
        -: 6224:        struct Whitespace {
        -: 6225:            int nrSpaces;
        -: 6226:
function _ZN7doctest12_GLOBAL__N_110WhitespaceC1Ei called 0 returned 0% blocks executed 0%
function _ZN7doctest12_GLOBAL__N_110WhitespaceC2Ei called 0 returned 0% blocks executed 0%
    #####: 6227:            explicit Whitespace(int nr)
    #####: 6228:                    : nrSpaces(nr) {}
    $$$$$: 6228-block  0
    $$$$$: 6228-block  1
        -: 6229:        };
        -: 6230:
function _ZN7doctest12_GLOBAL__N_1lsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS0_10WhitespaceE called 0 returned 0% blocks executed 0%
    #####: 6231:        std::ostream &operator<<(std::ostream &out, const Whitespace &ws) {
    #####: 6232:            if (ws.nrSpaces != 0)
    $$$$$: 6232-block  0
branch  0 never executed
branch  1 never executed
    #####: 6233:                out << std::setw(ws.nrSpaces) << ' ';
    $$$$$: 6233-block  0
    #####: 6234:            return out;
    $$$$$: 6234-block  0
        -: 6235:        }
        -: 6236:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporterD1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest12_GLOBAL__N_115ConsoleReporterD0Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest12_GLOBAL__N_115ConsoleReporterD2Ev called 1 returned 100% blocks executed 100%
        -: 6237:        struct ConsoleReporter : public IReporter {
        -: 6238:            std::ostream &s;
        -: 6239:            bool hasLoggedCurrentTestStart;
        -: 6240:            std::vector<SubcaseSignature> subcasesStack;
        -: 6241:            size_t currentSubcaseLevel;
        -: 6242:            DOCTEST_DECLARE_MUTEX(mutex)
        -: 6243:
        -: 6244:            // caching pointers/references to objects of these types - safe to do
        -: 6245:            const ContextOptions &opt;
        -: 6246:            const TestCaseData *tc;
        -: 6247:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporterC1ERKNS_14ContextOptionsE called 1 returned 100% blocks executed 100%
function _ZN7doctest12_GLOBAL__N_115ConsoleReporterC2ERKNS_14ContextOptionsE called 1 returned 100% blocks executed 100%
        4: 6248:            ConsoleReporter(const ContextOptions &co)
        4: 6249:                    : s(*co.cout), opt(co) {}
        1: 6249-block  0
        1: 6249-block  1
        1: 6249-block  2
        1: 6249-block  3
        -: 6250:
        -: 6251:            ConsoleReporter(const ContextOptions &co, std::ostream &ostr)
        -: 6252:                    : s(ostr), opt(co) {}
        -: 6253:
        -: 6254:            // =========================================================================================
        -: 6255:            // WHAT FOLLOWS ARE HELPERS USED BY THE OVERRIDES OF THE VIRTUAL METHODS OF THE INTERFACE
        -: 6256:            // =========================================================================================
        -: 6257:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter19separator_to_streamEv called 1 returned 100% blocks executed 100%
        1: 6258:            void separator_to_stream() {
        1: 6259:                s << Color::Yellow
        1: 6260:                  << "==============================================================================="
        -: 6261:                     "\n";
        1: 6262:            }
        1: 6262-block  0
        -: 6263:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter22getSuccessOrFailStringEbNS_10assertType4EnumEPKc called 0 returned 0% blocks executed 0%
    #####: 6264:            const char *getSuccessOrFailString(bool success, assertType::Enum at,
        -: 6265:                                               const char *success_str) {
    #####: 6266:                if (success)
    $$$$$: 6266-block  0
branch  0 never executed
branch  1 never executed
    #####: 6267:                    return success_str;
    $$$$$: 6267-block  0
    #####: 6268:                return failureString(at);
    $$$$$: 6268-block  0
    #####: 6269:            }
    $$$$$: 6269-block  0
        -: 6270:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter21getSuccessOrFailColorEbNS_10assertType4EnumE called 0 returned 0% blocks executed 0%
    #####: 6271:            Color::Enum getSuccessOrFailColor(bool success, assertType::Enum at) {
    #####: 6272:                return success ? Color::BrightGreen :
    $$$$$: 6272-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6272-block  1
    $$$$$: 6272-block  2
    $$$$$: 6272-block  3
    #####: 6273:                       (at & assertType::is_warn) ? Color::Yellow : Color::Red;
        -: 6274:            }
        -: 6275:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter34successOrFailColoredStringToStreamEbNS_10assertType4EnumEPKc called 0 returned 0% blocks executed 0%
    #####: 6276:            void successOrFailColoredStringToStream(bool success, assertType::Enum at,
        -: 6277:                                                    const char *success_str = "SUCCESS") {
    #####: 6278:                s << getSuccessOrFailColor(success, at)
    #####: 6279:                  << getSuccessOrFailString(success, at, success_str) << ": ";
    #####: 6280:            }
    $$$$$: 6280-block  0
        -: 6281:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter12log_contextsEv called 0 returned 0% blocks executed 0%
    #####: 6282:            void log_contexts() {
    #####: 6283:                int num_contexts = get_num_active_contexts();
    #####: 6284:                if (num_contexts) {
    $$$$$: 6284-block  0
branch  0 never executed
branch  1 never executed
    #####: 6285:                    auto contexts = get_active_contexts();
        -: 6286:
    #####: 6287:                    s << Color::None << "  logged: ";
    #####: 6288:                    for (int i = 0; i < num_contexts; ++i) {
    $$$$$: 6288-block  0
    $$$$$: 6288-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6288-block  2
    #####: 6289:                        s << (i == 0 ? "" : "          ");
    #####: 6290:                        contexts[i]->stringify(&s);
    #####: 6291:                        s << "\n";
    #####: 6292:                    }
    $$$$$: 6292-block  0
    #####: 6293:                }
    $$$$$: 6293-block  0
        -: 6294:
    #####: 6295:                s << "\n";
    #####: 6296:            }
    $$$$$: 6296-block  0
        -: 6297:
        -: 6298:            // this was requested to be made virtual so users could override it
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter19file_line_to_streamEPKciS3_ called 0 returned 0% blocks executed 0%
    #####: 6299:            virtual void file_line_to_stream(const char *file, int line,
        -: 6300:                                             const char *tail = "") {
    #####: 6301:                s << Color::LightGrey << skipPathFromFilename(file) << (opt.gnu_file_line ? ":" : "(")
    $$$$$: 6301-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6301-block  1
    $$$$$: 6301-block  2
    #####: 6302:                  << (opt.no_line_numbers ? 0 : line) // 0 or the real num depending on the option
    $$$$$: 6302-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6302-block  1
    $$$$$: 6302-block  2
    #####: 6303:                  << (opt.gnu_file_line ? ":" : "):") << tail;
    #####: 6304:            }
    $$$$$: 6304-block  0
        -: 6305:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter12logTestStartEv called 0 returned 0% blocks executed 0%
    #####: 6306:            void logTestStart() {
    #####: 6307:                if (hasLoggedCurrentTestStart)
    $$$$$: 6307-block  0
branch  0 never executed
branch  1 never executed
    #####: 6308:                    return;
    $$$$$: 6308-block  0
        -: 6309:
    #####: 6310:                separator_to_stream();
    #####: 6311:                file_line_to_stream(tc->m_file.c_str(), tc->m_line, "\n");
    #####: 6312:                if (tc->m_description)
    $$$$$: 6312-block  0
branch  0 never executed
branch  1 never executed
    #####: 6313:                    s << Color::Yellow << "DESCRIPTION: " << Color::None << tc->m_description << "\n";
    $$$$$: 6313-block  0
    #####: 6314:                if (tc->m_test_suite && tc->m_test_suite[0] != '\0')
    $$$$$: 6314-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6314-block  1
branch  2 never executed
branch  3 never executed
    #####: 6315:                    s << Color::Yellow << "TEST SUITE: " << Color::None << tc->m_test_suite << "\n";
    $$$$$: 6315-block  0
    #####: 6316:                if (strncmp(tc->m_name, "  Scenario:", 11) != 0)
    $$$$$: 6316-block  0
branch  0 never executed
branch  1 never executed
    #####: 6317:                    s << Color::Yellow << "TEST CASE:  ";
    $$$$$: 6317-block  0
    #####: 6318:                s << Color::None << tc->m_name << "\n";
        -: 6319:
    #####: 6320:                for (size_t i = 0; i < currentSubcaseLevel; ++i) {
    $$$$$: 6320-block  0
    $$$$$: 6320-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6320-block  2
    #####: 6321:                    if (subcasesStack[i].m_name[0] != '\0')
    $$$$$: 6321-block  0
branch  0 never executed
branch  1 never executed
    #####: 6322:                        s << "  " << subcasesStack[i].m_name << "\n";
    $$$$$: 6322-block  0
    #####: 6323:                }
    $$$$$: 6323-block  0
        -: 6324:
    #####: 6325:                if (currentSubcaseLevel != subcasesStack.size()) {
    $$$$$: 6325-block  0
branch  0 never executed
branch  1 never executed
    #####: 6326:                    s << Color::Yellow << "\nDEEPEST SUBCASE STACK REACHED (DIFFERENT FROM THE CURRENT ONE):\n"
    #####: 6327:                      << Color::None;
    #####: 6328:                    for (size_t i = 0; i < subcasesStack.size(); ++i) {
    $$$$$: 6328-block  0
    $$$$$: 6328-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6328-block  2
    #####: 6329:                        if (subcasesStack[i].m_name[0] != '\0')
    $$$$$: 6329-block  0
branch  0 never executed
branch  1 never executed
    #####: 6330:                            s << "  " << subcasesStack[i].m_name << "\n";
    $$$$$: 6330-block  0
    #####: 6331:                    }
    $$$$$: 6331-block  0
    #####: 6332:                }
    $$$$$: 6332-block  0
        -: 6333:
    #####: 6334:                s << "\n";
        -: 6335:
    #####: 6336:                hasLoggedCurrentTestStart = true;
    #####: 6337:            }
    $$$$$: 6337-block  0
    $$$$$: 6337-block  1
        -: 6338:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter12printVersionEv called 1 returned 100% blocks executed 100%
        1: 6339:            void printVersion() {
        1: 6340:                if (opt.no_version == false)
        1: 6340-block  0
branch  0 taken 1
branch  1 taken 0
        2: 6341:                    s << Color::Cyan << "[doctest] " << Color::None << "doctest version is \""
        1: 6341-block  0
        1: 6341-block  1
        1: 6342:                      << DOCTEST_VERSION_STR << "\"\n";
        1: 6343:            }
        1: 6343-block  0
        -: 6344:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter10printIntroEv called 1 returned 100% blocks executed 100%
        1: 6345:            void printIntro() {
        1: 6346:                if (opt.no_intro == false) {
        1: 6346-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6347:                    printVersion();
        1: 6348:                    s << Color::Cyan << "[doctest] " << Color::None
        1: 6349:                      << "run with \"--" DOCTEST_OPTIONS_PREFIX_DISPLAY "help\" for options\n";
        1: 6350:                }
        1: 6350-block  0
        1: 6351:            }
        1: 6351-block  0
        -: 6352:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter9printHelpEv called 0 returned 0% blocks executed 0%
    #####: 6353:            void printHelp() {
    #####: 6354:                int sizePrefixDisplay = static_cast<int>(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));
    #####: 6355:                printVersion();
        -: 6356:                // clang-format off
    #####: 6357:                s << Color::Cyan << "[doctest]\n" << Color::None;
    #####: 6358:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6359:                s << "boolean values: \"1/on/yes/true\" or \"0/off/no/false\"\n";
    #####: 6360:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6361:                s << "filter  values: \"str1,str2,str3\" (comma separated strings)\n";
    #####: 6362:                s << Color::Cyan << "[doctest]\n" << Color::None;
    #####: 6363:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6364:                s << "filters use wildcards for matching strings\n";
    #####: 6365:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6366:                s << "something passes a filter if any of the strings in a filter matches\n";
        -: 6367:#ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS
    #####: 6368:                s << Color::Cyan << "[doctest]\n" << Color::None;
    #####: 6369:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6370:                s
    #####: 6371:                        << "ALL FLAGS, OPTIONS AND FILTERS ALSO AVAILABLE WITH A \"" DOCTEST_CONFIG_OPTIONS_PREFIX "\" PREFIX!!!\n";
        -: 6372:#endif
    #####: 6373:                s << Color::Cyan << "[doctest]\n" << Color::None;
    #####: 6374:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6375:                s << "Query flags - the program quits after them. Available:\n\n";
    #####: 6376:                s
    #####: 6377:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "?,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "help, -" DOCTEST_OPTIONS_PREFIX_DISPLAY "h                      "
    #####: 6378:                        << Whitespace(sizePrefixDisplay * 0) << "prints this message\n";
    #####: 6379:                s
    #####: 6380:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "v,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "version                       "
    #####: 6381:                        << Whitespace(sizePrefixDisplay * 1) << "prints the version\n";
    #####: 6382:                s
    #####: 6383:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "c,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "count                         "
    #####: 6384:                        << Whitespace(sizePrefixDisplay * 1) << "prints the number of matching tests\n";
    #####: 6385:                s
    #####: 6386:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "ltc, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "list-test-cases               "
    #####: 6387:                        << Whitespace(sizePrefixDisplay * 1) << "lists all matching tests by name\n";
    #####: 6388:                s
    #####: 6389:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "lts, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "list-test-suites              "
    #####: 6390:                        << Whitespace(sizePrefixDisplay * 1) << "lists all matching test suites\n";
    #####: 6391:                s
    #####: 6392:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "lr,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "list-reporters                "
    #####: 6393:                        << Whitespace(sizePrefixDisplay * 1) << "lists all registered reporters\n\n";
        -: 6394:                // ================================================================================== << 79
    #####: 6395:                s << Color::Cyan << "[doctest] " << Color::None;
    #####: 6396:                s << "The available <int>/<string> options/filters are:\n\n";
    #####: 6397:                s
    #####: 6398:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "tc,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "test-case=<filters>           "
    #####: 6399:                        << Whitespace(sizePrefixDisplay * 1) << "filters     tests by their name\n";
    #####: 6400:                s
    #####: 6401:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "tce, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "test-case-exclude=<filters>   "
    #####: 6402:                        << Whitespace(sizePrefixDisplay * 1) << "filters OUT tests by their name\n";
    #####: 6403:                s
    #####: 6404:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "sf,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "source-file=<filters>         "
    #####: 6405:                        << Whitespace(sizePrefixDisplay * 1) << "filters     tests by their file\n";
    #####: 6406:                s
    #####: 6407:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "sfe, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "source-file-exclude=<filters> "
    #####: 6408:                        << Whitespace(sizePrefixDisplay * 1) << "filters OUT tests by their file\n";
    #####: 6409:                s
    #####: 6410:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "ts,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "test-suite=<filters>          "
    #####: 6411:                        << Whitespace(sizePrefixDisplay * 1) << "filters     tests by their test suite\n";
    #####: 6412:                s
    #####: 6413:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "tse, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "test-suite-exclude=<filters>  "
    #####: 6414:                        << Whitespace(sizePrefixDisplay * 1) << "filters OUT tests by their test suite\n";
    #####: 6415:                s
    #####: 6416:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "sc,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "subcase=<filters>             "
    #####: 6417:                        << Whitespace(sizePrefixDisplay * 1) << "filters     subcases by their name\n";
    #####: 6418:                s
    #####: 6419:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "sce, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "subcase-exclude=<filters>     "
    #####: 6420:                        << Whitespace(sizePrefixDisplay * 1) << "filters OUT subcases by their name\n";
    #####: 6421:                s
    #####: 6422:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "r,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "reporters=<filters>           "
    #####: 6423:                        << Whitespace(sizePrefixDisplay * 1) << "reporters to use (console is default)\n";
    #####: 6424:                s
    #####: 6425:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "o,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "out=<string>                  "
    #####: 6426:                        << Whitespace(sizePrefixDisplay * 1) << "output filename\n";
    #####: 6427:                s
    #####: 6428:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "ob,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "order-by=<string>             "
    #####: 6429:                        << Whitespace(sizePrefixDisplay * 1) << "how the tests should be ordered\n";
    #####: 6430:                s << Whitespace(sizePrefixDisplay * 3)
    #####: 6431:                  << "                                       <string> - [file/suite/name/rand/none]\n";
    #####: 6432:                s
    #####: 6433:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "rs,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "rand-seed=<int>               "
    #####: 6434:                        << Whitespace(sizePrefixDisplay * 1) << "seed for random ordering\n";
    #####: 6435:                s
    #####: 6436:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "f,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "first=<int>                   "
    #####: 6437:                        << Whitespace(sizePrefixDisplay * 1) << "the first test passing the filters to\n";
    #####: 6438:                s << Whitespace(sizePrefixDisplay * 3)
    #####: 6439:                  << "                                       execute - for range-based execution\n";
    #####: 6440:                s
    #####: 6441:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "l,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "last=<int>                    "
    #####: 6442:                        << Whitespace(sizePrefixDisplay * 1) << "the last test passing the filters to\n";
    #####: 6443:                s << Whitespace(sizePrefixDisplay * 3)
    #####: 6444:                  << "                                       execute - for range-based execution\n";
    #####: 6445:                s
    #####: 6446:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "aa,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "abort-after=<int>             "
    #####: 6447:                        << Whitespace(sizePrefixDisplay * 1) << "stop after <int> failed assertions\n";
    #####: 6448:                s
    #####: 6449:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "scfl,--" DOCTEST_OPTIONS_PREFIX_DISPLAY "subcase-filter-levels=<int>   "
    #####: 6450:                        << Whitespace(sizePrefixDisplay * 1) << "apply filters for the first <int> levels\n";
    #####: 6451:                s << Color::Cyan << "\n[doctest] " << Color::None;
    #####: 6452:                s << "Bool options - can be used like flags and true is assumed. Available:\n\n";
    #####: 6453:                s
    #####: 6454:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "s,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "success=<bool>                "
    #####: 6455:                        << Whitespace(sizePrefixDisplay * 1) << "include successful assertions in output\n";
    #####: 6456:                s
    #####: 6457:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "cs,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "case-sensitive=<bool>         "
    #####: 6458:                        << Whitespace(sizePrefixDisplay * 1) << "filters being treated as case sensitive\n";
    #####: 6459:                s
    #####: 6460:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "e,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "exit=<bool>                   "
    #####: 6461:                        << Whitespace(sizePrefixDisplay * 1) << "exits after the tests finish\n";
    #####: 6462:                s
    #####: 6463:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "d,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "duration=<bool>               "
    #####: 6464:                        << Whitespace(sizePrefixDisplay * 1) << "prints the time duration of each test\n";
    #####: 6465:                s
    #####: 6466:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "m,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "minimal=<bool>                "
    #####: 6467:                        << Whitespace(sizePrefixDisplay * 1) << "minimal console output (only failures)\n";
    #####: 6468:                s
    #####: 6469:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "q,   --" DOCTEST_OPTIONS_PREFIX_DISPLAY "quiet=<bool>                  "
    #####: 6470:                        << Whitespace(sizePrefixDisplay * 1) << "no console output\n";
    #####: 6471:                s
    #####: 6472:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "nt,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-throw=<bool>               "
    #####: 6473:                        << Whitespace(sizePrefixDisplay * 1) << "skips exceptions-related assert checks\n";
    #####: 6474:                s
    #####: 6475:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "ne,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-exitcode=<bool>            "
    #####: 6476:                        << Whitespace(sizePrefixDisplay * 1) << "returns (or exits) always with success\n";
    #####: 6477:                s
    #####: 6478:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "nr,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-run=<bool>                 "
    #####: 6479:                        << Whitespace(sizePrefixDisplay * 1) << "skips all runtime doctest operations\n";
    #####: 6480:                s
    #####: 6481:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "ni,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-intro=<bool>               "
    #####: 6482:                        << Whitespace(sizePrefixDisplay * 1) << "omit the framework intro in the output\n";
    #####: 6483:                s
    #####: 6484:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "nv,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-version=<bool>             "
    #####: 6485:                        << Whitespace(sizePrefixDisplay * 1) << "omit the framework version in the output\n";
    #####: 6486:                s
    #####: 6487:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "nc,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-colors=<bool>              "
    #####: 6488:                        << Whitespace(sizePrefixDisplay * 1) << "disables colors in output\n";
    #####: 6489:                s
    #####: 6490:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "fc,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "force-colors=<bool>           "
    #####: 6491:                        << Whitespace(sizePrefixDisplay * 1) << "use colors even when not in a tty\n";
    #####: 6492:                s
    #####: 6493:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "nb,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-breaks=<bool>              "
    #####: 6494:                        << Whitespace(sizePrefixDisplay * 1) << "disables breakpoints in debuggers\n";
    #####: 6495:                s
    #####: 6496:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "ns,  --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-skip=<bool>                "
    #####: 6497:                        << Whitespace(sizePrefixDisplay * 1) << "don't skip test cases marked as skip\n";
    #####: 6498:                s
    #####: 6499:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "gfl, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "gnu-file-line=<bool>          "
    #####: 6500:                        << Whitespace(sizePrefixDisplay * 1) << ":n: vs (n): for line numbers in output\n";
    #####: 6501:                s
    #####: 6502:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "npf, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-path-filenames=<bool>      "
    #####: 6503:                        << Whitespace(sizePrefixDisplay * 1) << "only filenames and no paths in output\n";
    #####: 6504:                s
    #####: 6505:                        << " -" DOCTEST_OPTIONS_PREFIX_DISPLAY "nln, --" DOCTEST_OPTIONS_PREFIX_DISPLAY "no-line-numbers=<bool>        "
    #####: 6506:                        << Whitespace(sizePrefixDisplay * 1) << "0 instead of real line numbers in output\n";
        -: 6507:                // ================================================================================== << 79
        -: 6508:                // clang-format on
        -: 6509:
    #####: 6510:                s << Color::Cyan << "\n[doctest] " << Color::None;
    #####: 6511:                s << "for more information visit the project documentation\n\n";
    #####: 6512:            }
    $$$$$: 6512-block  0
        -: 6513:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter24printRegisteredReportersEv called 0 returned 0% blocks executed 0%
    #####: 6514:            void printRegisteredReporters() {
    #####: 6515:                printVersion();
function _ZZN7doctest12_GLOBAL__N_115ConsoleReporter24printRegisteredReportersEvENKUlRKNSt3__13mapINS2_4pairIiNS_6StringEEEPFPNS_9IReporterERKNS_14ContextOptionsEENS2_4lessIS6_EENS2_9allocatorINS4_IKS6_SD_EEEEEEPKcE_clESM_SO_ called 0 returned 0% blocks executed 0%
    #####: 6516:                auto printReporters = [this](const reporterMap &reporters, const char *type) {
    #####: 6517:                    if (reporters.size()) {
    $$$$$: 6517-block  0
branch  0 never executed
branch  1 never executed
    #####: 6518:                        s << Color::Cyan << "[doctest] " << Color::None << "listing all registered " << type << "\n";
    #####: 6519:                        for (auto &curr: reporters)
    $$$$$: 6519-block  0
    $$$$$: 6519-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6519-block  2
    $$$$$: 6519-block  3
    $$$$$: 6519-block  4
    #####: 6520:                            s << "priority: " << std::setw(5) << curr.first.first
    #####: 6521:                              << " name: " << curr.first.second << "\n";
    #####: 6522:                    }
    $$$$$: 6522-block  0
    #####: 6523:                };
    $$$$$: 6523-block  0
    #####: 6524:                printReporters(getListeners(), "listeners");
    #####: 6525:                printReporters(getReporters(), "reporters");
    #####: 6526:            }
    $$$$$: 6526-block  0
        -: 6527:
        -: 6528:            // =========================================================================================
        -: 6529:            // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE
        -: 6530:            // =========================================================================================
        -: 6531:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter12report_queryERKNS_9QueryDataE called 0 returned 0% blocks executed 0%
    #####: 6532:            void report_query(const QueryData &in) override {
    #####: 6533:                if (opt.version) {
    $$$$$: 6533-block  0
branch  0 never executed
branch  1 never executed
    #####: 6534:                    printVersion();
    #####: 6535:                } else if (opt.help) {
    $$$$$: 6535-block  0
    $$$$$: 6535-block  1
branch  0 never executed
branch  1 never executed
    #####: 6536:                    printHelp();
    #####: 6537:                } else if (opt.list_reporters) {
    $$$$$: 6537-block  0
    $$$$$: 6537-block  1
branch  0 never executed
branch  1 never executed
    #####: 6538:                    printRegisteredReporters();
    #####: 6539:                } else if (opt.count || opt.list_test_cases) {
    $$$$$: 6539-block  0
    $$$$$: 6539-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6539-block  2
branch  2 never executed
branch  3 never executed
    #####: 6540:                    if (opt.list_test_cases) {
    $$$$$: 6540-block  0
branch  0 never executed
branch  1 never executed
    #####: 6541:                        s << Color::Cyan << "[doctest] " << Color::None
    #####: 6542:                          << "listing all test case names\n";
    #####: 6543:                        separator_to_stream();
    #####: 6544:                    }
    $$$$$: 6544-block  0
        -: 6545:
    #####: 6546:                    for (unsigned i = 0; i < in.num_data; ++i)
    $$$$$: 6546-block  0
    $$$$$: 6546-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6546-block  2
    #####: 6547:                        s << Color::None << in.data[i]->m_name << "\n";
    $$$$$: 6547-block  0
        -: 6548:
    #####: 6549:                    separator_to_stream();
        -: 6550:
    #####: 6551:                    s << Color::Cyan << "[doctest] " << Color::None
    #####: 6552:                      << "unskipped test cases passing the current filters: "
    #####: 6553:                      << g_cs->numTestCasesPassingFilters << "\n";
        -: 6554:
    #####: 6555:                } else if (opt.list_test_suites) {
    $$$$$: 6555-block  0
    $$$$$: 6555-block  1
branch  0 never executed
branch  1 never executed
    #####: 6556:                    s << Color::Cyan << "[doctest] " << Color::None << "listing all test suites\n";
    #####: 6557:                    separator_to_stream();
        -: 6558:
    #####: 6559:                    for (unsigned i = 0; i < in.num_data; ++i)
    $$$$$: 6559-block  0
    $$$$$: 6559-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6559-block  2
    #####: 6560:                        s << Color::None << in.data[i]->m_test_suite << "\n";
    $$$$$: 6560-block  0
        -: 6561:
    #####: 6562:                    separator_to_stream();
        -: 6563:
    #####: 6564:                    s << Color::Cyan << "[doctest] " << Color::None
    #####: 6565:                      << "unskipped test cases passing the current filters: "
    #####: 6566:                      << g_cs->numTestCasesPassingFilters << "\n";
    #####: 6567:                    s << Color::Cyan << "[doctest] " << Color::None
    #####: 6568:                      << "test suites with unskipped test cases passing the current filters: "
    #####: 6569:                      << g_cs->numTestSuitesPassingFilters << "\n";
    #####: 6570:                }
    $$$$$: 6570-block  0
    #####: 6571:            }
    $$$$$: 6571-block  0
        -: 6572:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter14test_run_startEv called 1 returned 100% blocks executed 100%
        1: 6573:            void test_run_start() override {
        1: 6574:                if (!opt.minimal)
        1: 6574-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6575:                    printIntro();
        1: 6575-block  0
        1: 6576:            }
        1: 6576-block  0
        -: 6577:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter12test_run_endERKNS_12TestRunStatsE called 1 returned 100% blocks executed 81%
        1: 6578:            void test_run_end(const TestRunStats &p) override {
        1: 6579:                if (opt.minimal && p.numTestCasesFailed == 0)
        1: 6579-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 6579-block  1
branch  2 never executed
branch  3 never executed
    #####: 6580:                    return;
    $$$$$: 6580-block  0
        -: 6581:
        1: 6582:                separator_to_stream();
        1: 6583:                s << std::dec;
        -: 6584:
        3: 6585:                auto totwidth = int(std::ceil(log10(static_cast<double>(std::max(p.numTestCasesPassingFilters,
        2: 6586:                                                                                 static_cast<unsigned>(p.numAsserts))) +
        -: 6587:                                                    1)));
        1: 6588:                auto passwidth = int(std::ceil(
        3: 6589:                        log10(static_cast<double>(std::max(p.numTestCasesPassingFilters - p.numTestCasesFailed,
        2: 6590:                                                           static_cast<unsigned>(p.numAsserts - p.numAssertsFailed))) +
        -: 6591:                              1)));
        3: 6592:                auto failwidth = int(std::ceil(log10(static_cast<double>(std::max(p.numTestCasesFailed,
        2: 6593:                                                                                  static_cast<unsigned>(p.numAssertsFailed))) +
        -: 6594:                                                     1)));
        1: 6595:                const bool anythingFailed = p.numTestCasesFailed > 0 || p.numAssertsFailed > 0;
        1: 6595-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6595-block  1
        1: 6596:                s << Color::Cyan << "[doctest] " << Color::None << "test cases: " << std::setw(totwidth)
        1: 6597:                  << p.numTestCasesPassingFilters << " | "
        1: 6598:                  << ((p.numTestCasesPassingFilters == 0 || anythingFailed) ? Color::None :
        1: 6598-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6598-block  1
        -: 6599:                      Color::Green)
        1: 6600:                  << std::setw(passwidth) << p.numTestCasesPassingFilters - p.numTestCasesFailed << " passed"
        1: 6601:                  << Color::None << " | " << (p.numTestCasesFailed > 0 ? Color::Red : Color::None)
        1: 6602:                  << std::setw(failwidth) << p.numTestCasesFailed << " failed" << Color::None << " |";
        1: 6603:                if (opt.no_skipped_summary == false) {
        1: 6603-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6604:                    const int numSkipped = p.numTestCases - p.numTestCasesPassingFilters;
        1: 6605:                    s << " " << (numSkipped == 0 ? Color::None : Color::Yellow) << numSkipped
        1: 6606:                      << " skipped" << Color::None;
        1: 6607:                }
        1: 6607-block  0
        1: 6608:                s << "\n";
        1: 6609:                s << Color::Cyan << "[doctest] " << Color::None << "assertions: " << std::setw(totwidth)
        1: 6610:                  << p.numAsserts << " | "
        1: 6611:                  << ((p.numAsserts == 0 || anythingFailed) ? Color::None : Color::Green)
        1: 6611-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6611-block  1
        1: 6612:                  << std::setw(passwidth) << (p.numAsserts - p.numAssertsFailed) << " passed" << Color::None
        1: 6613:                  << " | " << (p.numAssertsFailed > 0 ? Color::Red : Color::None) << std::setw(failwidth)
        1: 6614:                  << p.numAssertsFailed << " failed" << Color::None << " |\n";
        1: 6615:                s << Color::Cyan << "[doctest] " << Color::None
        1: 6616:                  << "Status: " << (p.numTestCasesFailed > 0 ? Color::Red : Color::Green)
        1: 6617:                  << ((p.numTestCasesFailed > 0) ? "FAILURE!" : "SUCCESS!") << Color::None << std::endl;
        1: 6617-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 6617-block  1
        1: 6617-block  2
        1: 6618:            }
        1: 6618-block  0
        1: 6618-block  1
        -: 6619:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter15test_case_startERKNS_12TestCaseDataE called 1 returned 100% blocks executed 100%
        1: 6620:            void test_case_start(const TestCaseData &in) override {
        1: 6621:                hasLoggedCurrentTestStart = false;
        1: 6622:                tc = &in;
        1: 6623:                subcasesStack.clear();
        1: 6624:                currentSubcaseLevel = 0;
        1: 6625:            }
        1: 6625-block  0
        -: 6626:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter17test_case_reenterERKNS_12TestCaseDataE called 7 returned 100% blocks executed 100%
        7: 6627:            void test_case_reenter(const TestCaseData &) override {
        7: 6628:                subcasesStack.clear();
        7: 6629:            }
        7: 6629-block  0
        -: 6630:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter13test_case_endERKNS_20CurrentTestCaseStatsE called 1 returned 100% blocks executed 60%
        1: 6631:            void test_case_end(const CurrentTestCaseStats &st) override {
        1: 6632:                if (tc->m_no_output)
        1: 6632-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 6633:                    return;
    $$$$$: 6633-block  0
        -: 6634:
        -: 6635:                // log the preamble of the test case only if there is something
        -: 6636:                // else to print - something other than that an assert has failed
        1: 6637:                if (opt.duration ||
        1: 6637-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 6637-block  1
branch  2 never executed
branch  3 never executed
        1: 6638:                    (st.failure_flags && st.failure_flags != static_cast<int>(TestCaseFailureReason::AssertFailure)))
        1: 6638-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 6639:                    logTestStart();
    $$$$$: 6639-block  0
        -: 6640:
        1: 6641:                if (opt.duration)
        1: 6641-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 6642:                    s << Color::None << std::setprecision(6) << std::fixed << st.seconds
    $$$$$: 6642-block  0
    $$$$$: 6642-block  1
    #####: 6643:                      << " s: " << tc->m_name << "\n";
        -: 6644:
        1: 6645:                if (st.failure_flags & TestCaseFailureReason::Timeout)
        1: 6645-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 6646:                    s << Color::Red << "Test case exceeded time limit of " << std::setprecision(6)
    $$$$$: 6646-block  0
    $$$$$: 6646-block  1
    #####: 6647:                      << std::fixed << tc->m_timeout << "!\n";
        -: 6648:
        1: 6649:                if (st.failure_flags & TestCaseFailureReason::ShouldHaveFailedButDidnt) {
        1: 6649-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 6650:                    s << Color::Red << "Should have failed but didn't! Marking it as failed!\n";
        1: 6651:                } else if (st.failure_flags & TestCaseFailureReason::ShouldHaveFailedAndDid) {
    $$$$$: 6651-block  0
        1: 6651-block  1
branch  0 taken 0
branch  1 taken 1
    #####: 6652:                    s << Color::Yellow << "Failed as expected so marking it as not failed\n";
        1: 6653:                } else if (st.failure_flags & TestCaseFailureReason::CouldHaveFailedAndDid) {
    $$$$$: 6653-block  0
        1: 6653-block  1
branch  0 taken 0
branch  1 taken 1
    #####: 6654:                    s << Color::Yellow << "Allowed to fail so marking it as not failed\n";
        1: 6655:                } else if (st.failure_flags & TestCaseFailureReason::DidntFailExactlyNumTimes) {
    $$$$$: 6655-block  0
        1: 6655-block  1
branch  0 taken 0
branch  1 taken 1
    #####: 6656:                    s << Color::Red << "Didn't fail exactly " << tc->m_expected_failures
    #####: 6657:                      << " times so marking it as failed!\n";
        1: 6658:                } else if (st.failure_flags & TestCaseFailureReason::FailedExactlyNumTimes) {
    $$$$$: 6658-block  0
        1: 6658-block  1
branch  0 taken 1
branch  1 taken 0
    #####: 6659:                    s << Color::Yellow << "Failed exactly " << tc->m_expected_failures
    #####: 6660:                      << " times as expected so marking it as not failed!\n";
    #####: 6661:                }
    $$$$$: 6661-block  0
        1: 6662:                if (st.failure_flags & TestCaseFailureReason::TooManyFailedAsserts) {
        1: 6662-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 6663:                    s << Color::Red << "Aborting - too many failed asserts!\n";
    #####: 6664:                }
    $$$$$: 6664-block  0
        1: 6665:                s << Color::None; // lgtm [cpp/useless-expression]
        1: 6666:            }
        1: 6666-block  0
        1: 6666-block  1
        -: 6667:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter19test_case_exceptionERKNS_17TestCaseExceptionE called 0 returned 0% blocks executed 0%
    #####: 6668:            void test_case_exception(const TestCaseException &e) override {
    #####: 6669:                DOCTEST_LOCK_MUTEX(mutex)
    #####: 6670:                if (tc->m_no_output)
    $$$$$: 6670-block  0
branch  0 never executed
branch  1 never executed
    #####: 6671:                    return;
    $$$$$: 6671-block  0
        -: 6672:
    #####: 6673:                logTestStart();
    $$$$$: 6673-block  0
branch  0 never executed
branch  1 never executed
        -: 6674:
    #####: 6675:                file_line_to_stream(tc->m_file.c_str(), tc->m_line, " ");
    $$$$$: 6675-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6675-block  1
branch  2 never executed
branch  3 never executed
    #####: 6676:                successOrFailColoredStringToStream(false, e.is_crash ? assertType::is_require :
    $$$$$: 6676-block  0
branch  0 never executed
branch  1 never executed
        -: 6677:                                                          assertType::is_check);
    #####: 6678:                s << Color::Red << (e.is_crash ? "test case CRASHED: " : "test case THREW exception: ")
    $$$$$: 6678-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6678-block  1
branch  2 never executed
branch  3 never executed
    #####: 6679:                  << Color::Cyan << e.error_string << "\n";
    $$$$$: 6679-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6679-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6679-block  2
branch  4 never executed
branch  5 never executed
        -: 6680:
    #####: 6681:                int num_stringified_contexts = get_num_stringified_contexts();
    #####: 6682:                if (num_stringified_contexts) {
    $$$$$: 6682-block  0
branch  0 never executed
branch  1 never executed
    #####: 6683:                    auto stringified_contexts = get_stringified_contexts();
    #####: 6684:                    s << Color::None << "  logged: ";
    $$$$$: 6684-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6684-block  1
branch  2 never executed
branch  3 never executed
    #####: 6685:                    for (int i = num_stringified_contexts; i > 0; --i) {
    $$$$$: 6685-block  0
    $$$$$: 6685-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6685-block  2
    #####: 6686:                        s << (i == num_stringified_contexts ? "" : "          ")
    $$$$$: 6686-block  0
branch  0 never executed
branch  1 never executed
    #####: 6687:                          << stringified_contexts[i - 1] << "\n";
    $$$$$: 6687-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6687-block  1
branch  2 never executed
branch  3 never executed
    #####: 6688:                    }
    $$$$$: 6688-block  0
    #####: 6689:                }
    $$$$$: 6689-block  0
    #####: 6690:                s << "\n" << Color::None;
    $$$$$: 6690-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6690-block  1
branch  2 never executed
branch  3 never executed
    #####: 6691:            }
    $$$$$: 6691-block  0
    $$$$$: 6691-block  1
    $$$$$: 6691-block  2
branch  0 never executed
branch  1 never executed
    $$$$$: 6691-block  3
    $$$$$: 6691-block  4
        -: 6692:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter13subcase_startERKNS_16SubcaseSignatureE called 8 returned 100% blocks executed 100%
        8: 6693:            void subcase_start(const SubcaseSignature &subc) override {
        8: 6694:                subcasesStack.push_back(subc);
        8: 6695:                ++currentSubcaseLevel;
        8: 6696:                hasLoggedCurrentTestStart = false;
        8: 6697:            }
        8: 6697-block  0
        -: 6698:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter11subcase_endEv called 8 returned 100% blocks executed 100%
        8: 6699:            void subcase_end() override {
        8: 6700:                --currentSubcaseLevel;
        8: 6701:                hasLoggedCurrentTestStart = false;
        8: 6702:            }
        8: 6702-block  0
        -: 6703:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter10log_assertERKNS_10AssertDataE called 23 returned 100% blocks executed 35%
       23: 6704:            void log_assert(const AssertData &rb) override {
       23: 6705:                if ((!rb.m_failed && !opt.success) || tc->m_no_output)
       23: 6705-block  0
branch  0 taken 23
branch  1 taken 0
       23: 6705-block  1
    $$$$$: 6705-block  2
       23: 6705-block  3
branch  2 taken 23
branch  3 taken 0
       23: 6706:                    return;
       23: 6706-block  0
        -: 6707:
    #####: 6708:                DOCTEST_LOCK_MUTEX(mutex)
        -: 6709:
    #####: 6710:                logTestStart();
    $$$$$: 6710-block  0
branch  0 never executed
branch  1 never executed
        -: 6711:
    #####: 6712:                file_line_to_stream(rb.m_file, rb.m_line, " ");
    $$$$$: 6712-block  0
branch  0 never executed
branch  1 never executed
    #####: 6713:                successOrFailColoredStringToStream(!rb.m_failed, rb.m_at);
    $$$$$: 6713-block  0
branch  0 never executed
branch  1 never executed
        -: 6714:
    #####: 6715:                fulltext_log_assert_to_stream(s, rb);
    $$$$$: 6715-block  0
branch  0 never executed
branch  1 never executed
        -: 6716:
    #####: 6717:                log_contexts();
    $$$$$: 6717-block  0
branch  0 never executed
branch  1 never executed
       23: 6718:            }
    $$$$$: 6718-block  0
       23: 6718-block  1
    $$$$$: 6718-block  2
    $$$$$: 6718-block  3
        -: 6719:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter11log_messageERKNS_11MessageDataE called 0 returned 0% blocks executed 0%
    #####: 6720:            void log_message(const MessageData &mb) override {
    #####: 6721:                if (tc->m_no_output)
    $$$$$: 6721-block  0
branch  0 never executed
branch  1 never executed
    #####: 6722:                    return;
    $$$$$: 6722-block  0
        -: 6723:
    #####: 6724:                DOCTEST_LOCK_MUTEX(mutex)
        -: 6725:
    #####: 6726:                logTestStart();
    $$$$$: 6726-block  0
branch  0 never executed
branch  1 never executed
        -: 6727:
    #####: 6728:                file_line_to_stream(mb.m_file, mb.m_line, " ");
    $$$$$: 6728-block  0
branch  0 never executed
branch  1 never executed
    #####: 6729:                s << getSuccessOrFailColor(false, mb.m_severity)
    $$$$$: 6729-block  0
branch  0 never executed
branch  1 never executed
    #####: 6730:                  << getSuccessOrFailString(mb.m_severity & assertType::is_warn, mb.m_severity,
    $$$$$: 6730-block  0
branch  0 never executed
branch  1 never executed
    #####: 6731:                                            "MESSAGE") << ": ";
    $$$$$: 6731-block  0
branch  0 never executed
branch  1 never executed
    #####: 6732:                s << Color::None << mb.m_string << "\n";
    $$$$$: 6732-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6732-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6732-block  2
branch  4 never executed
branch  5 never executed
    #####: 6733:                log_contexts();
    $$$$$: 6733-block  0
branch  0 never executed
branch  1 never executed
    #####: 6734:            }
    $$$$$: 6734-block  0
    $$$$$: 6734-block  1
    $$$$$: 6734-block  2
    $$$$$: 6734-block  3
        -: 6735:
function _ZN7doctest12_GLOBAL__N_115ConsoleReporter17test_case_skippedERKNS_12TestCaseDataE called 0 returned 0% blocks executed 0%
    #####: 6736:            void test_case_skipped(const TestCaseData &) override {}
    $$$$$: 6736-block  0
        -: 6737:        };
        -: 6738:
        -: 6739:        DOCTEST_REGISTER_REPORTER("console", 0, ConsoleReporter);
        -: 6740:
        -: 6741:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 6742:                                                                                                                                struct DebugOutputWindowReporter : public ConsoleReporter
        -: 6743:    {
        -: 6744:        DOCTEST_THREAD_LOCAL static std::ostringstream oss;
        -: 6745:
        -: 6746:        DebugOutputWindowReporter(const ContextOptions& co)
        -: 6747:                : ConsoleReporter(co, oss) {}
        -: 6748:
        -: 6749:#define DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func, type, arg)                                    \
        -: 6750:    void func(type arg) override {                                                                 \
        -: 6751:        bool with_col = g_no_colors;                                                               \
        -: 6752:        g_no_colors   = false;                                                                     \
        -: 6753:        ConsoleReporter::func(arg);                                                                \
        -: 6754:        if(oss.tellp() != std::streampos{}) {                                                      \
        -: 6755:            DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());                                        \
        -: 6756:            oss.str("");                                                                           \
        -: 6757:        }                                                                                          \
        -: 6758:        g_no_colors = with_col;                                                                    \
        -: 6759:    }
        -: 6760:
        -: 6761:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start, DOCTEST_EMPTY, DOCTEST_EMPTY)
        -: 6762:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end, const TestRunStats&, in)
        -: 6763:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start, const TestCaseData&, in)
        -: 6764:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter, const TestCaseData&, in)
        -: 6765:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end, const CurrentTestCaseStats&, in)
        -: 6766:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception, const TestCaseException&, in)
        -: 6767:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start, const SubcaseSignature&, in)
        -: 6768:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end, DOCTEST_EMPTY, DOCTEST_EMPTY)
        -: 6769:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert, const AssertData&, in)
        -: 6770:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message, const MessageData&, in)
        -: 6771:        DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped, const TestCaseData&, in)
        -: 6772:    };
        -: 6773:
        -: 6774:    DOCTEST_THREAD_LOCAL std::ostringstream DebugOutputWindowReporter::oss;
        -: 6775:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 6776:
        -: 6777:        // the implementation of parseOption()
function _ZN7doctest12_GLOBAL__N_115parseOptionImplEiPKPKcS2_PNS_6StringE called 258 returned 100% blocks executed 39%
      258: 6778:        bool parseOptionImpl(int argc, const char *const *argv, const char *pattern, String *value) {
        -: 6779:            // going from the end to the beginning and stopping on the first occurrence from the end
      516: 6780:            for (int i = argc; i > 0; --i) {
      258: 6780-block  0
      516: 6780-block  1
branch  0 taken 258
branch  1 taken 258
      258: 6780-block  2
      258: 6781:                auto index = i - 1;
      258: 6782:                auto temp = std::strstr(argv[index], pattern);
      258: 6783:                if (temp && (value || strlen(temp) == strlen(pattern))) { //!OCLINT prefer early exits and continue
      258: 6783-block  0
branch  0 taken 9
branch  1 taken 249
        9: 6783-block  1
branch  2 taken 9
branch  3 taken 0
        9: 6783-block  2
branch  4 taken 0
branch  5 taken 9
        -: 6784:                    // eliminate matches in which the chars before the option are not '-'
    #####: 6785:                    bool noBadCharsFound = true;
    #####: 6786:                    auto curr = argv[index];
    #####: 6787:                    while (curr != temp) {
    $$$$$: 6787-block  0
    $$$$$: 6787-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6787-block  2
    #####: 6788:                        if (*curr++ != '-') {
    $$$$$: 6788-block  0
branch  0 never executed
branch  1 never executed
    #####: 6789:                            noBadCharsFound = false;
    #####: 6790:                            break;
    $$$$$: 6790-block  0
        -: 6791:                        }
        -: 6792:                    }
    #####: 6793:                    if (noBadCharsFound && argv[index][0] == '-') {
    $$$$$: 6793-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6793-block  1
branch  2 never executed
branch  3 never executed
    #####: 6794:                        if (value) {
    $$$$$: 6794-block  0
branch  0 never executed
branch  1 never executed
        -: 6795:                            // parsing the value of an option
    #####: 6796:                            temp += strlen(pattern);
    #####: 6797:                            const unsigned len = strlen(temp);
    #####: 6798:                            if (len) {
    $$$$$: 6798-block  0
branch  0 never executed
branch  1 never executed
    #####: 6799:                                *value = temp;
    #####: 6800:                                return true;
    $$$$$: 6800-block  0
        -: 6801:                            }
    #####: 6802:                        } else {
    $$$$$: 6802-block  0
        -: 6803:                            // just a flag - no value
    #####: 6804:                            return true;
    $$$$$: 6804-block  0
        -: 6805:                        }
    #####: 6806:                    }
    $$$$$: 6806-block  0
    #####: 6807:                }
    $$$$$: 6807-block  0
      258: 6808:            }
      258: 6808-block  0
      258: 6809:            return false;
      258: 6809-block  0
      258: 6810:        }
      258: 6810-block  0
        -: 6811:
        -: 6812:        // parses an option and returns the string after the '=' character
function _ZN7doctest12_GLOBAL__N_111parseOptionEiPKPKcS2_PNS_6StringERKS5_ called 129 returned 100% blocks executed 83%
      129: 6813:        bool parseOption(int argc, const char *const *argv, const char *pattern, String *value = nullptr,
        -: 6814:                         const String &defaultVal = String()) {
      129: 6815:            if (value)
      129: 6815-block  0
branch  0 taken 55
branch  1 taken 74
       74: 6816:                *value = defaultVal;
       74: 6816-block  0
        -: 6817:#ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS
        -: 6818:            // offset (normally 3 for "dt-") to skip prefix
      129: 6819:            if (parseOptionImpl(argc, argv, pattern + strlen(DOCTEST_CONFIG_OPTIONS_PREFIX), value))
      129: 6819-block  0
branch  0 taken 0
branch  1 taken 129
    #####: 6820:                return true;
    $$$$$: 6820-block  0
        -: 6821:#endif // DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS
      129: 6822:            return parseOptionImpl(argc, argv, pattern, value);
      129: 6822-block  0
      129: 6823:        }
      129: 6823-block  0
        -: 6824:
        -: 6825:        // locates a flag on the command line
function _ZN7doctest12_GLOBAL__N_19parseFlagEiPKPKcS2_ called 55 returned 100% blocks executed 50%
       55: 6826:        bool parseFlag(int argc, const char *const *argv, const char *pattern) {
       55: 6827:            return parseOption(argc, argv, pattern);
       55: 6827-block  0
branch  0 taken 55
branch  1 taken 0
       55: 6827-block  1
    $$$$$: 6827-block  2
    $$$$$: 6827-block  3
    #####: 6828:        }
        -: 6829:
        -: 6830:        // parses a comma separated list of words after a pattern in one of the arguments in argv
function _ZN7doctest12_GLOBAL__N_117parseCommaSepArgsEiPKPKcS2_RNSt3__16vectorINS_6StringENS5_9allocatorIS7_EEEE called 18 returned 100% blocks executed 11%
       18: 6831:        bool parseCommaSepArgs(int argc, const char *const *argv, const char *pattern,
        -: 6832:                               std::vector<String> &res) {
       18: 6833:            String filtersString;
       18: 6834:            if (parseOption(argc, argv, pattern, &filtersString)) {
       18: 6834-block  0
branch  0 taken 18
branch  1 taken 0
       18: 6834-block  1
branch  2 taken 0
branch  3 taken 18
    $$$$$: 6834-block  2
        -: 6835:                // tokenize with "," as a separator, unless escaped with backslash
    #####: 6836:                std::ostringstream s;
    $$$$$: 6836-block  0
branch  0 never executed
branch  1 never executed
function _ZZN7doctest12_GLOBAL__N_117parseCommaSepArgsEiPKPKcS2_RNSt3__16vectorINS_6StringENS5_9allocatorIS7_EEEEENK3$_2clEv called 0 returned 0% blocks executed 0%
    #####: 6837:                auto flush = [&s, &res]() {
    #####: 6838:                    auto string = s.str();
    #####: 6839:                    if (string.size() > 0) {
    $$$$$: 6839-block  0
branch  0 never executed
branch  1 never executed
    #####: 6840:                        res.push_back(string.c_str());
    $$$$$: 6840-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6840-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6840-block  2
    #####: 6841:                    }
    $$$$$: 6841-block  0
    #####: 6842:                    s.str("");
    $$$$$: 6842-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6842-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 6842-block  2
    #####: 6843:                };
    $$$$$: 6843-block  0
    $$$$$: 6843-block  1
    $$$$$: 6843-block  2
    $$$$$: 6843-block  3
        -: 6844:
    #####: 6845:                bool seenBackslash = false;
    #####: 6846:                const char *current = filtersString.c_str();
    #####: 6847:                const char *end = current + strlen(current);
    $$$$$: 6847-block  0
branch  0 never executed
branch  1 never executed
    #####: 6848:                while (current != end) {
    $$$$$: 6848-block  0
    $$$$$: 6848-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6848-block  2
    #####: 6849:                    char character = *current++;
    #####: 6850:                    if (seenBackslash) {
    $$$$$: 6850-block  0
branch  0 never executed
branch  1 never executed
    #####: 6851:                        seenBackslash = false;
    #####: 6852:                        if (character == ',' || character == '\\') {
    $$$$$: 6852-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6852-block  1
branch  2 never executed
branch  3 never executed
    #####: 6853:                            s.put(character);
    $$$$$: 6853-block  0
branch  0 never executed
branch  1 never executed
    #####: 6854:                            continue;
    $$$$$: 6854-block  0
        -: 6855:                        }
    #####: 6856:                        s.put('\\');
    $$$$$: 6856-block  0
branch  0 never executed
branch  1 never executed
    #####: 6857:                    }
    $$$$$: 6857-block  0
    #####: 6858:                    if (character == '\\') {
    $$$$$: 6858-block  0
branch  0 never executed
branch  1 never executed
    #####: 6859:                        seenBackslash = true;
    #####: 6860:                    } else if (character == ',') {
    $$$$$: 6860-block  0
    $$$$$: 6860-block  1
branch  0 never executed
branch  1 never executed
    #####: 6861:                        flush();
    $$$$$: 6861-block  0
branch  0 never executed
branch  1 never executed
    #####: 6862:                    } else {
    $$$$$: 6862-block  0
    #####: 6863:                        s.put(character);
    $$$$$: 6863-block  0
branch  0 never executed
branch  1 never executed
        -: 6864:                    }
        -: 6865:                }
        -: 6866:
    #####: 6867:                if (seenBackslash) {
    $$$$$: 6867-block  0
branch  0 never executed
branch  1 never executed
    #####: 6868:                    s.put('\\');
    $$$$$: 6868-block  0
branch  0 never executed
branch  1 never executed
    #####: 6869:                }
    $$$$$: 6869-block  0
    #####: 6870:                flush();
    $$$$$: 6870-block  0
branch  0 never executed
branch  1 never executed
    #####: 6871:                return true;
    #####: 6872:            }
    $$$$$: 6872-block  0
    $$$$$: 6872-block  1
       18: 6873:            return false;
       18: 6873-block  0
       18: 6874:        }
    $$$$$: 6874-block  0
       18: 6874-block  1
    $$$$$: 6874-block  2
    $$$$$: 6874-block  3
        -: 6875:
        -: 6876:        enum optionType {
        -: 6877:            option_bool,
        -: 6878:            option_int
        -: 6879:        };
        -: 6880:
        -: 6881:        // parses an int/bool option from the command line
function _ZN7doctest12_GLOBAL__N_114parseIntOptionEiPKPKcS2_NS0_10optionTypeERi called 52 returned 100% blocks executed 16%
       52: 6882:        bool parseIntOption(int argc, const char *const *argv, const char *pattern, optionType type,
        -: 6883:                            int &res) {
       52: 6884:            String parsedValue;
       52: 6885:            if (!parseOption(argc, argv, pattern, &parsedValue))
       52: 6885-block  0
branch  0 taken 52
branch  1 taken 0
       52: 6885-block  1
branch  2 taken 52
branch  3 taken 0
    $$$$$: 6885-block  2
       52: 6886:                return false;
       52: 6886-block  0
        -: 6887:
    #####: 6888:            if (type) {
    $$$$$: 6888-block  0
branch  0 never executed
branch  1 never executed
        -: 6889:                // integer
        -: 6890:                // TODO: change this to use std::stoi or something else! currently it uses undefined behavior - assumes '0' on failed parse...
    #####: 6891:                int theInt = std::atoi(parsedValue.c_str());
    $$$$$: 6891-block  0
branch  0 never executed
branch  1 never executed
    #####: 6892:                if (theInt != 0) {
    $$$$$: 6892-block  0
branch  0 never executed
branch  1 never executed
    #####: 6893:                    res = theInt; //!OCLINT parameter reassignment
    #####: 6894:                    return true;
    $$$$$: 6894-block  0
        -: 6895:                }
    #####: 6896:            } else {
    $$$$$: 6896-block  0
        -: 6897:                // boolean
    #####: 6898:                const char positive[][5] = {"1", "true", "on", "yes"};  // 5 - strlen("true") + 1
    #####: 6899:                const char negative[][6] = {"0", "false", "off", "no"}; // 6 - strlen("false") + 1
        -: 6900:
        -: 6901:                // if the value matches any of the positive/negative possibilities
    #####: 6902:                for (unsigned i = 0; i < 4; i++) {
    $$$$$: 6902-block  0
    $$$$$: 6902-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 6902-block  2
    #####: 6903:                    if (parsedValue.compare(positive[i], true) == 0) {
    $$$$$: 6903-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6903-block  1
branch  2 never executed
branch  3 never executed
    #####: 6904:                        res = 1; //!OCLINT parameter reassignment
    #####: 6905:                        return true;
    $$$$$: 6905-block  0
        -: 6906:                    }
    #####: 6907:                    if (parsedValue.compare(negative[i], true) == 0) {
    $$$$$: 6907-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 6907-block  1
branch  2 never executed
branch  3 never executed
    #####: 6908:                        res = 0; //!OCLINT parameter reassignment
    #####: 6909:                        return true;
    $$$$$: 6909-block  0
        -: 6910:                    }
    #####: 6911:                }
    $$$$$: 6911-block  0
        -: 6912:            }
    #####: 6913:            return false;
    $$$$$: 6913-block  0
       52: 6914:        }
    $$$$$: 6914-block  0
       52: 6914-block  1
    $$$$$: 6914-block  2
    $$$$$: 6914-block  3
        -: 6915:    } // namespace
        -: 6916:
function _ZN7doctest7ContextC2EiPKPKc called 1 returned 100% blocks executed 66%
function _ZN7doctest7ContextC1EiPKPKc called 1 returned 100% blocks executed 100%
        2: 6917:    Context::Context(int argc, const char *const *argv)
        2: 6918:            : p(new detail::ContextState) {
        1: 6918-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$: 6918-block  1
    $$$$$: 6918-block  2
        1: 6919:        parseArgs(argc, argv, true);
        1: 6920:        if (argc)
        1: 6920-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6921:            p->binary_name = argv[0];
        1: 6921-block  0
        2: 6922:    }
        1: 6922-block  0
        1: 6922-block  1
        -: 6923:
function _ZN7doctest7ContextD2Ev called 1 returned 100% blocks executed 80%
function _ZN7doctest7ContextD1Ev called 1 returned 100% blocks executed 100%
        2: 6924:    Context::~Context() {
        1: 6925:        if (g_cs == p)
        1: 6925-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 6926:            g_cs = nullptr;
    $$$$$: 6926-block  0
        1: 6927:        delete p;
        1: 6927-block  0
branch  0 taken 0
branch  1 taken 1
        1: 6927-block  1
        2: 6928:    }
        1: 6928-block  0
        1: 6928-block  1
        -: 6929:
function _ZN7doctest7Context16applyCommandLineEiPKPKc called 0 returned 0% blocks executed 0%
    #####: 6930:    void Context::applyCommandLine(int argc, const char *const *argv) {
    #####: 6931:        parseArgs(argc, argv);
    #####: 6932:        if (argc)
    $$$$$: 6932-block  0
branch  0 never executed
branch  1 never executed
    #####: 6933:            p->binary_name = argv[0];
    $$$$$: 6933-block  0
    #####: 6934:    }
    $$$$$: 6934-block  0
        -: 6935:
        -: 6936:// parses args
function _ZN7doctest7Context9parseArgsEiPKPKcb called 1 returned 100% blocks executed 83%
        1: 6937:    void Context::parseArgs(int argc, const char *const *argv, bool withDefaults) {
        -: 6938:        using namespace detail;
        -: 6939:
        -: 6940:        // clang-format off
        1: 6941:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "source-file=", p->filters[0]);
        1: 6942:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "sf=", p->filters[0]);
        1: 6943:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "source-file-exclude=", p->filters[1]);
        1: 6944:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "sfe=", p->filters[1]);
        1: 6945:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "test-suite=", p->filters[2]);
        1: 6946:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "ts=", p->filters[2]);
        1: 6947:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "test-suite-exclude=", p->filters[3]);
        1: 6948:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "tse=", p->filters[3]);
        1: 6949:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "test-case=", p->filters[4]);
        1: 6950:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "tc=", p->filters[4]);
        1: 6951:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "test-case-exclude=", p->filters[5]);
        1: 6952:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "tce=", p->filters[5]);
        1: 6953:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "subcase=", p->filters[6]);
        1: 6954:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "sc=", p->filters[6]);
        1: 6955:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "subcase-exclude=", p->filters[7]);
        1: 6956:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "sce=", p->filters[7]);
        1: 6957:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "reporters=", p->filters[8]);
        1: 6958:        parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "r=", p->filters[8]);
        -: 6959:        // clang-format on
        -: 6960:
        1: 6961:        int intRes = 0;
        1: 6962:        String strRes;
        -: 6963:
        -: 6964:#define DOCTEST_PARSE_AS_BOOL_OR_FLAG(name, sname, var, default)                                   \
        -: 6965:    if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_bool, intRes) ||  \
        -: 6966:       parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_bool, intRes))   \
        -: 6967:        p->var = static_cast<bool>(intRes);                                                        \
        -: 6968:    else if(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name) ||                           \
        -: 6969:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname))                            \
        -: 6970:        p->var = true;                                                                             \
        -: 6971:    else if(withDefaults)                                                                          \
        -: 6972:    p->var = default
        -: 6973:
        -: 6974:#define DOCTEST_PARSE_INT_OPTION(name, sname, var, default)                                        \
        -: 6975:    if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_int, intRes) ||   \
        -: 6976:       parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_int, intRes))    \
        -: 6977:        p->var = intRes;                                                                           \
        -: 6978:    else if(withDefaults)                                                                          \
        -: 6979:    p->var = default
        -: 6980:
        -: 6981:#define DOCTEST_PARSE_STR_OPTION(name, sname, var, default)                                        \
        -: 6982:    if(parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", &strRes, default) ||        \
        -: 6983:       parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", &strRes, default) ||       \
        -: 6984:       withDefaults)                                                                               \
        -: 6985:    p->var = strRes
        -: 6986:
        -: 6987:        // clang-format off
        1: 6988:        DOCTEST_PARSE_STR_OPTION("out", "o", out, "");
        1: 6988-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6988-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6988-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6988-block  3
branch  6 taken 1
branch  7 taken 0
        1: 6988-block  4
branch  8 taken 1
branch  9 taken 0
        1: 6988-block  5
branch 10 taken 0
branch 11 taken 1
        1: 6988-block  6
        1: 6988-block  7
branch 12 taken 0
branch 13 taken 1
        1: 6988-block  8
        1: 6988-block  9
branch 14 taken 1
branch 15 taken 0
        1: 6988-block 10
branch 16 taken 1
branch 17 taken 0
        1: 6988-block 11
    $$$$$: 6988-block 12
branch 18 never executed
branch 19 never executed
    $$$$$: 6988-block 13
    $$$$$: 6988-block 14
    $$$$$: 6988-block 15
        1: 6989:        DOCTEST_PARSE_STR_OPTION("order-by", "ob", order_by, "file");
        1: 6989-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6989-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6989-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6989-block  3
branch  6 taken 1
branch  7 taken 0
        1: 6989-block  4
branch  8 taken 1
branch  9 taken 0
        1: 6989-block  5
branch 10 taken 0
branch 11 taken 1
        1: 6989-block  6
        1: 6989-block  7
branch 12 taken 0
branch 13 taken 1
        1: 6989-block  8
        1: 6989-block  9
branch 14 taken 1
branch 15 taken 0
        1: 6989-block 10
branch 16 taken 1
branch 17 taken 0
        1: 6989-block 11
    $$$$$: 6989-block 12
branch 18 never executed
branch 19 never executed
    $$$$$: 6989-block 13
    $$$$$: 6989-block 14
    $$$$$: 6989-block 15
        1: 6990:        DOCTEST_PARSE_INT_OPTION("rand-seed", "rs", rand_seed, 0);
        1: 6990-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6990-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6990-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6990-block  3
branch  6 taken 0
branch  7 taken 1
    $$$$$: 6990-block  4
        1: 6990-block  5
branch  8 taken 0
branch  9 taken 1
        1: 6990-block  6
        -: 6991:
        1: 6992:        DOCTEST_PARSE_INT_OPTION("first", "f", first, 0);
        1: 6992-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6992-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6992-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6992-block  3
branch  6 taken 0
branch  7 taken 1
    $$$$$: 6992-block  4
        1: 6992-block  5
branch  8 taken 0
branch  9 taken 1
        1: 6992-block  6
        1: 6993:        DOCTEST_PARSE_INT_OPTION("last", "l", last, UINT_MAX);
        1: 6993-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6993-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6993-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6993-block  3
branch  6 taken 0
branch  7 taken 1
    $$$$$: 6993-block  4
        1: 6993-block  5
branch  8 taken 0
branch  9 taken 1
        1: 6993-block  6
        -: 6994:
        1: 6995:        DOCTEST_PARSE_INT_OPTION("abort-after", "aa", abort_after, 0);
        1: 6995-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6995-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6995-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6995-block  3
branch  6 taken 0
branch  7 taken 1
    $$$$$: 6995-block  4
        1: 6995-block  5
branch  8 taken 0
branch  9 taken 1
        1: 6995-block  6
        1: 6996:        DOCTEST_PARSE_INT_OPTION("subcase-filter-levels", "scfl", subcase_filter_levels, INT_MAX);
        1: 6996-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6996-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6996-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6996-block  3
branch  6 taken 0
branch  7 taken 1
    $$$$$: 6996-block  4
        1: 6996-block  5
branch  8 taken 0
branch  9 taken 1
        1: 6996-block  6
        -: 6997:
        1: 6998:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("success", "s", success, false);
        1: 6998-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6998-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6998-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6998-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 6998-block  4
        1: 6998-block  5
branch  8 taken 1
branch  9 taken 0
        1: 6998-block  6
branch 10 taken 1
branch 11 taken 0
        1: 6998-block  7
branch 12 taken 1
branch 13 taken 0
        1: 6998-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 6998-block  9
        1: 6998-block 10
branch 16 taken 0
branch 17 taken 1
        1: 6998-block 11
        1: 6999:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("case-sensitive", "cs", case_sensitive, false);
        1: 6999-block  0
branch  0 taken 1
branch  1 taken 0
        1: 6999-block  1
branch  2 taken 1
branch  3 taken 0
        1: 6999-block  2
branch  4 taken 1
branch  5 taken 0
        1: 6999-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 6999-block  4
        1: 6999-block  5
branch  8 taken 1
branch  9 taken 0
        1: 6999-block  6
branch 10 taken 1
branch 11 taken 0
        1: 6999-block  7
branch 12 taken 1
branch 13 taken 0
        1: 6999-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 6999-block  9
        1: 6999-block 10
branch 16 taken 0
branch 17 taken 1
        1: 6999-block 11
        1: 7000:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("exit", "e", exit, false);
        1: 7000-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7000-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7000-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7000-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7000-block  4
        1: 7000-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7000-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7000-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7000-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7000-block  9
        1: 7000-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7000-block 11
        1: 7001:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("duration", "d", duration, false);
        1: 7001-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7001-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7001-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7001-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7001-block  4
        1: 7001-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7001-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7001-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7001-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7001-block  9
        1: 7001-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7001-block 11
        1: 7002:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("minimal", "m", minimal, false);
        1: 7002-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7002-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7002-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7002-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7002-block  4
        1: 7002-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7002-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7002-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7002-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7002-block  9
        1: 7002-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7002-block 11
        1: 7003:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("quiet", "q", quiet, false);
        1: 7003-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7003-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7003-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7003-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7003-block  4
        1: 7003-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7003-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7003-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7003-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7003-block  9
        1: 7003-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7003-block 11
        1: 7004:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-throw", "nt", no_throw, false);
        1: 7004-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7004-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7004-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7004-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7004-block  4
        1: 7004-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7004-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7004-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7004-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7004-block  9
        1: 7004-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7004-block 11
        1: 7005:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-exitcode", "ne", no_exitcode, false);
        1: 7005-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7005-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7005-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7005-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7005-block  4
        1: 7005-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7005-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7005-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7005-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7005-block  9
        1: 7005-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7005-block 11
        1: 7006:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-run", "nr", no_run, false);
        1: 7006-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7006-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7006-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7006-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7006-block  4
        1: 7006-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7006-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7006-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7006-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7006-block  9
        1: 7006-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7006-block 11
        1: 7007:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-intro", "ni", no_intro, false);
        1: 7007-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7007-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7007-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7007-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7007-block  4
        1: 7007-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7007-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7007-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7007-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7007-block  9
        1: 7007-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7007-block 11
        1: 7008:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-version", "nv", no_version, false);
        1: 7008-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7008-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7008-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7008-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7008-block  4
        1: 7008-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7008-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7008-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7008-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7008-block  9
        1: 7008-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7008-block 11
        1: 7009:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-colors", "nc", no_colors, false);
        1: 7009-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7009-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7009-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7009-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7009-block  4
        1: 7009-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7009-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7009-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7009-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7009-block  9
        1: 7009-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7009-block 11
        1: 7010:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("force-colors", "fc", force_colors, false);
        1: 7010-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7010-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7010-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7010-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7010-block  4
        1: 7010-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7010-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7010-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7010-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7010-block  9
        1: 7010-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7010-block 11
        1: 7011:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-breaks", "nb", no_breaks, false);
        1: 7011-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7011-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7011-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7011-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7011-block  4
        1: 7011-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7011-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7011-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7011-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7011-block  9
        1: 7011-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7011-block 11
        1: 7012:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-skip", "ns", no_skip, false);
        1: 7012-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7012-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7012-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7012-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7012-block  4
        1: 7012-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7012-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7012-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7012-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7012-block  9
        1: 7012-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7012-block 11
        1: 7013:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("gnu-file-line", "gfl", gnu_file_line, !bool(DOCTEST_MSVC));
        1: 7013-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7013-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7013-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7013-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7013-block  4
        1: 7013-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7013-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7013-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7013-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7013-block  9
        1: 7013-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7013-block 11
        1: 7014:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-path-filenames", "npf", no_path_in_filenames, false);
        1: 7014-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7014-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7014-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7014-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7014-block  4
        1: 7014-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7014-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7014-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7014-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7014-block  9
        1: 7014-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7014-block 11
        1: 7015:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-line-numbers", "nln", no_line_numbers, false);
        1: 7015-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7015-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7015-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7015-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7015-block  4
        1: 7015-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7015-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7015-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7015-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7015-block  9
        1: 7015-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7015-block 11
        1: 7016:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-debug-output", "ndo", no_debug_output, false);
        1: 7016-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7016-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7016-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7016-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7016-block  4
        1: 7016-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7016-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7016-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7016-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7016-block  9
        1: 7016-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7016-block 11
        1: 7017:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-skipped-summary", "nss", no_skipped_summary, false);
        1: 7017-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7017-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7017-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7017-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7017-block  4
        1: 7017-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7017-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7017-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7017-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7017-block  9
        1: 7017-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7017-block 11
        1: 7018:        DOCTEST_PARSE_AS_BOOL_OR_FLAG("no-time-in-output", "ntio", no_time_in_output, false);
        1: 7018-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7018-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7018-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7018-block  3
branch  6 taken 1
branch  7 taken 0
    $$$$$: 7018-block  4
        1: 7018-block  5
branch  8 taken 1
branch  9 taken 0
        1: 7018-block  6
branch 10 taken 1
branch 11 taken 0
        1: 7018-block  7
branch 12 taken 1
branch 13 taken 0
        1: 7018-block  8
branch 14 taken 0
branch 15 taken 1
    $$$$$: 7018-block  9
        1: 7018-block 10
branch 16 taken 0
branch 17 taken 1
        1: 7018-block 11
        -: 7019:        // clang-format on
        -: 7020:
        1: 7021:        if (withDefaults) {
        1: 7021-block  0
branch  0 taken 0
branch  1 taken 1
        1: 7022:            p->help = false;
        1: 7023:            p->version = false;
        1: 7024:            p->count = false;
        1: 7025:            p->list_test_cases = false;
        1: 7026:            p->list_test_suites = false;
        1: 7027:            p->list_reporters = false;
        1: 7028:        }
        1: 7028-block  0
        2: 7029:        if (parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "help") ||
        1: 7029-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7029-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7029-block  2
branch  4 taken 0
branch  5 taken 1
        1: 7030:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "h") ||
        1: 7030-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7030-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7031:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "?")) {
        1: 7031-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7032:            p->help = true;
    #####: 7033:            p->exit = true;
    #####: 7034:        }
    $$$$$: 7034-block  0
        2: 7035:        if (parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "version") ||
        1: 7035-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7035-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7035-block  2
branch  4 taken 0
branch  5 taken 1
        1: 7036:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "v")) {
        1: 7036-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7037:            p->version = true;
    #####: 7038:            p->exit = true;
    #####: 7039:        }
    $$$$$: 7039-block  0
        2: 7040:        if (parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "count") ||
        1: 7040-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7040-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7040-block  2
branch  4 taken 0
branch  5 taken 1
        1: 7041:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "c")) {
        1: 7041-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7042:            p->count = true;
    #####: 7043:            p->exit = true;
    #####: 7044:        }
    $$$$$: 7044-block  0
        2: 7045:        if (parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "list-test-cases") ||
        1: 7045-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7045-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7045-block  2
branch  4 taken 0
branch  5 taken 1
        1: 7046:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "ltc")) {
        1: 7046-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7047:            p->list_test_cases = true;
    #####: 7048:            p->exit = true;
    #####: 7049:        }
    $$$$$: 7049-block  0
        2: 7050:        if (parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "list-test-suites") ||
        1: 7050-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7050-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7050-block  2
branch  4 taken 0
branch  5 taken 1
        1: 7051:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "lts")) {
        1: 7051-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7052:            p->list_test_suites = true;
    #####: 7053:            p->exit = true;
    #####: 7054:        }
    $$$$$: 7054-block  0
        2: 7055:        if (parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "list-reporters") ||
        1: 7055-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7055-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7055-block  2
branch  4 taken 0
branch  5 taken 1
        1: 7056:            parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX "lr")) {
        1: 7056-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7057:            p->list_reporters = true;
    #####: 7058:            p->exit = true;
    #####: 7059:        }
    $$$$$: 7059-block  0
        1: 7060:    }
    $$$$$: 7060-block  0
    $$$$$: 7060-block  1
    $$$$$: 7060-block  2
        1: 7060-block  3
    $$$$$: 7060-block  4
    $$$$$: 7060-block  5
        -: 7061:
        -: 7062:// allows the user to add procedurally to the filters from the command line
function _ZN7doctest7Context9addFilterEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 7063:    void Context::addFilter(const char *filter, const char *value) { setOption(filter, value); }
    $$$$$: 7063-block  0
        -: 7064:
        -: 7065:// allows the user to clear all filters from the command line
function _ZN7doctest7Context12clearFiltersEv called 0 returned 0% blocks executed 0%
    #####: 7066:    void Context::clearFilters() {
    #####: 7067:        for (auto &curr: p->filters)
    $$$$$: 7067-block  0
    $$$$$: 7067-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7067-block  2
    $$$$$: 7067-block  3
    $$$$$: 7067-block  4
    #####: 7068:            curr.clear();
    #####: 7069:    }
    $$$$$: 7069-block  0
        -: 7070:
        -: 7071:// allows the user to override procedurally the bool options from the command line
function _ZN7doctest7Context9setOptionEPKcb called 0 returned 0% blocks executed 0%
    #####: 7072:    void Context::setOption(const char *option, bool value) {
    #####: 7073:        setOption(option, value ? "true" : "false");
    #####: 7074:    }
    $$$$$: 7074-block  0
        -: 7075:
        -: 7076:// allows the user to override procedurally the int options from the command line
function _ZN7doctest7Context9setOptionEPKci called 0 returned 0% blocks executed 0%
    #####: 7077:    void Context::setOption(const char *option, int value) {
    #####: 7078:        setOption(option, toString(value).c_str());
    $$$$$: 7078-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7078-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 7078-block  2
    $$$$$: 7078-block  3
    #####: 7079:    }
    $$$$$: 7079-block  0
        -: 7080:
        -: 7081:// allows the user to override procedurally the string options from the command line
function _ZN7doctest7Context9setOptionEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 7082:    void Context::setOption(const char *option, const char *value) {
    #####: 7083:        auto argv = String("-") + option + "=" + value;
    $$$$$: 7083-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7083-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 7083-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 7083-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 7083-block  4
branch  8 never executed
branch  9 never executed
    $$$$$: 7083-block  5
branch 10 never executed
branch 11 never executed
    $$$$$: 7083-block  6
    $$$$$: 7083-block  7
    $$$$$: 7083-block  8
    $$$$$: 7083-block  9
    $$$$$: 7083-block 10
    $$$$$: 7083-block 11
    $$$$$: 7083-block 12
    #####: 7084:        auto lvalue = argv.c_str();
    $$$$$: 7084-block  0
branch  0 never executed
branch  1 never executed
    #####: 7085:        parseArgs(1, &lvalue);
    $$$$$: 7085-block  0
branch  0 never executed
branch  1 never executed
    #####: 7086:    }
    $$$$$: 7086-block  0
    $$$$$: 7086-block  1
    $$$$$: 7086-block  2
    $$$$$: 7086-block  3
    $$$$$: 7086-block  4
    $$$$$: 7086-block  5
    $$$$$: 7086-block  6
        -: 7087:
        -: 7088:// users should query this in their main() and exit the program if true
function _ZN7doctest7Context10shouldExitEv called 0 returned 0% blocks executed 0%
    #####: 7089:    bool Context::shouldExit() { return p->exit; }
    $$$$$: 7089-block  0
        -: 7090:
function _ZN7doctest7Context36setAsDefaultForAssertsOutOfTestCasesEv called 0 returned 0% blocks executed 0%
    #####: 7091:    void Context::setAsDefaultForAssertsOutOfTestCases() { g_cs = p; }
    $$$$$: 7091-block  0
        -: 7092:
function _ZN7doctest7Context16setAssertHandlerEPFvRKNS_10AssertDataEE called 0 returned 0% blocks executed 0%
    #####: 7093:    void Context::setAssertHandler(detail::assert_handler ah) { p->ah = ah; }
    $$$$$: 7093-block  0
        -: 7094:
function _ZN7doctest7Context7setCoutEPNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE called 0 returned 0% blocks executed 0%
    #####: 7095:    void Context::setCout(std::ostream *out) { p->cout = out; }
    $$$$$: 7095-block  0
        -: 7096:
function _ZN7doctest14DiscardOStreamD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest14DiscardOStreamD0Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest14DiscardOStreamD2Ev called 0 returned 0% blocks executed 0%
        -: 7097:    static class DiscardOStream : public std::ostream {
        -: 7098:    private:
function _ZN7doctest14DiscardOStreamUt_C1Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest14DiscardOStreamUt_C2Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest14DiscardOStreamUt_D1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest14DiscardOStreamUt_D0Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest14DiscardOStreamUt_D2Ev called 0 returned 0% blocks executed 0%
        -: 7099:        class : public std::streambuf {
        -: 7100:        private:
        -: 7101:            // allowing some buffering decreases the amount of calls to overflow
        -: 7102:            char buf[1024];
        -: 7103:
        -: 7104:        protected:
function _ZN7doctest14DiscardOStreamUt_6xsputnEPKcl called 0 returned 0% blocks executed 0%
    #####: 7105:            std::streamsize xsputn(const char_type *, std::streamsize count) override { return count; }
    $$$$$: 7105-block  0
        -: 7106:
function _ZN7doctest14DiscardOStreamUt_8overflowEi called 0 returned 0% blocks executed 0%
    #####: 7107:            int_type overflow(int_type ch) override {
    #####: 7108:                setp(std::begin(buf), std::end(buf));
    #####: 7109:                return traits_type::not_eof(ch);
    $$$$$: 7109-block  0
        -: 7110:            }
        -: 7111:        } discardBuf;
        -: 7112:
        -: 7113:    public:
function _ZN7doctest14DiscardOStreamC1Ev called 1 returned 100% blocks executed 42%
        2: 7114:        DiscardOStream()
        1: 7114-block  0
branch  0 taken 0
branch  1 taken 1
        2: 7115:                : std::ostream(&discardBuf) {}
        1: 7115-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7115-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7115-block  2
    $$$$$: 7115-block  3
    $$$$$: 7115-block  4
    $$$$$: 7115-block  5
    $$$$$: 7115-block  6
        -: 7116:    } discardOut;
        -: 7117:
        -: 7118:// the main function that does all the filtering and test running
function _ZN7doctest7Context3runEv called 1 returned 100% blocks executed 52%
        1: 7119:    int Context::run() {
        -: 7120:        using namespace detail;
        -: 7121:
        -: 7122:        // save the old context state in case such was setup - for using asserts out of a testing context
        1: 7123:        auto old_cs = g_cs;
        -: 7124:        // this is the current contest
        1: 7125:        g_cs = p;
        1: 7126:        is_running_in_test = true;
        -: 7127:
        1: 7128:        g_no_colors = p->no_colors;
        1: 7129:        p->resetRunData();
        -: 7130:
        1: 7131:        std::fstream fstr;
        1: 7132:        if (p->cout == nullptr) {
        1: 7132-block  0
branch  0 taken 0
branch  1 taken 1
        1: 7133:            if (p->quiet) {
        1: 7133-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 7134:                p->cout = &discardOut;
        1: 7135:            } else if (p->out.size()) {
    $$$$$: 7135-block  0
        1: 7135-block  1
branch  0 taken 0
branch  1 taken 1
        -: 7136:                // to a file if specified
    #####: 7137:                fstr.open(p->out.c_str(), std::fstream::out);
    $$$$$: 7137-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7137-block  1
branch  2 never executed
branch  3 never executed
    #####: 7138:                p->cout = &fstr;
    $$$$$: 7138-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7138-block  1
    #####: 7139:            } else {
    $$$$$: 7139-block  0
        -: 7140:#ifndef DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 7141:                // stdout by default
        1: 7142:                p->cout = &std::cout;
        1: 7142-block  0
        -: 7143:#else // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 7144:                return EXIT_FAILURE;
        -: 7145:#endif // DOCTEST_CONFIG_NO_INCLUDE_IOSTREAM
        -: 7146:            }
        1: 7147:        }
        1: 7147-block  0
        -: 7148:
        1: 7149:        FatalConditionHandler::allocateAltStackMem();
        1: 7149-block  0
branch  0 taken 1
branch  1 taken 0
        -: 7150:
function _ZZN7doctest7Context3runEvENK3$_1clEv called 1 returned 100% blocks executed 76%
        2: 7151:        auto cleanup_and_return = [&]() {
        1: 7152:            FatalConditionHandler::freeAltStackMem();
        -: 7153:
        1: 7154:            if (fstr.is_open())
        1: 7154-block  0
branch  0 taken 1
branch  1 taken 0
    #####: 7155:                fstr.close();
    $$$$$: 7155-block  0
        -: 7156:
        -: 7157:            // restore context
        1: 7158:            g_cs = old_cs;
        1: 7159:            is_running_in_test = false;
        -: 7160:
        -: 7161:            // we have to free the reporters which were allocated when the run started
        2: 7162:            for (auto &curr: p->reporters_currently_used)
        1: 7162-block  0
        2: 7162-block  1
branch  0 taken 1
branch  1 taken 1
        1: 7162-block  2
        1: 7162-block  3
        1: 7163:                delete curr;
        1: 7163-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7163-block  1
        1: 7164:            p->reporters_currently_used.clear();
        -: 7165:
        1: 7166:            if (p->numTestCasesFailed && !p->no_exitcode)
        1: 7166-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 7166-block  1
branch  2 never executed
branch  3 never executed
    #####: 7167:                return EXIT_FAILURE;
    $$$$$: 7167-block  0
        1: 7168:            return EXIT_SUCCESS;
        1: 7168-block  0
        1: 7169:        };
        1: 7169-block  0
        -: 7170:
        -: 7171:        // setup default reporter if none is given through the command line
        1: 7172:        if (p->filters[8].empty())
        1: 7172-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7173:            p->filters[8].push_back("console");
        1: 7173-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7173-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7173-block  2
    $$$$$: 7173-block  3
        -: 7174:
        -: 7175:        // check to see if any of the registered reporters has been selected
        4: 7176:        for (auto &curr: getReporters()) {
        1: 7176-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7176-block  1
        4: 7176-block  2
branch  2 taken 4
branch  3 taken 0
        4: 7176-block  3
branch  4 taken 3
branch  5 taken 1
        3: 7176-block  4
branch  6 taken 3
branch  7 taken 0
        3: 7176-block  5
        3: 7176-block  6
branch  8 taken 3
branch  9 taken 0
        3: 7176-block  7
        3: 7177:            if (matchesAny(curr.first.second.c_str(), p->filters[8], false, p->case_sensitive))
        3: 7177-block  0
branch  0 taken 3
branch  1 taken 0
        3: 7177-block  1
branch  2 taken 3
branch  3 taken 0
        3: 7177-block  2
branch  4 taken 1
branch  5 taken 2
        1: 7178:                p->reporters_currently_used.push_back(curr.second(*g_cs));
        1: 7178-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7178-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7178-block  2
        -: 7179:        }
        -: 7180:
        -: 7181:        // TODO: check if there is nothing in reporters_currently_used
        -: 7182:
        -: 7183:        // prepend all listeners
        1: 7184:        for (auto &curr: getListeners())
        1: 7184-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7184-block  1
        1: 7184-block  2
branch  2 taken 1
branch  3 taken 0
        1: 7184-block  3
branch  4 taken 0
branch  5 taken 1
    $$$$$: 7184-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 7184-block  5
    $$$$$: 7184-block  6
branch  8 never executed
branch  9 never executed
    $$$$$: 7184-block  7
    #####: 7185:            p->reporters_currently_used.insert(p->reporters_currently_used.begin(), curr.second(*g_cs));
    $$$$$: 7185-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7185-block  1
branch  2 never executed
branch  3 never executed
        -: 7186:
        -: 7187:#ifdef DOCTEST_PLATFORM_WINDOWS
        -: 7188:                                                                                                                                if(isDebuggerActive() && p->no_debug_output == false)
        -: 7189:        p->reporters_currently_used.push_back(new DebugOutputWindowReporter(*g_cs));
        -: 7190:#endif // DOCTEST_PLATFORM_WINDOWS
        -: 7191:
        -: 7192:        // handle version, help and no_run
        1: 7193:        if (p->no_run || p->version || p->help || p->list_reporters) {
        1: 7193-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7193-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7193-block  2
branch  4 taken 1
branch  5 taken 0
        1: 7193-block  3
branch  6 taken 0
branch  7 taken 1
    #####: 7194:            DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, QueryData());
    $$$$$: 7194-block  0
    $$$$$: 7194-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7194-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 7194-block  3
    $$$$$: 7194-block  4
        -: 7195:
    #####: 7196:            return cleanup_and_return();
    $$$$$: 7196-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7196-block  1
        -: 7197:        }
        -: 7198:
        1: 7199:        std::vector<const TestCase *> testArray;
        2: 7200:        for (auto &curr: getRegisteredTests())
        1: 7200-block  0
        2: 7200-block  1
branch  0 taken 2
branch  1 taken 0
        2: 7200-block  2
branch  2 taken 1
branch  3 taken 1
        1: 7200-block  3
branch  4 taken 1
branch  5 taken 0
        1: 7200-block  4
        1: 7200-block  5
branch  6 taken 1
branch  7 taken 0
        1: 7200-block  6
        1: 7201:            testArray.push_back(&curr);
        1: 7201-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7202:        p->numTestCases = testArray.size();
        -: 7203:
        -: 7204:        // sort the collected records
        1: 7205:        if (!testArray.empty()) {
        1: 7205-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7206:            if (p->order_by.compare("file", true) == 0) {
        1: 7206-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7206-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7207:                std::sort(testArray.begin(), testArray.end(), fileOrderComparator);
        1: 7207-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7208:            } else if (p->order_by.compare("suite", true) == 0) {
        1: 7208-block  0
    $$$$$: 7208-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7208-block  2
branch  2 never executed
branch  3 never executed
    #####: 7209:                std::sort(testArray.begin(), testArray.end(), suiteOrderComparator);
    $$$$$: 7209-block  0
branch  0 never executed
branch  1 never executed
    #####: 7210:            } else if (p->order_by.compare("name", true) == 0) {
    $$$$$: 7210-block  0
    $$$$$: 7210-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7210-block  2
branch  2 never executed
branch  3 never executed
    #####: 7211:                std::sort(testArray.begin(), testArray.end(), nameOrderComparator);
    $$$$$: 7211-block  0
branch  0 never executed
branch  1 never executed
    #####: 7212:            } else if (p->order_by.compare("rand", true) == 0) {
    $$$$$: 7212-block  0
    $$$$$: 7212-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7212-block  2
branch  2 never executed
branch  3 never executed
    #####: 7213:                std::srand(p->rand_seed);
    $$$$$: 7213-block  0
branch  0 never executed
branch  1 never executed
        -: 7214:
        -: 7215:                // random_shuffle implementation
    #####: 7216:                const auto first = &testArray[0];
    #####: 7217:                for (size_t i = testArray.size() - 1; i > 0; --i) {
    $$$$$: 7217-block  0
    $$$$$: 7217-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7217-block  2
    #####: 7218:                    int idxToSwap = std::rand() % (i + 1);
    $$$$$: 7218-block  0
branch  0 never executed
branch  1 never executed
        -: 7219:
    #####: 7220:                    const auto temp = first[i];
        -: 7221:
    #####: 7222:                    first[i] = first[idxToSwap];
    #####: 7223:                    first[idxToSwap] = temp;
    #####: 7224:                }
    $$$$$: 7224-block  0
    #####: 7225:            } else if (p->order_by.compare("none", true) == 0) {
    $$$$$: 7225-block  0
    $$$$$: 7225-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7225-block  2
branch  2 never executed
branch  3 never executed
        -: 7226:                // means no sorting - beneficial for death tests which call into the executable
        -: 7227:                // with a specific test case in mind - we don't want to slow down the startup times
    #####: 7228:            }
    $$$$$: 7228-block  0
        1: 7229:        }
        1: 7229-block  0
        -: 7230:
        1: 7231:        std::set < String > testSuitesPassingFilt;
        -: 7232:
        1: 7233:        bool query_mode = p->count || p->list_test_cases || p->list_test_suites;
        1: 7233-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7233-block  1
branch  2 taken 0
branch  3 taken 1
        1: 7233-block  2
        1: 7234:        std::vector<const TestCaseData *> queryResults;
        -: 7235:
        1: 7236:        if (!query_mode)
        1: 7236-block  0
branch  0 taken 0
branch  1 taken 1
        2: 7237:            DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start, DOCTEST_EMPTY);
        1: 7237-block  0
        2: 7237-block  1
branch  0 taken 1
branch  1 taken 1
        1: 7237-block  2
branch  2 taken 1
branch  3 taken 0
        1: 7237-block  3
        1: 7237-block  4
        1: 7237-block  5
        -: 7238:
        -: 7239:        // invoke the registered functions if they match the filter criteria (or just count them)
        2: 7240:        for (auto &curr: testArray) {
        1: 7240-block  0
        2: 7240-block  1
branch  0 taken 1
branch  1 taken 1
        1: 7240-block  2
        1: 7240-block  3
        1: 7241:            const auto &tc = *curr;
        -: 7242:
        1: 7243:            bool skip_me = false;
        1: 7244:            if (tc.m_skip && !p->no_skip)
        1: 7244-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 7244-block  1
branch  2 never executed
branch  3 never executed
    #####: 7245:                skip_me = true;
    $$$$$: 7245-block  0
        -: 7246:
        1: 7247:            if (!matchesAny(tc.m_file.c_str(), p->filters[0], true, p->case_sensitive))
        1: 7247-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7247-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7247-block  2
branch  4 taken 1
branch  5 taken 0
    #####: 7248:                skip_me = true;
    $$$$$: 7248-block  0
        1: 7249:            if (matchesAny(tc.m_file.c_str(), p->filters[1], false, p->case_sensitive))
        1: 7249-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7249-block  1
branch  2 taken 1
branch  3 taken 0
        1: 7249-block  2
branch  4 taken 1
branch  5 taken 0
    #####: 7250:                skip_me = true;
    $$$$$: 7250-block  0
        1: 7251:            if (!matchesAny(tc.m_test_suite, p->filters[2], true, p->case_sensitive))
        1: 7251-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7251-block  1
branch  2 taken 1
branch  3 taken 0
    #####: 7252:                skip_me = true;
    $$$$$: 7252-block  0
        1: 7253:            if (matchesAny(tc.m_test_suite, p->filters[3], false, p->case_sensitive))
        1: 7253-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7253-block  1
branch  2 taken 1
branch  3 taken 0
    #####: 7254:                skip_me = true;
    $$$$$: 7254-block  0
        1: 7255:            if (!matchesAny(tc.m_name, p->filters[4], true, p->case_sensitive))
        1: 7255-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7255-block  1
branch  2 taken 1
branch  3 taken 0
    #####: 7256:                skip_me = true;
    $$$$$: 7256-block  0
        1: 7257:            if (matchesAny(tc.m_name, p->filters[5], false, p->case_sensitive))
        1: 7257-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7257-block  1
branch  2 taken 1
branch  3 taken 0
    #####: 7258:                skip_me = true;
    $$$$$: 7258-block  0
        -: 7259:
        1: 7260:            if (!skip_me)
        1: 7260-block  0
branch  0 taken 0
branch  1 taken 1
        1: 7261:                p->numTestCasesPassingFilters++;
        1: 7261-block  0
        -: 7262:
        -: 7263:            // skip the test if it is not in the execution range
        1: 7264:            if ((p->last < p->numTestCasesPassingFilters && p->first <= p->last) ||
        1: 7264-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 7264-block  1
branch  2 never executed
branch  3 never executed
        1: 7264-block  2
    $$$$$: 7264-block  3
        1: 7265:                (p->first > p->numTestCasesPassingFilters))
    #####: 7266:                skip_me = true;
    $$$$$: 7266-block  0
        -: 7267:
        1: 7268:            if (skip_me) {
        1: 7268-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 7269:                if (!query_mode)
    $$$$$: 7269-block  0
branch  0 never executed
branch  1 never executed
    #####: 7270:                    DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped, tc);
    $$$$$: 7270-block  0
    $$$$$: 7270-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7270-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 7270-block  3
    $$$$$: 7270-block  4
    $$$$$: 7270-block  5
    #####: 7271:                continue;
    $$$$$: 7271-block  0
        -: 7272:            }
        -: 7273:
        -: 7274:            // do not execute the test if we are to only count the number of filter passing tests
        1: 7275:            if (p->count)
        1: 7275-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 7276:                continue;
    $$$$$: 7276-block  0
        -: 7277:
        -: 7278:            // print the name of the test and don't execute it
        1: 7279:            if (p->list_test_cases) {
        1: 7279-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 7280:                queryResults.push_back(&tc);
    $$$$$: 7280-block  0
branch  0 never executed
branch  1 never executed
    #####: 7281:                continue;
    $$$$$: 7281-block  0
        -: 7282:            }
        -: 7283:
        -: 7284:            // print the name of the test suite if not done already and don't execute it
        1: 7285:            if (p->list_test_suites) {
        1: 7285-block  0
branch  0 taken 0
branch  1 taken 1
    #####: 7286:                if ((testSuitesPassingFilt.count(tc.m_test_suite) == 0) && tc.m_test_suite[0] != '\0') {
    $$$$$: 7286-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7286-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 7286-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 7286-block  3
    $$$$$: 7286-block  4
branch  6 never executed
branch  7 never executed
    $$$$$: 7286-block  5
    #####: 7287:                    queryResults.push_back(&tc);
    $$$$$: 7287-block  0
branch  0 never executed
branch  1 never executed
    #####: 7288:                    testSuitesPassingFilt.insert(tc.m_test_suite);
    $$$$$: 7288-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7288-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 7288-block  2
    #####: 7289:                    p->numTestSuitesPassingFilters++;
    #####: 7290:                }
    $$$$$: 7290-block  0
    #####: 7291:                continue;
    $$$$$: 7291-block  0
        -: 7292:            }
        -: 7293:
        -: 7294:            // execute the test if it passes all the filtering
        -: 7295:            {
        1: 7296:                p->currentTest = &tc;
        -: 7297:
        1: 7298:                p->failure_flags = TestCaseFailureReason::None;
        1: 7299:                p->seconds = 0;
        -: 7300:
        -: 7301:                // reset atomic counters
        1: 7302:                p->numAssertsFailedCurrentTest_atomic = 0;
        1: 7303:                p->numAssertsCurrentTest_atomic = 0;
        -: 7304:
        1: 7305:                p->fullyTraversedSubcases.clear();
        -: 7306:
        2: 7307:                DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start, tc);
        1: 7307-block  0
        2: 7307-block  1
branch  0 taken 1
branch  1 taken 1
        1: 7307-block  2
branch  2 taken 1
branch  3 taken 0
        1: 7307-block  3
        1: 7307-block  4
        -: 7308:
        1: 7309:                p->timer.start();
        1: 7309-block  0
branch  0 taken 1
branch  1 taken 0
        -: 7310:
        1: 7311:                bool run_test = true;
        -: 7312:
        1: 7313:                do {
        1: 7313-block  0
        -: 7314:                    // reset some of the fields for subcases (except for the set of fully passed ones)
        8: 7315:                    p->reachedLeaf = false;
        -: 7316:                    // May not be empty if previous subcase exited via exception.
        8: 7317:                    p->subcaseStack.clear();
        8: 7318:                    p->currentSubcaseDepth = 0;
        -: 7319:
        8: 7320:                    p->shouldLogCurrentException = true;
        -: 7321:
        -: 7322:                    // reset stuff for logging with INFO()
        8: 7323:                    p->stringifiedContexts.clear();
        -: 7324:
        -: 7325:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 7326:                    try {
        -: 7327:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 7328:// MSVC 2015 diagnoses fatalConditionHandler as unused (because reset() is a static method)
        -: 7329:                        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4101) // unreferenced local variable
        8: 7330:                        FatalConditionHandler fatalConditionHandler; // Handle signals
        8: 7330-block  0
branch  0 taken 8
branch  1 taken 0
        -: 7331:                        // execute the test
        8: 7332:                        tc.m_test();
        8: 7332-block  0
branch  0 taken 8
branch  1 taken 0
        8: 7333:                        fatalConditionHandler.reset();
        8: 7333-block  0
branch  0 taken 8
branch  1 taken 0
        -: 7334:                        DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 7335:#ifndef DOCTEST_CONFIG_NO_EXCEPTIONS
        8: 7336:                    } catch (const TestFailureException &) {
        8: 7336-block  0
    $$$$$: 7336-block  1
    $$$$$: 7336-block  2
branch  0 never executed
branch  1 never executed
    #####: 7337:                        p->failure_flags |= TestCaseFailureReason::AssertFailure;
    #####: 7338:                    } catch (...) {
    $$$$$: 7338-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7338-block  1
    #####: 7339:                        DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,
    $$$$$: 7339-block  0
    $$$$$: 7339-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7339-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 7339-block  3
branch  4 never executed
branch  5 never executed
    $$$$$: 7339-block  4
    $$$$$: 7339-block  5
    $$$$$: 7339-block  6
        -: 7340:                                                          { translateActiveException(), false });
    #####: 7341:                        p->failure_flags |= TestCaseFailureReason::Exception;
    #####: 7342:                    }
    $$$$$: 7342-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7342-block  1
    $$$$$: 7342-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 7342-block  3
    $$$$$: 7342-block  4
        -: 7343:#endif // DOCTEST_CONFIG_NO_EXCEPTIONS
        -: 7344:
        -: 7345:                    // exit this loop if enough assertions have failed - even if there are more subcases
        8: 7346:                    if (p->abort_after > 0 &&
        8: 7346-block  0
branch  0 taken 0
branch  1 taken 8
    $$$$$: 7346-block  1
branch  2 never executed
branch  3 never executed
    #####: 7347:                        p->numAssertsFailed + p->numAssertsFailedCurrentTest_atomic >= p->abort_after) {
    #####: 7348:                        run_test = false;
    #####: 7349:                        p->failure_flags |= TestCaseFailureReason::TooManyFailedAsserts;
    #####: 7350:                    }
    $$$$$: 7350-block  0
        -: 7351:
        8: 7352:                    if (!p->nextSubcaseStack.empty() && run_test)
        8: 7352-block  0
branch  0 taken 7
branch  1 taken 1
        7: 7352-block  1
branch  2 taken 0
branch  3 taken 7
       14: 7353:                        DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter, tc);
        7: 7353-block  0
       14: 7353-block  1
branch  0 taken 7
branch  1 taken 7
        7: 7353-block  2
branch  2 taken 7
branch  3 taken 0
        7: 7353-block  3
        7: 7353-block  4
        7: 7353-block  5
        8: 7354:                    if (p->nextSubcaseStack.empty())
        8: 7354-block  0
branch  0 taken 7
branch  1 taken 1
        1: 7355:                        run_test = false;
        1: 7355-block  0
        8: 7356:                } while (run_test);
        8: 7356-block  0
        8: 7356-block  1
branch  0 taken 1
branch  1 taken 7
        -: 7357:
        1: 7358:                p->finalizeTestCaseData();
        1: 7358-block  0
branch  0 taken 1
branch  1 taken 0
        -: 7359:
        2: 7360:                DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);
        1: 7360-block  0
        2: 7360-block  1
branch  0 taken 1
branch  1 taken 1
        1: 7360-block  2
branch  2 taken 1
branch  3 taken 0
        1: 7360-block  3
        1: 7360-block  4
        -: 7361:
        1: 7362:                p->currentTest = nullptr;
        -: 7363:
        -: 7364:                // stop executing tests if enough assertions have failed
        1: 7365:                if (p->abort_after > 0 && p->numAssertsFailed >= p->abort_after)
        1: 7365-block  0
branch  0 taken 0
branch  1 taken 1
    $$$$$: 7365-block  1
branch  2 never executed
branch  3 never executed
    #####: 7366:                    break;
    $$$$$: 7366-block  0
        -: 7367:            }
        -: 7368:        }
        -: 7369:
        1: 7370:        if (!query_mode) {
        1: 7370-block  0
branch  0 taken 0
branch  1 taken 1
        2: 7371:            DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);
        1: 7371-block  0
        2: 7371-block  1
branch  0 taken 1
branch  1 taken 1
        1: 7371-block  2
branch  2 taken 1
branch  3 taken 0
        1: 7371-block  3
        1: 7371-block  4
        1: 7372:        } else {
        1: 7372-block  0
    #####: 7373:            QueryData qdata;
    #####: 7374:            qdata.run_stats = g_cs;
    $$$$$: 7374-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7374-block  1
    #####: 7375:            qdata.data = queryResults.data();
    #####: 7376:            qdata.num_data = unsigned(queryResults.size());
    #####: 7377:            DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, qdata);
    $$$$$: 7377-block  0
    $$$$$: 7377-block  1
branch  0 never executed
branch  1 never executed
    $$$$$: 7377-block  2
branch  2 never executed
branch  3 never executed
    $$$$$: 7377-block  3
    $$$$$: 7377-block  4
        -: 7378:        }
        -: 7379:
        1: 7380:        return cleanup_and_return();
        1: 7380-block  0
branch  0 taken 1
branch  1 taken 0
        1: 7381:    }
    $$$$$: 7381-block  0
    $$$$$: 7381-block  1
    $$$$$: 7381-block  2
    $$$$$: 7381-block  3
    $$$$$: 7381-block  4
        1: 7381-block  5
    $$$$$: 7381-block  6
    $$$$$: 7381-block  7
        1: 7381-block  8
    $$$$$: 7381-block  9
    $$$$$: 7381-block 10
        -: 7382:
function _ZN7doctest9IReporterD2Ev called 1 returned 100% blocks executed 100%
function _ZN7doctest9IReporterD1Ev called 0 returned 0% blocks executed 0%
function _ZN7doctest9IReporterD0Ev called 0 returned 0% blocks executed 0%
        1: 7383:    DOCTEST_DEFINE_INTERFACE(IReporter)
        1: 7383-block  0
    $$$$$: 7383-block  1
    $$$$$: 7383-block  2
        -: 7384:
function _ZN7doctest9IReporter23get_num_active_contextsEv called 0 returned 0% blocks executed 0%
    #####: 7385:    int IReporter::get_num_active_contexts() { return detail::g_infoContexts.size(); }
    $$$$$: 7385-block  0
        -: 7386:
function _ZN7doctest9IReporter19get_active_contextsEv called 0 returned 0% blocks executed 0%
    #####: 7387:    const IContextScope *const *IReporter::get_active_contexts() {
    #####: 7388:        return get_num_active_contexts() ? &detail::g_infoContexts[0] : nullptr;
    $$$$$: 7388-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7388-block  1
    $$$$$: 7388-block  2
    $$$$$: 7388-block  3
        -: 7389:    }
        -: 7390:
function _ZN7doctest9IReporter28get_num_stringified_contextsEv called 0 returned 0% blocks executed 0%
    #####: 7391:    int IReporter::get_num_stringified_contexts() { return detail::g_cs->stringifiedContexts.size(); }
    $$$$$: 7391-block  0
        -: 7392:
function _ZN7doctest9IReporter24get_stringified_contextsEv called 0 returned 0% blocks executed 0%
    #####: 7393:    const String *IReporter::get_stringified_contexts() {
    #####: 7394:        return get_num_stringified_contexts() ? &detail::g_cs->stringifiedContexts[0] : nullptr;
    $$$$$: 7394-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7394-block  1
    $$$$$: 7394-block  2
    $$$$$: 7394-block  3
        -: 7395:    }
        -: 7396:
        -: 7397:    namespace detail {
function _ZN7doctest6detail20registerReporterImplEPKciPFPNS_9IReporterERKNS_14ContextOptionsEEb called 3 returned 100% blocks executed 44%
        3: 7398:        void registerReporterImpl(const char *name, int priority, reporterCreatorFunc c, bool isReporter) {
        3: 7399:            if (isReporter)
        3: 7399-block  0
branch  0 taken 0
branch  1 taken 3
        3: 7400:                getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));
        3: 7400-block  0
branch  0 taken 3
branch  1 taken 0
        3: 7400-block  1
    $$$$$: 7400-block  2
    $$$$$: 7400-block  3
        -: 7401:            else
    #####: 7402:                getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));
    $$$$$: 7402-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 7402-block  1
    $$$$$: 7402-block  2
        3: 7403:        }
        3: 7403-block  0
        -: 7404:    } // namespace detail
        -: 7405:
        -: 7406:} // namespace doctest
        -: 7407:
        -: 7408:#endif // DOCTEST_CONFIG_DISABLE
        -: 7409:
        -: 7410:#ifdef DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
        -: 7411:                                                                                                                        DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007) // 'function' : must be 'attribute' - see issue #182
        -: 7412:int main(int argc, char** argv) { return doctest::Context(argc, argv).run(); }
        -: 7413:DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 7414:#endif // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
        -: 7415:
        -: 7416:DOCTEST_CLANG_SUPPRESS_WARNING_POP
        -: 7417:DOCTEST_MSVC_SUPPRESS_WARNING_POP
        -: 7418:DOCTEST_GCC_SUPPRESS_WARNING_POP
        -: 7419:
        -: 7420:DOCTEST_SUPPRESS_COMMON_WARNINGS_POP
        -: 7421:
        -: 7422:#endif // DOCTEST_LIBRARY_IMPLEMENTATION
        -: 7423:#endif // DOCTEST_CONFIG_IMPLEMENT
        -: 7424:
        -: 7425:#ifdef DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN
        -: 7426:                                                                                                                        #undef WIN32_LEAN_AND_MEAN
        -: 7427:#undef DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN
        -: 7428:#endif // DOCTEST_UNDEF_WIN32_LEAN_AND_MEAN
        -: 7429:
        -: 7430:#ifdef DOCTEST_UNDEF_NOMINMAX
        -: 7431:                                                                                                                        #undef NOMINMAX
        -: 7432:#undef DOCTEST_UNDEF_NOMINMAX
        -: 7433:#endif // DOCTEST_UNDEF_NOMINMAX
