        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX13.3.sdk/usr/include/c++/v1/__memory/allocator.h
        -:    0:Graph:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/TerminalProgramTest.dir/UnitTesting/TerminalProgramTest.cpp.gcno
        -:    0:Data:/Users/mihaildobroslavski/CLionProjects/CityMapProject/cmake-build-debug-coverage/CMakeFiles/TerminalProgramTest.dir/UnitTesting/TerminalProgramTest.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_ALLOCATOR_H
        -:   11:#define _LIBCPP___MEMORY_ALLOCATOR_H
        -:   12:
        -:   13:#include <__config>
        -:   14:#include <__memory/allocate_at_least.h>
        -:   15:#include <__memory/allocator_traits.h>
        -:   16:#include <__utility/forward.h>
        -:   17:#include <cstddef>
        -:   18:#include <new>
        -:   19:#include <stdexcept>
        -:   20:#include <type_traits>
        -:   21:
        -:   22:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   23:#  pragma GCC system_header
        -:   24:#endif
        -:   25:
        -:   26:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   27:
        -:   28:template <class _Tp> class allocator;
        -:   29:
        -:   30:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_VOID_SPECIALIZATION)
        -:   31:// These specializations shouldn't be marked _LIBCPP_DEPRECATED_IN_CXX17.
        -:   32:// Specializing allocator<void> is deprecated, but not using it.
        -:   33:template <>
        -:   34:class _LIBCPP_TEMPLATE_VIS allocator<void>
        -:   35:{
        -:   36:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:   37:public:
        -:   38:    _LIBCPP_DEPRECATED_IN_CXX17 typedef void*             pointer;
        -:   39:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;
        -:   40:    _LIBCPP_DEPRECATED_IN_CXX17 typedef void              value_type;
        -:   41:
        -:   42:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -:   43:#endif
        -:   44:};
        -:   45:
        -:   46:template <>
        -:   47:class _LIBCPP_TEMPLATE_VIS allocator<const void>
        -:   48:{
        -:   49:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:   50:public:
        -:   51:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       pointer;
        -:   52:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;
        -:   53:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void        value_type;
        -:   54:
        -:   55:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -:   56:#endif
        -:   57:};
        -:   58:#endif
        -:   59:
        -:   60:// This class provides a non-trivial default constructor to the class that derives from it
        -:   61:// if the condition is satisfied.
        -:   62://
        -:   63:// The second template parameter exists to allow giving a unique type to __non_trivial_if,
        -:   64:// which makes it possible to avoid breaking the ABI when making this a base class of an
        -:   65:// existing class. Without that, imagine we have classes D1 and D2, both of which used to
        -:   66:// have no base classes, but which now derive from __non_trivial_if. The layout of a class
        -:   67:// that inherits from both D1 and D2 will change because the two __non_trivial_if base
        -:   68:// classes are not allowed to share the same address.
        -:   69://
        -:   70:// By making those __non_trivial_if base classes unique, we work around this problem and
        -:   71:// it is safe to start deriving from __non_trivial_if in existing classes.
        -:   72:template <bool _Cond, class _Unique>
        -:   73:struct __non_trivial_if { };
        -:   74:
        -:   75:template <class _Unique>
        -:   76:struct __non_trivial_if<true, _Unique> {
        -:   77:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_4fposI11__mbstate_tEEEEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIcEEEC2B6v15006Ev called 40 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_6vectorIN7doctest6StringENS1_IS4_EEEEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPN7doctest9IReporterEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7doctest6StringEEEEC2B6v15006Ev called 10 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7doctest16SubcaseSignatureEEEEC2B6v15006Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeIyPvEEEEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__hash_nodeIyPvEEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS5_9IReporterERKNS5_14ContextOptionsEEEEPvEEEEEC2B6v15006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPKN7doctest6detail8TestCaseEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPKN7doctest12TestCaseDataEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEP5GraphEEPvEEEEEEEC2B6v15006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__hash_nodeINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEP5GraphEEPvEEEEEC2B6v15006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEEEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__tree_nodeIN7doctest6StringEPvEEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
       73:   78:    _LIBCPP_CONSTEXPR __non_trivial_if() _NOEXCEPT { }
    $$$$$:   78-block  0
       40:   78-block  1
        1:   78-block  2
        1:   78-block  3
       10:   78-block  4
        3:   78-block  5
        1:   78-block  6
        1:   78-block  7
        2:   78-block  8
        1:   78-block  9
        1:   78-block 10
        5:   78-block 11
        5:   78-block 12
        1:   78-block 13
    $$$$$:   78-block 14
    $$$$$:   78-block 15
    $$$$$:   78-block 16
        1:   78-block 17
        -:   79:};
        -:   80:
        -:   81:// allocator
        -:   82://
        -:   83:// Note: For ABI compatibility between C++20 and previous standards, we make
        -:   84://       allocator<void> trivial in C++20.
        -:   85:
        -:   86:template <class _Tp>
        -:   87:class _LIBCPP_TEMPLATE_VIS allocator
        -:   88:    : private __non_trivial_if<!is_void<_Tp>::value, allocator<_Tp> >
        -:   89:{
        -:   90:    static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");
        -:   91:public:
        -:   92:    typedef size_t      size_type;
        -:   93:    typedef ptrdiff_t   difference_type;
        -:   94:    typedef _Tp         value_type;
        -:   95:    typedef true_type   propagate_on_container_move_assignment;
        -:   96:    typedef true_type   is_always_equal;
        -:   97:
        -:   98:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorINS_4fposI11__mbstate_tEEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIcEC2B6v15006Ev called 40 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_6vectorIN7doctest6StringENS0_IS3_EEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPN7doctest9IReporterEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIN7doctest6StringEEC2B6v15006Ev called 10 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIN7doctest16SubcaseSignatureEEC2B6v15006Ev called 3 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeIyPvEEEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_11__hash_nodeIyPvEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS4_9IReporterERKNS4_14ContextOptionsEEEEPvEEEC2B6v15006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPKN7doctest6detail8TestCaseEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPKN7doctest12TestCaseDataEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEP5GraphEEPvEEEEEC2B6v15006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_11__hash_nodeINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEP5GraphEEPvEEEC2B6v15006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEEC2B6v15006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeIN7doctest6StringEPvEEEC2B6v15006Ev called 1 returned 100% blocks executed 100%
       73:   99:    allocator() _NOEXCEPT = default;
    $$$$$:   99-block  0
       40:   99-block  1
        1:   99-block  2
        1:   99-block  3
       10:   99-block  4
        3:   99-block  5
        1:   99-block  6
        1:   99-block  7
        2:   99-block  8
        1:   99-block  9
        1:   99-block 10
        5:   99-block 11
        5:   99-block 12
        1:   99-block 13
    $$$$$:   99-block 14
    $$$$$:   99-block 15
    $$$$$:   99-block 16
        1:   99-block 17
        -:  100:
        -:  101:    template <class _Up>
        -:  102:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  103:    allocator(const allocator<_Up>&) _NOEXCEPT { }
        -:  104:
        -:  105:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorINS_4fposI11__mbstate_tEEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest16SubcaseSignatureEE8allocateB6v15006Em called 3 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPKN7doctest6detail20IExceptionTranslatorEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7doctest13IContextScopeEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest6StringEE8allocateB6v15006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_6vectorIN7doctest6StringENS0_IS3_EEEEE8allocateB6v15006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPN7doctest9IReporterEE8allocateB6v15006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPKN7doctest6detail8TestCaseEE8allocateB6v15006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPKN7doctest12TestCaseDataEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__hash_nodeIP5GraphPvEEE8allocateB6v15006Em called 5 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeIP5GraphPvEEEEE8allocateB6v15006Em called 4 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_11__hash_nodeIyPvEEE8allocateB6v15006Em called 5 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeIyPvEEEEE8allocateB6v15006Em called 2 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEE8allocateB6v15006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeIN7doctest6StringEPvEEE8allocateB6v15006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS4_9IReporterERKNS4_14ContextOptionsEEEEPvEEE8allocateB6v15006Em called 3 returned 100% blocks executed 66%
       27:  106:    _Tp* allocate(size_t __n) {
       27:  107:        if (__n > allocator_traits<allocator>::max_size(*this))
    $$$$$:  107-block  0
branch  0 never executed
branch  1 never executed
        3:  107-block  1
branch  2 taken 0
branch  3 taken 3
    $$$$$:  107-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  107-block  3
branch  6 never executed
branch  7 never executed
        1:  107-block  4
branch  8 taken 0
branch  9 taken 1
        1:  107-block  5
branch 10 taken 0
branch 11 taken 1
        1:  107-block  6
branch 12 taken 0
branch 13 taken 1
        1:  107-block  7
branch 14 taken 0
branch 15 taken 1
    $$$$$:  107-block  8
branch 16 never executed
branch 17 never executed
        5:  107-block  9
branch 18 taken 0
branch 19 taken 5
        4:  107-block 10
branch 20 taken 0
branch 21 taken 4
        5:  107-block 11
branch 22 taken 0
branch 23 taken 5
        2:  107-block 12
branch 24 taken 0
branch 25 taken 2
        1:  107-block 13
branch 26 taken 0
branch 27 taken 1
    $$$$$:  107-block 14
branch 28 never executed
branch 29 never executed
    $$$$$:  107-block 15
branch 30 never executed
branch 31 never executed
    $$$$$:  107-block 16
branch 32 never executed
branch 33 never executed
    $$$$$:  107-block 17
branch 34 never executed
branch 35 never executed
        3:  107-block 18
branch 36 taken 0
branch 37 taken 3
    #####:  108:            __throw_bad_array_new_length();
    $$$$$:  108-block  0
    $$$$$:  108-block  1
    $$$$$:  108-block  2
    $$$$$:  108-block  3
    $$$$$:  108-block  4
    $$$$$:  108-block  5
    $$$$$:  108-block  6
    $$$$$:  108-block  7
    $$$$$:  108-block  8
    $$$$$:  108-block  9
    $$$$$:  108-block 10
    $$$$$:  108-block 11
    $$$$$:  108-block 12
    $$$$$:  108-block 13
    $$$$$:  108-block 14
    $$$$$:  108-block 15
    $$$$$:  108-block 16
    $$$$$:  108-block 17
    $$$$$:  108-block 18
        -:  109:        if (__libcpp_is_constant_evaluated()) {
        -:  110:            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  111:        } else {
       27:  112:            return static_cast<_Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
    $$$$$:  112-block  0
        3:  112-block  1
    $$$$$:  112-block  2
    $$$$$:  112-block  3
        1:  112-block  4
        1:  112-block  5
        1:  112-block  6
        1:  112-block  7
    $$$$$:  112-block  8
        5:  112-block  9
        4:  112-block 10
        5:  112-block 11
        2:  112-block 12
        1:  112-block 13
    $$$$$:  112-block 14
    $$$$$:  112-block 15
    $$$$$:  112-block 16
    $$$$$:  112-block 17
        3:  112-block 18
        -:  113:        }
        -:  114:    }
        -:  115:
        -:  116:#if _LIBCPP_STD_VER > 20
        -:  117:    [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr
        -:  118:    allocation_result<_Tp*> allocate_at_least(size_t __n) {
        -:  119:        return {allocate(__n), __n};
        -:  120:    }
        -:  121:#endif
        -:  122:
        -:  123:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
function _ZNSt3__19allocatorINS_4fposI11__mbstate_tEEE10deallocateB6v15006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest16SubcaseSignatureEE10deallocateB6v15006EPS2_m called 3 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPKN7doctest6detail20IExceptionTranslatorEE10deallocateB6v15006EPS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7doctest13IContextScopeEE10deallocateB6v15006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest6StringEE10deallocateB6v15006EPS2_m called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_11__hash_nodeIyPvEEE10deallocateB6v15006EPS3_m called 5 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeIyPvEEEEE10deallocateB6v15006EPS7_m called 2 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPN7doctest9IReporterEE10deallocateB6v15006EPS3_m called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_6vectorIN7doctest6StringENS0_IS3_EEEEE10deallocateB6v15006EPS5_m called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_4pairIiN7doctest6StringEEEPFPNS4_9IReporterERKNS4_14ContextOptionsEEEEPvEEE10deallocateB6v15006EPSG_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPKN7doctest6detail8TestCaseEE10deallocateB6v15006EPS5_m called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPKN7doctest12TestCaseDataEE10deallocateB6v15006EPS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__hash_nodeIP5GraphPvEEE10deallocateB6v15006EPS5_m called 5 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeIP5GraphPvEEEEE10deallocateB6v15006EPS9_m called 4 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_11__tree_nodeIN7doctest6detail8TestCaseEPvEEE10deallocateB6v15006EPS6_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEE10deallocateB6v15006EPS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIcE10deallocateB6v15006EPcm called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData16JUnitTestMessageEE10deallocateB6v15006EPS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7doctest12_GLOBAL__N_113JUnitReporter17JUnitTestCaseData13JUnitTestCaseEE10deallocateB6v15006EPS5_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeIN7doctest6StringEPvEEE10deallocateB6v15006EPS5_m called 0 returned 0% blocks executed 0%
       23:  124:    void deallocate(_Tp* __p, size_t __n) _NOEXCEPT {
        -:  125:        if (__libcpp_is_constant_evaluated()) {
        -:  126:            ::operator delete(__p);
        -:  127:        } else {
       23:  128:            _VSTD::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
    $$$$$:  128-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  128-block  1
        3:  128-block  2
branch  2 taken 3
branch  3 taken 0
    $$$$$:  128-block  3
    $$$$$:  128-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  128-block  5
    $$$$$:  128-block  6
branch  6 never executed
branch  7 never executed
    $$$$$:  128-block  7
        1:  128-block  8
branch  8 taken 1
branch  9 taken 0
    $$$$$:  128-block  9
        5:  128-block 10
branch 10 taken 5
branch 11 taken 0
    $$$$$:  128-block 11
        2:  128-block 12
branch 12 taken 2
branch 13 taken 0
    $$$$$:  128-block 13
        1:  128-block 14
branch 14 taken 1
branch 15 taken 0
    $$$$$:  128-block 15
        1:  128-block 16
branch 16 taken 1
branch 17 taken 0
    $$$$$:  128-block 17
    $$$$$:  128-block 18
branch 18 never executed
branch 19 never executed
    $$$$$:  128-block 19
        1:  128-block 20
branch 20 taken 1
branch 21 taken 0
    $$$$$:  128-block 21
    $$$$$:  128-block 22
branch 22 never executed
branch 23 never executed
    $$$$$:  128-block 23
        5:  128-block 24
branch 24 taken 5
branch 25 taken 0
    $$$$$:  128-block 25
        4:  128-block 26
branch 26 taken 4
branch 27 taken 0
    $$$$$:  128-block 27
    $$$$$:  128-block 28
branch 28 never executed
branch 29 never executed
    $$$$$:  128-block 29
    $$$$$:  128-block 30
branch 30 never executed
branch 31 never executed
    $$$$$:  128-block 31
    $$$$$:  128-block 32
branch 32 never executed
branch 33 never executed
    $$$$$:  128-block 33
    $$$$$:  128-block 34
branch 34 never executed
branch 35 never executed
    $$$$$:  128-block 35
    $$$$$:  128-block 36
branch 36 never executed
branch 37 never executed
    $$$$$:  128-block 37
    $$$$$:  128-block 38
branch 38 never executed
branch 39 never executed
    $$$$$:  128-block 39
        -:  129:        }
       23:  130:    }
    $$$$$:  130-block  0
        3:  130-block  1
    $$$$$:  130-block  2
    $$$$$:  130-block  3
        1:  130-block  4
        5:  130-block  5
        2:  130-block  6
        1:  130-block  7
        1:  130-block  8
    $$$$$:  130-block  9
        1:  130-block 10
    $$$$$:  130-block 11
        5:  130-block 12
        4:  130-block 13
    $$$$$:  130-block 14
    $$$$$:  130-block 15
    $$$$$:  130-block 16
    $$$$$:  130-block 17
    $$$$$:  130-block 18
    $$$$$:  130-block 19
        -:  131:
        -:  132:    // C++20 Removed members
        -:  133:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  134:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp*       pointer;
        -:  135:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -:  136:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp&       reference;
        -:  137:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -:  138:
        -:  139:    template <class _Up>
        -:  140:    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {
        -:  141:        typedef allocator<_Up> other;
        -:  142:    };
        -:  143:
        -:  144:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  145:    pointer address(reference __x) const _NOEXCEPT {
        -:  146:        return _VSTD::addressof(__x);
        -:  147:    }
        -:  148:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  149:    const_pointer address(const_reference __x) const _NOEXCEPT {
        -:  150:        return _VSTD::addressof(__x);
        -:  151:    }
        -:  152:
        -:  153:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -:  154:    _Tp* allocate(size_t __n, const void*) {
        -:  155:        return allocate(__n);
        -:  156:    }
        -:  157:
        -:  158:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {
        -:  159:        return size_type(~0) / sizeof(_Tp);
        -:  160:    }
        -:  161:
        -:  162:    template <class _Up, class... _Args>
        -:  163:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  164:    void construct(_Up* __p, _Args&&... __args) {
        -:  165:        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -:  166:    }
        -:  167:
        -:  168:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  169:    void destroy(pointer __p) {
        -:  170:        __p->~_Tp();
        -:  171:    }
        -:  172:#endif
        -:  173:};
        -:  174:
        -:  175:template <class _Tp>
        -:  176:class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>
        -:  177:    : private __non_trivial_if<!is_void<_Tp>::value, allocator<const _Tp> >
        -:  178:{
        -:  179:    static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");
        -:  180:public:
        -:  181:    typedef size_t      size_type;
        -:  182:    typedef ptrdiff_t   difference_type;
        -:  183:    typedef const _Tp   value_type;
        -:  184:    typedef true_type   propagate_on_container_move_assignment;
        -:  185:    typedef true_type   is_always_equal;
        -:  186:
        -:  187:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  188:    allocator() _NOEXCEPT = default;
        -:  189:
        -:  190:    template <class _Up>
        -:  191:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  192:    allocator(const allocator<_Up>&) _NOEXCEPT { }
        -:  193:
        -:  194:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  195:    const _Tp* allocate(size_t __n) {
        -:  196:        if (__n > allocator_traits<allocator>::max_size(*this))
        -:  197:            __throw_bad_array_new_length();
        -:  198:        if (__libcpp_is_constant_evaluated()) {
        -:  199:            return static_cast<const _Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  200:        } else {
        -:  201:            return static_cast<const _Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
        -:  202:        }
        -:  203:    }
        -:  204:
        -:  205:#if _LIBCPP_STD_VER > 20
        -:  206:    [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr
        -:  207:    allocation_result<const _Tp*> allocate_at_least(size_t __n) {
        -:  208:        return {allocate(__n), __n};
        -:  209:    }
        -:  210:#endif
        -:  211:
        -:  212:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  213:    void deallocate(const _Tp* __p, size_t __n) {
        -:  214:        if (__libcpp_is_constant_evaluated()) {
        -:  215:            ::operator delete(const_cast<_Tp*>(__p));
        -:  216:        } else {
        -:  217:            _VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -:  218:        }
        -:  219:    }
        -:  220:
        -:  221:    // C++20 Removed members
        -:  222:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  223:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* pointer;
        -:  224:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -:  225:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& reference;
        -:  226:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -:  227:
        -:  228:    template <class _Up>
        -:  229:    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {
        -:  230:        typedef allocator<_Up> other;
        -:  231:    };
        -:  232:
        -:  233:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  234:    const_pointer address(const_reference __x) const _NOEXCEPT {
        -:  235:        return _VSTD::addressof(__x);
        -:  236:    }
        -:  237:
        -:  238:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -:  239:    const _Tp* allocate(size_t __n, const void*) {
        -:  240:        return allocate(__n);
        -:  241:    }
        -:  242:
        -:  243:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {
        -:  244:        return size_type(~0) / sizeof(_Tp);
        -:  245:    }
        -:  246:
        -:  247:    template <class _Up, class... _Args>
        -:  248:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  249:    void construct(_Up* __p, _Args&&... __args) {
        -:  250:        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -:  251:    }
        -:  252:
        -:  253:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  254:    void destroy(pointer __p) {
        -:  255:        __p->~_Tp();
        -:  256:    }
        -:  257:#endif
        -:  258:};
        -:  259:
        -:  260:template <class _Tp, class _Up>
        -:  261:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  262:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -:  263:
        -:  264:template <class _Tp, class _Up>
        -:  265:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17
        -:  266:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -:  267:
        -:  268:_LIBCPP_END_NAMESPACE_STD
        -:  269:
        -:  270:#endif // _LIBCPP___MEMORY_ALLOCATOR_H
